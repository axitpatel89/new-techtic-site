/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly hash: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'childImageSharp.children'
  | 'childImageSharp.children.children'
  | 'childImageSharp.children.children.children'
  | 'childImageSharp.children.children.id'
  | 'childImageSharp.children.id'
  | 'childImageSharp.children.internal.content'
  | 'childImageSharp.children.internal.contentDigest'
  | 'childImageSharp.children.internal.contentFilePath'
  | 'childImageSharp.children.internal.description'
  | 'childImageSharp.children.internal.fieldOwners'
  | 'childImageSharp.children.internal.ignoreType'
  | 'childImageSharp.children.internal.mediaType'
  | 'childImageSharp.children.internal.owner'
  | 'childImageSharp.children.internal.type'
  | 'childImageSharp.children.parent.children'
  | 'childImageSharp.children.parent.id'
  | 'childImageSharp.fixed.aspectRatio'
  | 'childImageSharp.fixed.base64'
  | 'childImageSharp.fixed.height'
  | 'childImageSharp.fixed.originalName'
  | 'childImageSharp.fixed.src'
  | 'childImageSharp.fixed.srcSet'
  | 'childImageSharp.fixed.srcSetWebp'
  | 'childImageSharp.fixed.srcWebp'
  | 'childImageSharp.fixed.tracedSVG'
  | 'childImageSharp.fixed.width'
  | 'childImageSharp.fluid.aspectRatio'
  | 'childImageSharp.fluid.base64'
  | 'childImageSharp.fluid.originalImg'
  | 'childImageSharp.fluid.originalName'
  | 'childImageSharp.fluid.presentationHeight'
  | 'childImageSharp.fluid.presentationWidth'
  | 'childImageSharp.fluid.sizes'
  | 'childImageSharp.fluid.src'
  | 'childImageSharp.fluid.srcSet'
  | 'childImageSharp.fluid.srcSetWebp'
  | 'childImageSharp.fluid.srcWebp'
  | 'childImageSharp.fluid.tracedSVG'
  | 'childImageSharp.gatsbyImageData'
  | 'childImageSharp.id'
  | 'childImageSharp.internal.content'
  | 'childImageSharp.internal.contentDigest'
  | 'childImageSharp.internal.contentFilePath'
  | 'childImageSharp.internal.description'
  | 'childImageSharp.internal.fieldOwners'
  | 'childImageSharp.internal.ignoreType'
  | 'childImageSharp.internal.mediaType'
  | 'childImageSharp.internal.owner'
  | 'childImageSharp.internal.type'
  | 'childImageSharp.original.height'
  | 'childImageSharp.original.src'
  | 'childImageSharp.original.width'
  | 'childImageSharp.parent.children'
  | 'childImageSharp.parent.children.children'
  | 'childImageSharp.parent.children.id'
  | 'childImageSharp.parent.id'
  | 'childImageSharp.parent.internal.content'
  | 'childImageSharp.parent.internal.contentDigest'
  | 'childImageSharp.parent.internal.contentFilePath'
  | 'childImageSharp.parent.internal.description'
  | 'childImageSharp.parent.internal.fieldOwners'
  | 'childImageSharp.parent.internal.ignoreType'
  | 'childImageSharp.parent.internal.mediaType'
  | 'childImageSharp.parent.internal.owner'
  | 'childImageSharp.parent.internal.type'
  | 'childImageSharp.parent.parent.children'
  | 'childImageSharp.parent.parent.id'
  | 'childImageSharp.resize.aspectRatio'
  | 'childImageSharp.resize.height'
  | 'childImageSharp.resize.originalName'
  | 'childImageSharp.resize.src'
  | 'childImageSharp.resize.tracedSVG'
  | 'childImageSharp.resize.width'
  | 'children'
  | 'childrenImageSharp'
  | 'childrenImageSharp.children'
  | 'childrenImageSharp.children.children'
  | 'childrenImageSharp.children.children.children'
  | 'childrenImageSharp.children.children.id'
  | 'childrenImageSharp.children.id'
  | 'childrenImageSharp.children.internal.content'
  | 'childrenImageSharp.children.internal.contentDigest'
  | 'childrenImageSharp.children.internal.contentFilePath'
  | 'childrenImageSharp.children.internal.description'
  | 'childrenImageSharp.children.internal.fieldOwners'
  | 'childrenImageSharp.children.internal.ignoreType'
  | 'childrenImageSharp.children.internal.mediaType'
  | 'childrenImageSharp.children.internal.owner'
  | 'childrenImageSharp.children.internal.type'
  | 'childrenImageSharp.children.parent.children'
  | 'childrenImageSharp.children.parent.id'
  | 'childrenImageSharp.fixed.aspectRatio'
  | 'childrenImageSharp.fixed.base64'
  | 'childrenImageSharp.fixed.height'
  | 'childrenImageSharp.fixed.originalName'
  | 'childrenImageSharp.fixed.src'
  | 'childrenImageSharp.fixed.srcSet'
  | 'childrenImageSharp.fixed.srcSetWebp'
  | 'childrenImageSharp.fixed.srcWebp'
  | 'childrenImageSharp.fixed.tracedSVG'
  | 'childrenImageSharp.fixed.width'
  | 'childrenImageSharp.fluid.aspectRatio'
  | 'childrenImageSharp.fluid.base64'
  | 'childrenImageSharp.fluid.originalImg'
  | 'childrenImageSharp.fluid.originalName'
  | 'childrenImageSharp.fluid.presentationHeight'
  | 'childrenImageSharp.fluid.presentationWidth'
  | 'childrenImageSharp.fluid.sizes'
  | 'childrenImageSharp.fluid.src'
  | 'childrenImageSharp.fluid.srcSet'
  | 'childrenImageSharp.fluid.srcSetWebp'
  | 'childrenImageSharp.fluid.srcWebp'
  | 'childrenImageSharp.fluid.tracedSVG'
  | 'childrenImageSharp.gatsbyImageData'
  | 'childrenImageSharp.id'
  | 'childrenImageSharp.internal.content'
  | 'childrenImageSharp.internal.contentDigest'
  | 'childrenImageSharp.internal.contentFilePath'
  | 'childrenImageSharp.internal.description'
  | 'childrenImageSharp.internal.fieldOwners'
  | 'childrenImageSharp.internal.ignoreType'
  | 'childrenImageSharp.internal.mediaType'
  | 'childrenImageSharp.internal.owner'
  | 'childrenImageSharp.internal.type'
  | 'childrenImageSharp.original.height'
  | 'childrenImageSharp.original.src'
  | 'childrenImageSharp.original.width'
  | 'childrenImageSharp.parent.children'
  | 'childrenImageSharp.parent.children.children'
  | 'childrenImageSharp.parent.children.id'
  | 'childrenImageSharp.parent.id'
  | 'childrenImageSharp.parent.internal.content'
  | 'childrenImageSharp.parent.internal.contentDigest'
  | 'childrenImageSharp.parent.internal.contentFilePath'
  | 'childrenImageSharp.parent.internal.description'
  | 'childrenImageSharp.parent.internal.fieldOwners'
  | 'childrenImageSharp.parent.internal.ignoreType'
  | 'childrenImageSharp.parent.internal.mediaType'
  | 'childrenImageSharp.parent.internal.owner'
  | 'childrenImageSharp.parent.internal.type'
  | 'childrenImageSharp.parent.parent.children'
  | 'childrenImageSharp.parent.parent.id'
  | 'childrenImageSharp.resize.aspectRatio'
  | 'childrenImageSharp.resize.height'
  | 'childrenImageSharp.resize.originalName'
  | 'childrenImageSharp.resize.src'
  | 'childrenImageSharp.resize.tracedSVG'
  | 'childrenImageSharp.resize.width'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'hash'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'publicURL'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type HeadingsMdx =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type IDQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['ID']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly ne: InputMaybe<Scalars['ID']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
};

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'fixed.aspectRatio'
  | 'fixed.base64'
  | 'fixed.height'
  | 'fixed.originalName'
  | 'fixed.src'
  | 'fixed.srcSet'
  | 'fixed.srcSetWebp'
  | 'fixed.srcWebp'
  | 'fixed.tracedSVG'
  | 'fixed.width'
  | 'fluid.aspectRatio'
  | 'fluid.base64'
  | 'fluid.originalImg'
  | 'fluid.originalName'
  | 'fluid.presentationHeight'
  | 'fluid.presentationWidth'
  | 'fluid.sizes'
  | 'fluid.src'
  | 'fluid.srcSet'
  | 'fluid.srcSetWebp'
  | 'fluid.srcWebp'
  | 'fluid.tracedSVG'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'original.height'
  | 'original.src'
  | 'original.width'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resize.aspectRatio'
  | 'resize.height'
  | 'resize.originalName'
  | 'resize.src'
  | 'resize.tracedSVG'
  | 'resize.width';

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'excerpt'
  | 'excerptAst'
  | 'headings'
  | 'headings.depth'
  | 'headings.id'
  | 'headings.value'
  | 'html'
  | 'htmlAst'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'tableOfContents'
  | 'timeToRead'
  | 'wordCount.paragraphs'
  | 'wordCount.sentences'
  | 'wordCount.words';

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type Mdx = Node & {
  readonly body: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Scalars['String'];
  readonly fileAbsolutePath: Scalars['String'];
  readonly frontmatter: Maybe<MdxFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MdxHeadingMdx>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mdxAST: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly rawBody: Scalars['String'];
  readonly slug: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['JSON']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MdxWordCount>;
};


type Mdx_excerptArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type Mdx_headingsArgs = {
  depth: InputMaybe<HeadingsMdx>;
};


type Mdx_tableOfContentsArgs = {
  maxDepth: InputMaybe<Scalars['Int']>;
};

type MdxConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxConnection_distinctArgs = {
  field: MdxFieldsEnum;
};


type MdxConnection_groupArgs = {
  field: MdxFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxConnection_maxArgs = {
  field: MdxFieldsEnum;
};


type MdxConnection_minArgs = {
  field: MdxFieldsEnum;
};


type MdxConnection_sumArgs = {
  field: MdxFieldsEnum;
};

type MdxEdge = {
  readonly next: Maybe<Mdx>;
  readonly node: Mdx;
  readonly previous: Maybe<Mdx>;
};

type MdxFieldsEnum =
  | 'body'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'excerpt'
  | 'fileAbsolutePath'
  | 'frontmatter.title'
  | 'headings'
  | 'headings.depth'
  | 'headings.value'
  | 'html'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mdxAST'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'rawBody'
  | 'slug'
  | 'tableOfContents'
  | 'timeToRead'
  | 'wordCount.paragraphs'
  | 'wordCount.sentences'
  | 'wordCount.words';

type MdxFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  readonly headings: InputMaybe<MdxHeadingMdxFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mdxAST: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawBody: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MdxWordCountFilterInput>;
};

type MdxFrontmatter = {
  readonly title: Scalars['String'];
};

type MdxFrontmatterFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxGroupConnection_distinctArgs = {
  field: MdxFieldsEnum;
};


type MdxGroupConnection_groupArgs = {
  field: MdxFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxGroupConnection_maxArgs = {
  field: MdxFieldsEnum;
};


type MdxGroupConnection_minArgs = {
  field: MdxFieldsEnum;
};


type MdxGroupConnection_sumArgs = {
  field: MdxFieldsEnum;
};

type MdxHeadingMdx = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly value: Maybe<Scalars['String']>;
};

type MdxHeadingMdxFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MdxHeadingMdxFilterListInput = {
  readonly elemMatch: InputMaybe<MdxHeadingMdxFilterInput>;
};

type MdxSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MdxFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MdxWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MdxWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allMdx: MdxConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStaticImage: StaticImageConnection;
  readonly allTs: tsConnection;
  readonly allTsCareers: tsCareersConnection;
  readonly allTsCareersCategory: tsCareersCategoryConnection;
  readonly allTsCaseStudy: tsCaseStudyConnection;
  readonly allTsCaseStudyCategory: tsCaseStudyCategoryConnection;
  readonly allTsCaseStudyType: tsCaseStudyTypeConnection;
  readonly allTsCategory: tsCategoryConnection;
  readonly allTsComment: tsCommentConnection;
  readonly allTsCommentAuthor: tsCommentAuthorConnection;
  readonly allTsContentNode: tsContentNodeConnection;
  readonly allTsContentType: tsContentTypeConnection;
  readonly allTsGfDraftEntry: tsGfDraftEntryConnection;
  readonly allTsGfEntry: tsGfEntryConnection;
  readonly allTsGfForm: tsGfFormConnection;
  readonly allTsGfSubmittedEntry: tsGfSubmittedEntryConnection;
  readonly allTsMediaItem: tsMediaItemConnection;
  readonly allTsMenu: tsMenuConnection;
  readonly allTsMenuItem: tsMenuItemConnection;
  readonly allTsPage: tsPageConnection;
  readonly allTsPost: tsPostConnection;
  readonly allTsPostFormat: tsPostFormatConnection;
  readonly allTsSingleTestimonialCategory: tsSingleTestimonialCategoryConnection;
  readonly allTsTag: tsTagConnection;
  readonly allTsTaxonomy: tsTaxonomyConnection;
  readonly allTsTeam: tsTeamConnection;
  readonly allTsTermNode: tsTermNodeConnection;
  readonly allTsTestimonial: tsTestimonialConnection;
  readonly allTsUser: tsUserConnection;
  readonly allTsUserRole: tsUserRoleConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly mdx: Maybe<Mdx>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly staticImage: Maybe<StaticImage>;
  readonly ts: Maybe<ts>;
  readonly tsCareers: Maybe<tsCareers>;
  readonly tsCareersCategory: Maybe<tsCareersCategory>;
  readonly tsCaseStudy: Maybe<tsCaseStudy>;
  readonly tsCaseStudyCategory: Maybe<tsCaseStudyCategory>;
  readonly tsCaseStudyType: Maybe<tsCaseStudyType>;
  readonly tsCategory: Maybe<tsCategory>;
  readonly tsComment: Maybe<tsComment>;
  readonly tsCommentAuthor: Maybe<tsCommentAuthor>;
  readonly tsContentNode: Maybe<tsContentNode>;
  readonly tsContentType: Maybe<tsContentType>;
  readonly tsGfDraftEntry: Maybe<tsGfDraftEntry>;
  readonly tsGfEntry: Maybe<tsGfEntry>;
  readonly tsGfForm: Maybe<tsGfForm>;
  readonly tsGfSubmittedEntry: Maybe<tsGfSubmittedEntry>;
  readonly tsMediaItem: Maybe<tsMediaItem>;
  readonly tsMenu: Maybe<tsMenu>;
  readonly tsMenuItem: Maybe<tsMenuItem>;
  readonly tsPage: Maybe<tsPage>;
  readonly tsPost: Maybe<tsPost>;
  readonly tsPostFormat: Maybe<tsPostFormat>;
  readonly tsSingleTestimonialCategory: Maybe<tsSingleTestimonialCategory>;
  readonly tsTag: Maybe<tsTag>;
  readonly tsTaxonomy: Maybe<tsTaxonomy>;
  readonly tsTeam: Maybe<tsTeam>;
  readonly tsTermNode: Maybe<tsTermNode>;
  readonly tsTestimonial: Maybe<tsTestimonial>;
  readonly tsUser: Maybe<tsUser>;
  readonly tsUserRole: Maybe<tsUserRole>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ImageSharpSortInput>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MarkdownRemarkSortInput>;
};


type Query_allMdxArgs = {
  filter: InputMaybe<MdxFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MdxSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_allStaticImageArgs = {
  filter: InputMaybe<StaticImageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<StaticImageSortInput>;
};


type Query_allTsArgs = {
  filter: InputMaybe<tsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsSortInput>;
};


type Query_allTsCareersArgs = {
  filter: InputMaybe<tsCareersFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsCareersSortInput>;
};


type Query_allTsCareersCategoryArgs = {
  filter: InputMaybe<tsCareersCategoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsCareersCategorySortInput>;
};


type Query_allTsCaseStudyArgs = {
  filter: InputMaybe<tsCaseStudyFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsCaseStudySortInput>;
};


type Query_allTsCaseStudyCategoryArgs = {
  filter: InputMaybe<tsCaseStudyCategoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsCaseStudyCategorySortInput>;
};


type Query_allTsCaseStudyTypeArgs = {
  filter: InputMaybe<tsCaseStudyTypeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsCaseStudyTypeSortInput>;
};


type Query_allTsCategoryArgs = {
  filter: InputMaybe<tsCategoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsCategorySortInput>;
};


type Query_allTsCommentArgs = {
  filter: InputMaybe<tsCommentFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsCommentSortInput>;
};


type Query_allTsCommentAuthorArgs = {
  filter: InputMaybe<tsCommentAuthorFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsCommentAuthorSortInput>;
};


type Query_allTsContentNodeArgs = {
  filter: InputMaybe<tsContentNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsContentNodeSortInput>;
};


type Query_allTsContentTypeArgs = {
  filter: InputMaybe<tsContentTypeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsContentTypeSortInput>;
};


type Query_allTsGfDraftEntryArgs = {
  filter: InputMaybe<tsGfDraftEntryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsGfDraftEntrySortInput>;
};


type Query_allTsGfEntryArgs = {
  filter: InputMaybe<tsGfEntryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsGfEntrySortInput>;
};


type Query_allTsGfFormArgs = {
  filter: InputMaybe<tsGfFormFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsGfFormSortInput>;
};


type Query_allTsGfSubmittedEntryArgs = {
  filter: InputMaybe<tsGfSubmittedEntryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsGfSubmittedEntrySortInput>;
};


type Query_allTsMediaItemArgs = {
  filter: InputMaybe<tsMediaItemFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsMediaItemSortInput>;
};


type Query_allTsMenuArgs = {
  filter: InputMaybe<tsMenuFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsMenuSortInput>;
};


type Query_allTsMenuItemArgs = {
  filter: InputMaybe<tsMenuItemFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsMenuItemSortInput>;
};


type Query_allTsPageArgs = {
  filter: InputMaybe<tsPageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsPageSortInput>;
};


type Query_allTsPostArgs = {
  filter: InputMaybe<tsPostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsPostSortInput>;
};


type Query_allTsPostFormatArgs = {
  filter: InputMaybe<tsPostFormatFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsPostFormatSortInput>;
};


type Query_allTsSingleTestimonialCategoryArgs = {
  filter: InputMaybe<tsSingleTestimonialCategoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsSingleTestimonialCategorySortInput>;
};


type Query_allTsTagArgs = {
  filter: InputMaybe<tsTagFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsTagSortInput>;
};


type Query_allTsTaxonomyArgs = {
  filter: InputMaybe<tsTaxonomyFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsTaxonomySortInput>;
};


type Query_allTsTeamArgs = {
  filter: InputMaybe<tsTeamFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsTeamSortInput>;
};


type Query_allTsTermNodeArgs = {
  filter: InputMaybe<tsTermNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsTermNodeSortInput>;
};


type Query_allTsTestimonialArgs = {
  filter: InputMaybe<tsTestimonialFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsTestimonialSortInput>;
};


type Query_allTsUserArgs = {
  filter: InputMaybe<tsUserFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsUserSortInput>;
};


type Query_allTsUserRoleArgs = {
  filter: InputMaybe<tsUserRoleFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<tsUserRoleSortInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_mdxArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  headings: InputMaybe<MdxHeadingMdxFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mdxAST: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawBody: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<JSONQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MdxWordCountFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  flags: InputMaybe<SiteFlagsFilterInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_staticImageArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<FloatQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_tsArgs = {
  acfOptionsFooterOptions: InputMaybe<tsAcfOptionsFooterOptionsFilterInput>;
  acfOptionsHeaderOptions: InputMaybe<tsAcfOptionsHeaderOptionsFilterInput>;
  allSettings: InputMaybe<tsSettingsFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  discussionSettings: InputMaybe<tsDiscussionSettingsFilterInput>;
  generalSettings: InputMaybe<tsGeneralSettingsFilterInput>;
  gfSettings: InputMaybe<tsGfSettingsFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  readingSettings: InputMaybe<tsReadingSettingsFilterInput>;
  schemaMd5: InputMaybe<StringQueryOperatorInput>;
  seo: InputMaybe<tsSEOConfigFilterInput>;
  tsOptions: InputMaybe<tsTsOptionsFilterInput>;
  viewer: InputMaybe<tsUserFilterInput>;
  wpGatsby: InputMaybe<tsWPGatsbyFilterInput>;
  writingSettings: InputMaybe<tsWritingSettingsFilterInput>;
};


type Query_tsCareersArgs = {
  ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  careers: InputMaybe<tsCareers_CareersFilterInput>;
  careersCategory: InputMaybe<tsCareersToCareersCategoryConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  contentTypeName: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  dateGmt: InputMaybe<DateQueryOperatorInput>;
  desiredSlug: InputMaybe<StringQueryOperatorInput>;
  enclosure: InputMaybe<StringQueryOperatorInput>;
  featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  featuredImageId: InputMaybe<IDQueryOperatorInput>;
  guid: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  menuOrder: InputMaybe<IntQueryOperatorInput>;
  modified: InputMaybe<DateQueryOperatorInput>;
  modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  seo: InputMaybe<tsPostTypeSEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  template: InputMaybe<tsContentTemplateFilterInput>;
  terms: InputMaybe<tsCareersToTermNodeConnectionFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};


type Query_tsCareersCategoryArgs = {
  ancestors: InputMaybe<tsCareersCategoryToAncestorsCareersCategoryConnectionFilterInput>;
  careers: InputMaybe<tsCareersCategoryToCareersConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentNodes: InputMaybe<tsCareersCategoryToContentNodeConnectionFilterInput>;
  count: InputMaybe<IntQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  seo: InputMaybe<tsTaxonomySEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  taxonomy: InputMaybe<tsCareersCategoryToTaxonomyConnectionEdgeFilterInput>;
  taxonomyName: InputMaybe<StringQueryOperatorInput>;
  termGroupId: InputMaybe<IntQueryOperatorInput>;
  termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  wpChildren: InputMaybe<tsCareersCategoryToCareersCategoryConnectionFilterInput>;
  wpParent: InputMaybe<tsCareersCategoryToParentCareersCategoryConnectionEdgeFilterInput>;
};


type Query_tsCaseStudyArgs = {
  camberRoadmapCaseStudy: InputMaybe<tsCaseStudy_CamberroadmapcasestudyFilterInput>;
  caseStudy: InputMaybe<tsCaseStudy_CasestudyFilterInput>;
  caseStudyCategory: InputMaybe<tsCaseStudyToCaseStudyCategoryConnectionFilterInput>;
  caseStudyDetailsPage: InputMaybe<tsCaseStudy_CasestudydetailspageFilterInput>;
  caseStudyType: InputMaybe<tsCaseStudyToCaseStudyTypeConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  contentTypeName: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  dateGmt: InputMaybe<DateQueryOperatorInput>;
  desiredSlug: InputMaybe<StringQueryOperatorInput>;
  enclosure: InputMaybe<StringQueryOperatorInput>;
  featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  featuredImageId: InputMaybe<IDQueryOperatorInput>;
  guid: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  modified: InputMaybe<DateQueryOperatorInput>;
  modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  newCaseStudy: InputMaybe<tsCaseStudy_NewcasestudyFilterInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  portfolio: InputMaybe<tsCaseStudy_PortfolioFilterInput>;
  seo: InputMaybe<tsPostTypeSEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  template: InputMaybe<tsContentTemplateFilterInput>;
  terms: InputMaybe<tsCaseStudyToTermNodeConnectionFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsCaseStudyCategoryArgs = {
  ancestors: InputMaybe<tsCaseStudyCategoryToAncestorsCaseStudyCategoryConnectionFilterInput>;
  caseStudies: InputMaybe<tsCaseStudyCategoryToCaseStudyConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentNodes: InputMaybe<tsCaseStudyCategoryToContentNodeConnectionFilterInput>;
  count: InputMaybe<IntQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  seo: InputMaybe<tsTaxonomySEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  taxonomy: InputMaybe<tsCaseStudyCategoryToTaxonomyConnectionEdgeFilterInput>;
  taxonomyName: InputMaybe<StringQueryOperatorInput>;
  termGroupId: InputMaybe<IntQueryOperatorInput>;
  termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  wpChildren: InputMaybe<tsCaseStudyCategoryToCaseStudyCategoryConnectionFilterInput>;
  wpParent: InputMaybe<tsCaseStudyCategoryToParentCaseStudyCategoryConnectionEdgeFilterInput>;
};


type Query_tsCaseStudyTypeArgs = {
  ancestors: InputMaybe<tsCaseStudyTypeToAncestorsCaseStudyTypeConnectionFilterInput>;
  caseStudies: InputMaybe<tsCaseStudyTypeToCaseStudyConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentNodes: InputMaybe<tsCaseStudyTypeToContentNodeConnectionFilterInput>;
  count: InputMaybe<IntQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  seo: InputMaybe<tsTaxonomySEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  taxonomy: InputMaybe<tsCaseStudyTypeToTaxonomyConnectionEdgeFilterInput>;
  taxonomyName: InputMaybe<StringQueryOperatorInput>;
  termGroupId: InputMaybe<IntQueryOperatorInput>;
  termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  wpChildren: InputMaybe<tsCaseStudyTypeToCaseStudyTypeConnectionFilterInput>;
  wpParent: InputMaybe<tsCaseStudyTypeToParentCaseStudyTypeConnectionEdgeFilterInput>;
};


type Query_tsCategoryArgs = {
  ancestors: InputMaybe<tsCategoryToAncestorsCategoryConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentNodes: InputMaybe<tsCategoryToContentNodeConnectionFilterInput>;
  count: InputMaybe<IntQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  posts: InputMaybe<tsCategoryToPostConnectionFilterInput>;
  seo: InputMaybe<tsTaxonomySEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  taxonomy: InputMaybe<tsCategoryToTaxonomyConnectionEdgeFilterInput>;
  taxonomyName: InputMaybe<StringQueryOperatorInput>;
  termGroupId: InputMaybe<IntQueryOperatorInput>;
  termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  wpChildren: InputMaybe<tsCategoryToCategoryConnectionFilterInput>;
  wpParent: InputMaybe<tsCategoryToParentCategoryConnectionEdgeFilterInput>;
};


type Query_tsCommentArgs = {
  agent: InputMaybe<StringQueryOperatorInput>;
  approved: InputMaybe<BooleanQueryOperatorInput>;
  author: InputMaybe<tsCommentToCommenterConnectionEdgeFilterInput>;
  authorIp: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  commentedOn: InputMaybe<tsCommentToContentNodeConnectionEdgeFilterInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  dateGmt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  karma: InputMaybe<IntQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  replies: InputMaybe<tsCommentToCommentConnectionFilterInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  wpParent: InputMaybe<tsCommentToParentCommentConnectionEdgeFilterInput>;
};


type Query_tsCommentAuthorArgs = {
  avatar: InputMaybe<tsAvatarFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  email: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsContentNodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  contentTypeName: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  dateGmt: InputMaybe<DateQueryOperatorInput>;
  desiredSlug: InputMaybe<StringQueryOperatorInput>;
  enclosure: InputMaybe<StringQueryOperatorInput>;
  guid: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  modified: InputMaybe<DateQueryOperatorInput>;
  modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  seo: InputMaybe<tsPostTypeSEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  template: InputMaybe<tsContentTemplateFilterInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsContentTypeArgs = {
  archivePath: InputMaybe<StringQueryOperatorInput>;
  canExport: InputMaybe<BooleanQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  connectedTaxonomies: InputMaybe<tsContentTypeToTaxonomyConnectionFilterInput>;
  contentNodes: InputMaybe<tsContentTypeToContentNodeConnectionFilterInput>;
  deleteWithUser: InputMaybe<BooleanQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  excludeFromSearch: InputMaybe<BooleanQueryOperatorInput>;
  graphqlPluralName: InputMaybe<StringQueryOperatorInput>;
  graphqlSingleName: InputMaybe<StringQueryOperatorInput>;
  hasArchive: InputMaybe<BooleanQueryOperatorInput>;
  hierarchical: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isFrontPage: InputMaybe<BooleanQueryOperatorInput>;
  isPostsPage: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  labels: InputMaybe<tsPostTypeLabelDetailsFilterInput>;
  menuIcon: InputMaybe<StringQueryOperatorInput>;
  menuPosition: InputMaybe<IntQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  public: InputMaybe<BooleanQueryOperatorInput>;
  publiclyQueryable: InputMaybe<BooleanQueryOperatorInput>;
  restBase: InputMaybe<StringQueryOperatorInput>;
  restControllerClass: InputMaybe<StringQueryOperatorInput>;
  showInAdminBar: InputMaybe<BooleanQueryOperatorInput>;
  showInGraphql: InputMaybe<BooleanQueryOperatorInput>;
  showInMenu: InputMaybe<BooleanQueryOperatorInput>;
  showInNavMenus: InputMaybe<BooleanQueryOperatorInput>;
  showInRest: InputMaybe<BooleanQueryOperatorInput>;
  showUi: InputMaybe<BooleanQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsGfDraftEntryArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdBy: InputMaybe<tsUserFilterInput>;
  createdByDatabaseId: InputMaybe<IntQueryOperatorInput>;
  createdById: InputMaybe<IDQueryOperatorInput>;
  dateCreated: InputMaybe<StringQueryOperatorInput>;
  dateCreatedGmt: InputMaybe<StringQueryOperatorInput>;
  dateUpdated: InputMaybe<StringQueryOperatorInput>;
  dateUpdatedGmt: InputMaybe<StringQueryOperatorInput>;
  form: InputMaybe<tsGfFormFilterInput>;
  formDatabaseId: InputMaybe<IntQueryOperatorInput>;
  formFields: InputMaybe<tsGfEntryToFormFieldConnectionFilterInput>;
  formId: InputMaybe<IDQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  ip: InputMaybe<StringQueryOperatorInput>;
  isDraft: InputMaybe<BooleanQueryOperatorInput>;
  isSubmitted: InputMaybe<BooleanQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  resumeToken: InputMaybe<StringQueryOperatorInput>;
  sourceUrl: InputMaybe<StringQueryOperatorInput>;
  userAgent: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsGfEntryArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdBy: InputMaybe<tsUserFilterInput>;
  createdByDatabaseId: InputMaybe<IntQueryOperatorInput>;
  createdById: InputMaybe<IDQueryOperatorInput>;
  dateCreated: InputMaybe<StringQueryOperatorInput>;
  dateCreatedGmt: InputMaybe<StringQueryOperatorInput>;
  dateUpdated: InputMaybe<StringQueryOperatorInput>;
  dateUpdatedGmt: InputMaybe<StringQueryOperatorInput>;
  form: InputMaybe<tsGfFormFilterInput>;
  formDatabaseId: InputMaybe<IntQueryOperatorInput>;
  formFields: InputMaybe<tsGfEntryToFormFieldConnectionFilterInput>;
  formId: InputMaybe<IDQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  ip: InputMaybe<StringQueryOperatorInput>;
  isDraft: InputMaybe<BooleanQueryOperatorInput>;
  isSubmitted: InputMaybe<BooleanQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sourceUrl: InputMaybe<StringQueryOperatorInput>;
  userAgent: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsGfFormArgs = {
  children: InputMaybe<NodeFilterListInput>;
  confirmations: InputMaybe<tsFormConfirmationFilterListInput>;
  cssClass: InputMaybe<StringQueryOperatorInput>;
  customRequiredIndicator: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  dateCreated: InputMaybe<StringQueryOperatorInput>;
  dateCreatedGmt: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  descriptionPlacement: InputMaybe<tsFormDescriptionPlacementEnumQueryOperatorInput>;
  entries: InputMaybe<tsGfFormToGfEntryConnectionFilterInput>;
  entryLimits: InputMaybe<tsFormEntryLimitsFilterInput>;
  firstPageCssClass: InputMaybe<StringQueryOperatorInput>;
  formFields: InputMaybe<tsGfFormToFormFieldConnectionFilterInput>;
  hasConditionalLogicAnimation: InputMaybe<BooleanQueryOperatorInput>;
  hasHoneypot: InputMaybe<BooleanQueryOperatorInput>;
  hasValidationSummary: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isActive: InputMaybe<BooleanQueryOperatorInput>;
  isTrash: InputMaybe<BooleanQueryOperatorInput>;
  labelPlacement: InputMaybe<tsFormLabelPlacementEnumQueryOperatorInput>;
  login: InputMaybe<tsFormLoginFilterInput>;
  markupVersion: InputMaybe<IntQueryOperatorInput>;
  nextFieldId: InputMaybe<IntQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  notifications: InputMaybe<tsFormNotificationFilterListInput>;
  pagination: InputMaybe<tsFormPaginationFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  personalData: InputMaybe<tsFormPersonalDataFilterInput>;
  postCreation: InputMaybe<tsFormPostCreationFilterInput>;
  requiredIndicator: InputMaybe<tsFormFieldRequiredIndicatorEnumQueryOperatorInput>;
  saveAndContinue: InputMaybe<tsFormSaveAndContinueFilterInput>;
  scheduling: InputMaybe<tsFormScheduleFilterInput>;
  subLabelPlacement: InputMaybe<tsFormSubLabelPlacementEnumQueryOperatorInput>;
  submitButton: InputMaybe<tsFormSubmitButtonFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsGfSubmittedEntryArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdBy: InputMaybe<tsUserFilterInput>;
  createdByDatabaseId: InputMaybe<IntQueryOperatorInput>;
  createdById: InputMaybe<IDQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  dateCreated: InputMaybe<StringQueryOperatorInput>;
  dateCreatedGmt: InputMaybe<StringQueryOperatorInput>;
  dateUpdated: InputMaybe<StringQueryOperatorInput>;
  dateUpdatedGmt: InputMaybe<StringQueryOperatorInput>;
  form: InputMaybe<tsGfFormFilterInput>;
  formDatabaseId: InputMaybe<IntQueryOperatorInput>;
  formFields: InputMaybe<tsGfEntryToFormFieldConnectionFilterInput>;
  formId: InputMaybe<IDQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  ip: InputMaybe<StringQueryOperatorInput>;
  isDraft: InputMaybe<BooleanQueryOperatorInput>;
  isRead: InputMaybe<BooleanQueryOperatorInput>;
  isStarred: InputMaybe<BooleanQueryOperatorInput>;
  isSubmitted: InputMaybe<BooleanQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  post: InputMaybe<tsPostFilterInput>;
  postDatabaseId: InputMaybe<IntQueryOperatorInput>;
  sourceUrl: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<tsEntryStatusEnumQueryOperatorInput>;
  userAgent: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsMediaItemArgs = {
  altText: InputMaybe<StringQueryOperatorInput>;
  ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  author: InputMaybe<tsNodeWithAuthorToUserConnectionEdgeFilterInput>;
  authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
  authorId: InputMaybe<IDQueryOperatorInput>;
  caption: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  commentCount: InputMaybe<IntQueryOperatorInput>;
  commentStatus: InputMaybe<StringQueryOperatorInput>;
  comments: InputMaybe<tsMediaItemToCommentConnectionFilterInput>;
  contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  contentTypeName: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  dateGmt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  desiredSlug: InputMaybe<StringQueryOperatorInput>;
  enclosure: InputMaybe<StringQueryOperatorInput>;
  fileSize: InputMaybe<IntQueryOperatorInput>;
  filename: InputMaybe<StringQueryOperatorInput>;
  filesize: InputMaybe<IntQueryOperatorInput>;
  gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  guid: InputMaybe<StringQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  localFile: InputMaybe<FileFilterInput>;
  mediaDetails: InputMaybe<tsMediaDetailsFilterInput>;
  mediaItemUrl: InputMaybe<StringQueryOperatorInput>;
  mediaType: InputMaybe<StringQueryOperatorInput>;
  mimeType: InputMaybe<StringQueryOperatorInput>;
  modified: InputMaybe<DateQueryOperatorInput>;
  modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  publicUrl: InputMaybe<StringQueryOperatorInput>;
  remoteFile: InputMaybe<FileFilterInput>;
  resize: InputMaybe<RemoteFileResizeFilterInput>;
  seo: InputMaybe<tsPostTypeSEOFilterInput>;
  sizes: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  sourceUrl: InputMaybe<StringQueryOperatorInput>;
  srcSet: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  template: InputMaybe<tsContentTemplateFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
  wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};


type Query_tsMenuArgs = {
  children: InputMaybe<NodeFilterListInput>;
  count: InputMaybe<IntQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locations: InputMaybe<tsMenuLocationEnumQueryOperatorInput>;
  menuItems: InputMaybe<tsMenuToMenuItemConnectionFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsMenuItemArgs = {
  childItems: InputMaybe<tsMenuItemToMenuItemConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  connectedNode: InputMaybe<tsMenuItemToMenuItemLinkableConnectionEdgeFilterInput>;
  cssClasses: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  linkRelationship: InputMaybe<StringQueryOperatorInput>;
  locations: InputMaybe<tsMenuLocationEnumQueryOperatorInput>;
  menu: InputMaybe<tsMenuItemToMenuConnectionEdgeFilterInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  target: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsPageArgs = {
  ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  author: InputMaybe<tsNodeWithAuthorToUserConnectionEdgeFilterInput>;
  authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
  authorId: InputMaybe<IDQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  commentCount: InputMaybe<IntQueryOperatorInput>;
  commentStatus: InputMaybe<StringQueryOperatorInput>;
  comments: InputMaybe<tsPageToCommentConnectionFilterInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  contentTypeName: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  dateGmt: InputMaybe<DateQueryOperatorInput>;
  desiredSlug: InputMaybe<StringQueryOperatorInput>;
  enclosure: InputMaybe<StringQueryOperatorInput>;
  featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  featuredImageId: InputMaybe<IDQueryOperatorInput>;
  flexibleContent: InputMaybe<tsPage_FlexiblecontentFilterInput>;
  guid: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isFrontPage: InputMaybe<BooleanQueryOperatorInput>;
  isPostsPage: InputMaybe<BooleanQueryOperatorInput>;
  isPrivacyPage: InputMaybe<BooleanQueryOperatorInput>;
  isRevision: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  menuOrder: InputMaybe<IntQueryOperatorInput>;
  modified: InputMaybe<DateQueryOperatorInput>;
  modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  seo: InputMaybe<tsPostTypeSEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  template: InputMaybe<tsContentTemplateFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};


type Query_tsPostArgs = {
  author: InputMaybe<tsNodeWithAuthorToUserConnectionEdgeFilterInput>;
  authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
  authorId: InputMaybe<IDQueryOperatorInput>;
  caseStudy: InputMaybe<tsPost_CasestudyFilterInput>;
  categories: InputMaybe<tsPostToCategoryConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  commentCount: InputMaybe<IntQueryOperatorInput>;
  commentStatus: InputMaybe<StringQueryOperatorInput>;
  comments: InputMaybe<tsPostToCommentConnectionFilterInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  contentTypeName: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  dateGmt: InputMaybe<DateQueryOperatorInput>;
  desiredSlug: InputMaybe<StringQueryOperatorInput>;
  enclosure: InputMaybe<StringQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  featuredImageId: InputMaybe<IDQueryOperatorInput>;
  guid: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isRevision: InputMaybe<BooleanQueryOperatorInput>;
  isSticky: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  modified: InputMaybe<DateQueryOperatorInput>;
  modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  next: InputMaybe<tsPostFilterInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pingStatus: InputMaybe<StringQueryOperatorInput>;
  pinged: InputMaybe<StringQueryOperatorInput>;
  postFormats: InputMaybe<tsPostToPostFormatConnectionFilterInput>;
  previous: InputMaybe<tsPostFilterInput>;
  selectCaseStudy: InputMaybe<tsPost_SelectcasestudyFilterInput>;
  seo: InputMaybe<tsPostTypeSEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<tsPostToTagConnectionFilterInput>;
  template: InputMaybe<tsContentTemplateFilterInput>;
  terms: InputMaybe<tsPostToTermNodeConnectionFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  toPing: InputMaybe<StringQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsPostFormatArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentNodes: InputMaybe<tsPostFormatToContentNodeConnectionFilterInput>;
  count: InputMaybe<IntQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  posts: InputMaybe<tsPostFormatToPostConnectionFilterInput>;
  seo: InputMaybe<tsTaxonomySEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  taxonomy: InputMaybe<tsPostFormatToTaxonomyConnectionEdgeFilterInput>;
  taxonomyName: InputMaybe<StringQueryOperatorInput>;
  termGroupId: InputMaybe<IntQueryOperatorInput>;
  termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsSingleTestimonialCategoryArgs = {
  ancestors: InputMaybe<tsSingleTestimonialCategoryToAncestorsSingleTestimonialCategoryConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentNodes: InputMaybe<tsSingleTestimonialCategoryToContentNodeConnectionFilterInput>;
  count: InputMaybe<IntQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  seo: InputMaybe<tsTaxonomySEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  taxonomy: InputMaybe<tsSingleTestimonialCategoryToTaxonomyConnectionEdgeFilterInput>;
  taxonomyName: InputMaybe<StringQueryOperatorInput>;
  termGroupId: InputMaybe<IntQueryOperatorInput>;
  termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  testimonial: InputMaybe<tsSingleTestimonialCategoryToTestimonialConnectionFilterInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  wpChildren: InputMaybe<tsSingleTestimonialCategoryToSingleTestimonialCategoryConnectionFilterInput>;
  wpParent: InputMaybe<tsSingleTestimonialCategoryToParentSingleTestimonialCategoryConnectionEdgeFilterInput>;
};


type Query_tsTagArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentNodes: InputMaybe<tsTagToContentNodeConnectionFilterInput>;
  count: InputMaybe<IntQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  posts: InputMaybe<tsTagToPostConnectionFilterInput>;
  seo: InputMaybe<tsTaxonomySEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  taxonomy: InputMaybe<tsTagToTaxonomyConnectionEdgeFilterInput>;
  taxonomyName: InputMaybe<StringQueryOperatorInput>;
  termGroupId: InputMaybe<IntQueryOperatorInput>;
  termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  testimonial: InputMaybe<tsTagToTestimonialConnectionFilterInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsTaxonomyArgs = {
  archivePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  connectedContentTypes: InputMaybe<tsTaxonomyToContentTypeConnectionFilterInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  graphqlPluralName: InputMaybe<StringQueryOperatorInput>;
  graphqlSingleName: InputMaybe<StringQueryOperatorInput>;
  hierarchical: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  public: InputMaybe<BooleanQueryOperatorInput>;
  restBase: InputMaybe<StringQueryOperatorInput>;
  restControllerClass: InputMaybe<StringQueryOperatorInput>;
  showCloud: InputMaybe<BooleanQueryOperatorInput>;
  showInAdminColumn: InputMaybe<BooleanQueryOperatorInput>;
  showInGraphql: InputMaybe<BooleanQueryOperatorInput>;
  showInMenu: InputMaybe<BooleanQueryOperatorInput>;
  showInNavMenus: InputMaybe<BooleanQueryOperatorInput>;
  showInQuickEdit: InputMaybe<BooleanQueryOperatorInput>;
  showInRest: InputMaybe<BooleanQueryOperatorInput>;
  showUi: InputMaybe<BooleanQueryOperatorInput>;
};


type Query_tsTeamArgs = {
  ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  contentTypeName: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  dateGmt: InputMaybe<DateQueryOperatorInput>;
  desiredSlug: InputMaybe<StringQueryOperatorInput>;
  enclosure: InputMaybe<StringQueryOperatorInput>;
  featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  featuredImageId: InputMaybe<IDQueryOperatorInput>;
  guid: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  menuOrder: InputMaybe<IntQueryOperatorInput>;
  modified: InputMaybe<DateQueryOperatorInput>;
  modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  seo: InputMaybe<tsPostTypeSEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  team: InputMaybe<tsTeam_TeamFilterInput>;
  template: InputMaybe<tsContentTemplateFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};


type Query_tsTermNodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  count: InputMaybe<IntQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  taxonomyName: InputMaybe<StringQueryOperatorInput>;
  termGroupId: InputMaybe<IntQueryOperatorInput>;
  termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsTestimonialArgs = {
  TestimonialsForCaseStudies: InputMaybe<tsTestimonial_TestimonialsforcasestudiesFilterInput>;
  ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  contentTypeName: InputMaybe<StringQueryOperatorInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  dateGmt: InputMaybe<DateQueryOperatorInput>;
  desiredSlug: InputMaybe<StringQueryOperatorInput>;
  enclosure: InputMaybe<StringQueryOperatorInput>;
  featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  featuredImageId: InputMaybe<IDQueryOperatorInput>;
  guid: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  menuOrder: InputMaybe<IntQueryOperatorInput>;
  modified: InputMaybe<DateQueryOperatorInput>;
  modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  parentId: InputMaybe<IDQueryOperatorInput>;
  seo: InputMaybe<tsPostTypeSEOFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<tsTestimonialToTagConnectionFilterInput>;
  template: InputMaybe<tsContentTemplateFilterInput>;
  terms: InputMaybe<tsTestimonialToTermNodeConnectionFilterInput>;
  testimonialCategory: InputMaybe<tsTestimonialToSingleTestimonialCategoryConnectionFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};


type Query_tsUserArgs = {
  authorProfile: InputMaybe<tsUser_AuthorprofileFilterInput>;
  avatar: InputMaybe<tsAvatarFilterInput>;
  capKey: InputMaybe<StringQueryOperatorInput>;
  capabilities: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  comments: InputMaybe<tsUserToCommentConnectionFilterInput>;
  databaseId: InputMaybe<IntQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  email: InputMaybe<StringQueryOperatorInput>;
  extraCapabilities: InputMaybe<StringQueryOperatorInput>;
  firstName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  lastName: InputMaybe<StringQueryOperatorInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nicename: InputMaybe<StringQueryOperatorInput>;
  nickname: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  pages: InputMaybe<tsUserToPageConnectionFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  posts: InputMaybe<tsUserToPostConnectionFilterInput>;
  registeredDate: InputMaybe<StringQueryOperatorInput>;
  roles: InputMaybe<tsUserToUserRoleConnectionFilterInput>;
  seo: InputMaybe<tsSEOUserFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  username: InputMaybe<StringQueryOperatorInput>;
};


type Query_tsUserRoleArgs = {
  capabilities: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  displayName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};

/** Remote Interface */
type RemoteFile = {
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly mimeType: Scalars['String'];
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly width: Maybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type RemoteFileCropFocus =
  | 'bottom'
  | 'center'
  | 'edges'
  | 'entropy'
  | 'faces'
  | 'left'
  | 'right'
  | 'top';

type RemoteFileFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'outside';

type RemoteFileFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | 'png'
  | 'webp';

type RemoteFileLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type RemoteFilePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type RemoteFileResize = {
  readonly height: Maybe<Scalars['Int']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type RemoteFileResizeFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly flags: Maybe<SiteFlags>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'flags.PARALLEL_QUERY_RUNNING'
  | 'graphqlTypegen.generateOnBuild'
  | 'graphqlTypegen.typesOutputPath'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.author'
  | 'siteMetadata.description'
  | 'siteMetadata.siteUrl'
  | 'siteMetadata.title'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flags: InputMaybe<SiteFlagsFilterInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFlags = {
  readonly PARALLEL_QUERY_RUNNING: Maybe<Scalars['Boolean']>;
};

type SiteFlagsFilterInput = {
  readonly PARALLEL_QUERY_RUNNING: InputMaybe<BooleanQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGraphqlTypegen = {
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.contentFilePath'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.contentFilePath'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.contentFilePath'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StaticImage = Node & {
  readonly absolutePath: Maybe<Scalars['String']>;
  readonly accessTime: Maybe<Scalars['Date']>;
  readonly atime: Maybe<Scalars['Date']>;
  readonly atimeMs: Maybe<Scalars['Float']>;
  readonly base: Maybe<Scalars['String']>;
  readonly birthTime: Maybe<Scalars['Date']>;
  readonly birthtime: Maybe<Scalars['Date']>;
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Maybe<Scalars['Date']>;
  readonly ctimeMs: Maybe<Scalars['Float']>;
  readonly dev: Maybe<Scalars['Float']>;
  readonly dir: Maybe<Scalars['String']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly extension: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ino: Maybe<Scalars['Float']>;
  readonly internal: Internal;
  readonly mode: Maybe<Scalars['Int']>;
  readonly modifiedTime: Maybe<Scalars['Date']>;
  readonly mtime: Maybe<Scalars['Date']>;
  readonly mtimeMs: Maybe<Scalars['Float']>;
  readonly name: Maybe<Scalars['String']>;
  readonly nlink: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly prettySize: Maybe<Scalars['String']>;
  readonly rdev: Maybe<Scalars['Int']>;
  readonly relativeDirectory: Maybe<Scalars['String']>;
  readonly relativePath: Maybe<Scalars['String']>;
  readonly root: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Int']>;
  readonly sourceInstanceName: Maybe<Scalars['String']>;
  readonly uid: Maybe<Scalars['Int']>;
};


type StaticImage_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_birthtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type StaticImageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StaticImageEdge>;
  readonly group: ReadonlyArray<StaticImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StaticImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StaticImageConnection_distinctArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageConnection_groupArgs = {
  field: StaticImageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StaticImageConnection_maxArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageConnection_minArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageConnection_sumArgs = {
  field: StaticImageFieldsEnum;
};

type StaticImageEdge = {
  readonly next: Maybe<StaticImage>;
  readonly node: StaticImage;
  readonly previous: Maybe<StaticImage>;
};

type StaticImageFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type StaticImageFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<FloatQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type StaticImageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StaticImageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<StaticImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StaticImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StaticImageGroupConnection_distinctArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageGroupConnection_groupArgs = {
  field: StaticImageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StaticImageGroupConnection_maxArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageGroupConnection_minArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageGroupConnection_sumArgs = {
  field: StaticImageFieldsEnum;
};

type StaticImageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<StaticImageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

/** Non-node WPGraphQL root fields. */
type ts = Node & {
  /** Footer Options options. */
  readonly acfOptionsFooterOptions: Maybe<tsAcfOptionsFooterOptions>;
  /** Header Options options. */
  readonly acfOptionsHeaderOptions: Maybe<tsAcfOptionsHeaderOptions>;
  /** Entry point to get all settings for the site */
  readonly allSettings: Maybe<tsSettings>;
  readonly children: ReadonlyArray<Node>;
  /** Fields of the &#039;DiscussionSettings&#039; settings group */
  readonly discussionSettings: Maybe<tsDiscussionSettings>;
  /** Fields of the &#039;GeneralSettings&#039; settings group */
  readonly generalSettings: Maybe<tsGeneralSettings>;
  /** Gravity Forms settings. */
  readonly gfSettings: Maybe<tsGfSettings>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Fields of the &#039;ReadingSettings&#039; settings group */
  readonly readingSettings: Maybe<tsReadingSettings>;
  /** Returns an MD5 hash of the schema, useful in determining if the schema has changed. */
  readonly schemaMd5: Maybe<Scalars['String']>;
  /** Returns seo site data */
  readonly seo: Maybe<tsSEOConfig>;
  /** Theme Options options. */
  readonly tsOptions: Maybe<tsTsOptions>;
  /** Returns the current user */
  readonly viewer: Maybe<tsUser>;
  /** Information needed by gatsby-source-wordpress. */
  readonly wpGatsby: Maybe<tsWPGatsby>;
  /** Fields of the &#039;WritingSettings&#039; settings group */
  readonly writingSettings: Maybe<tsWritingSettings>;
};

type tsAcfFieldGroup = {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
};

/** ACF Link field */
type tsAcfLink = {
  /** The target of the link (_blank, etc) */
  readonly target: Maybe<Scalars['String']>;
  /** The title of the link */
  readonly title: Maybe<Scalars['String']>;
  /** The url of the link */
  readonly url: Maybe<Scalars['String']>;
};

type tsAcfLinkFilterInput = {
  readonly target: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

/** Footer Options options. */
type tsAcfOptionsFooterOptions = {
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Footer Options&quot; was set to Show in GraphQL. */
  readonly footerOption: Maybe<tsAcfOptionsFooterOptions_Footeroption>;
  readonly pageSlug: Maybe<Scalars['String']>;
  readonly pageTitle: Maybe<Scalars['String']>;
};

type tsAcfOptionsFooterOptionsFilterInput = {
  readonly footerOption: InputMaybe<tsAcfOptionsFooterOptions_FooteroptionFilterInput>;
  readonly pageSlug: InputMaybe<StringQueryOperatorInput>;
  readonly pageTitle: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsAcfOptionsFooterOptions_Footeroption = tsAcfFieldGroup & {
  readonly connectWithUs: Maybe<tsAcfOptionsFooterOptions_Footeroption_ConnectWithUs>;
  readonly content: Maybe<Scalars['String']>;
  readonly explore: Maybe<tsAcfOptionsFooterOptions_Footeroption_Explore>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly getOurNewsletter: Maybe<tsAcfOptionsFooterOptions_Footeroption_GetOurNewsletter>;
  readonly letSTalkCta: Maybe<tsAcfLink>;
  readonly socialHeading: Maybe<Scalars['String']>;
  readonly socialMediaLists: Maybe<ReadonlyArray<Maybe<tsAcfOptionsFooterOptions_Footeroption_socialMediaLists>>>;
};

type tsAcfOptionsFooterOptions_FooteroptionFilterInput = {
  readonly connectWithUs: InputMaybe<tsAcfOptionsFooterOptions_Footeroption_ConnectWithUsFilterInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly explore: InputMaybe<tsAcfOptionsFooterOptions_Footeroption_ExploreFilterInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly getOurNewsletter: InputMaybe<tsAcfOptionsFooterOptions_Footeroption_GetOurNewsletterFilterInput>;
  readonly letSTalkCta: InputMaybe<tsAcfLinkFilterInput>;
  readonly socialHeading: InputMaybe<StringQueryOperatorInput>;
  readonly socialMediaLists: InputMaybe<tsAcfOptionsFooterOptions_Footeroption_socialMediaListsFilterListInput>;
};

/** Field Group */
type tsAcfOptionsFooterOptions_Footeroption_ConnectWithUs = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly email: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
};

type tsAcfOptionsFooterOptions_Footeroption_ConnectWithUsFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsAcfOptionsFooterOptions_Footeroption_Explore = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly pageLists: Maybe<ReadonlyArray<Maybe<tsPostObjectUnion>>>;
};

type tsAcfOptionsFooterOptions_Footeroption_ExploreFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsAcfOptionsFooterOptions_Footeroption_GetOurNewsletter = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly newsletterForm: Maybe<Scalars['String']>;
};

type tsAcfOptionsFooterOptions_Footeroption_GetOurNewsletterFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly newsletterForm: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsAcfOptionsFooterOptions_Footeroption_socialMediaLists = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly socialMediaLinks: Maybe<Scalars['String']>;
  readonly socialMediaName: Maybe<Scalars['String']>;
};

type tsAcfOptionsFooterOptions_Footeroption_socialMediaListsFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly socialMediaLinks: InputMaybe<StringQueryOperatorInput>;
  readonly socialMediaName: InputMaybe<StringQueryOperatorInput>;
};

type tsAcfOptionsFooterOptions_Footeroption_socialMediaListsFilterListInput = {
  readonly elemMatch: InputMaybe<tsAcfOptionsFooterOptions_Footeroption_socialMediaListsFilterInput>;
};

/** Header Options options. */
type tsAcfOptionsHeaderOptions = {
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Header Options&quot; was set to Show in GraphQL. */
  readonly headerOption: Maybe<tsAcfOptionsHeaderOptions_Headeroption>;
  readonly pageSlug: Maybe<Scalars['String']>;
  readonly pageTitle: Maybe<Scalars['String']>;
};

type tsAcfOptionsHeaderOptionsFilterInput = {
  readonly headerOption: InputMaybe<tsAcfOptionsHeaderOptions_HeaderoptionFilterInput>;
  readonly pageSlug: InputMaybe<StringQueryOperatorInput>;
  readonly pageTitle: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsAcfOptionsHeaderOptions_Headeroption = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly letSTalkCta: Maybe<tsAcfLink>;
  readonly logo: Maybe<tsMediaItem>;
};

type tsAcfOptionsHeaderOptions_HeaderoptionFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly letSTalkCta: InputMaybe<tsAcfLinkFilterInput>;
  readonly logo: InputMaybe<tsMediaItemFilterInput>;
};

/** A Gravity Forms address field. */
type tsAddressField = tsFormField & tsGfFieldWithAddress & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithConditionalLogic & tsGfFieldWithCopyValuesOption & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSubLabelPlacement & {
  /** Determines the type of address to be displayed. */
  readonly addressType: Maybe<tsAddressFieldTypeEnum>;
  /** Address field value. */
  readonly addressValues: Maybe<tsAddressFieldValue>;
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** The field id of the field being used as the copy source. */
  readonly copyValuesOptionFieldId: Maybe<Scalars['Int']>;
  /** The label that appears next to the copy values option when the form is displayed. The default value is \“Same as previous\”. */
  readonly copyValuesOptionLabel: Maybe<Scalars['String']>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the country that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;INTERATIONAL&quot;. */
  readonly defaultCountry: Maybe<tsAddressFieldCountryEnum>;
  /** Contains the province that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;CANADA&quot;. */
  readonly defaultProvince: Maybe<Scalars['String']>;
  /** Contains the state that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;US&quot;. */
  readonly defaultState: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the address field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsAddressInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Indicates whether the copy values option can be used. This option allows users to skip filling out the field and use the same values as another. For example, if the mailing and billing address are the same. */
  readonly shouldCopyValuesOption: Maybe<Scalars['Boolean']>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** Countries supported by Gravity Forms Address Field. */
type tsAddressFieldCountryEnum =
  | 'AD'
  | 'AE'
  | 'AF'
  | 'AG'
  | 'AI'
  | 'AL'
  | 'AM'
  | 'AO'
  | 'AQ'
  | 'AR'
  | 'AS'
  | 'AT'
  | 'AU'
  | 'AW'
  | 'AX'
  | 'AZ'
  | 'BA'
  | 'BB'
  | 'BD'
  | 'BE'
  | 'BF'
  | 'BG'
  | 'BH'
  | 'BI'
  | 'BJ'
  | 'BL'
  | 'BM'
  | 'BN'
  | 'BO'
  | 'BQ'
  | 'BR'
  | 'BS'
  | 'BT'
  | 'BV'
  | 'BW'
  | 'BY'
  | 'BZ'
  | 'CA'
  | 'CC'
  | 'CD'
  | 'CF'
  | 'CG'
  | 'CH'
  | 'CI'
  | 'CK'
  | 'CL'
  | 'CM'
  | 'CN'
  | 'CO'
  | 'CR'
  | 'CU'
  | 'CV'
  | 'CW'
  | 'CX'
  | 'CY'
  | 'CZ'
  | 'DE'
  | 'DJ'
  | 'DK'
  | 'DM'
  | 'DO'
  | 'DZ'
  | 'EC'
  | 'EE'
  | 'EG'
  | 'EH'
  | 'ER'
  | 'ES'
  | 'ET'
  | 'FI'
  | 'FJ'
  | 'FK'
  | 'FM'
  | 'FO'
  | 'FR'
  | 'GA'
  | 'GB'
  | 'GD'
  | 'GE'
  | 'GF'
  | 'GG'
  | 'GH'
  | 'GI'
  | 'GL'
  | 'GM'
  | 'GN'
  | 'GP'
  | 'GQ'
  | 'GR'
  | 'GS'
  | 'GT'
  | 'GU'
  | 'GW'
  | 'GY'
  | 'HK'
  | 'HM'
  | 'HN'
  | 'HR'
  | 'HT'
  | 'HU'
  | 'ID'
  | 'IE'
  | 'IL'
  | 'IM'
  | 'IN'
  | 'IO'
  | 'IQ'
  | 'IR'
  | 'IS'
  | 'IT'
  | 'JE'
  | 'JM'
  | 'JO'
  | 'JP'
  | 'KE'
  | 'KG'
  | 'KH'
  | 'KI'
  | 'KM'
  | 'KN'
  | 'KP'
  | 'KR'
  | 'KW'
  | 'KY'
  | 'KZ'
  | 'LA'
  | 'LB'
  | 'LC'
  | 'LI'
  | 'LK'
  | 'LR'
  | 'LS'
  | 'LT'
  | 'LU'
  | 'LV'
  | 'LY'
  | 'MA'
  | 'MC'
  | 'MD'
  | 'ME'
  | 'MF'
  | 'MG'
  | 'MH'
  | 'MK'
  | 'ML'
  | 'MM'
  | 'MN'
  | 'MO'
  | 'MP'
  | 'MQ'
  | 'MR'
  | 'MS'
  | 'MT'
  | 'MU'
  | 'MV'
  | 'MW'
  | 'MX'
  | 'MY'
  | 'MZ'
  | 'NA'
  | 'NC'
  | 'NE'
  | 'NF'
  | 'NG'
  | 'NI'
  | 'NL'
  | 'NO'
  | 'NP'
  | 'NR'
  | 'NU'
  | 'NZ'
  | 'OM'
  | 'PA'
  | 'PE'
  | 'PF'
  | 'PG'
  | 'PH'
  | 'PK'
  | 'PL'
  | 'PM'
  | 'PN'
  | 'PR'
  | 'PS'
  | 'PT'
  | 'PW'
  | 'PY'
  | 'QA'
  | 'RE'
  | 'RO'
  | 'RS'
  | 'RU'
  | 'RW'
  | 'SA'
  | 'SB'
  | 'SC'
  | 'SD'
  | 'SE'
  | 'SG'
  | 'SH'
  | 'SI'
  | 'SJ'
  | 'SK'
  | 'SL'
  | 'SM'
  | 'SN'
  | 'SO'
  | 'SR'
  | 'SS'
  | 'ST'
  | 'SV'
  | 'SX'
  | 'SY'
  | 'SZ'
  | 'TC'
  | 'TD'
  | 'TF'
  | 'TG'
  | 'TH'
  | 'TJ'
  | 'TK'
  | 'TL'
  | 'TM'
  | 'TN'
  | 'TO'
  | 'TR'
  | 'TT'
  | 'TV'
  | 'TW'
  | 'TZ'
  | 'UA'
  | 'UG'
  | 'UM'
  | 'US'
  | 'UY'
  | 'UZ'
  | 'VA'
  | 'VC'
  | 'VE'
  | 'VG'
  | 'VI'
  | 'VN'
  | 'VU'
  | 'WF'
  | 'WS'
  | 'YE'
  | 'YT'
  | 'ZA'
  | 'ZM'
  | 'ZW';

/** Determines the type of address to be displayed. */
type tsAddressFieldTypeEnum =
  | 'CANADA'
  | 'INTERNATIONAL'
  | 'US';

/** The individual properties for each element of the address value field. */
type tsAddressFieldValue = {
  /** Address city. */
  readonly city: Maybe<Scalars['String']>;
  /** Address country. */
  readonly country: Maybe<tsAddressFieldCountryEnum>;
  /** Address line two. */
  readonly lineTwo: Maybe<Scalars['String']>;
  /** Address state/region/province name. */
  readonly state: Maybe<Scalars['String']>;
  /** Street address. */
  readonly street: Maybe<Scalars['String']>;
  /** Address zip code. */
  readonly zip: Maybe<Scalars['String']>;
};

/** AddressInputProperty input values. */
type tsAddressInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithAddress & {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** Whether or not this field should be hidden. */
  readonly isHidden: Maybe<Scalars['Boolean']>;
  /** Key used to identify this input. */
  readonly key: Maybe<Scalars['String']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

/** The AM or PM cycle in a 12-hour clock. */
type tsAmPmEnum =
  | 'AM'
  | 'PM';

type tsAmPmEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsAmPmEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsAmPmEnum>>>;
  readonly ne: InputMaybe<tsAmPmEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsAmPmEnum>>>;
};

/** Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from. */
type tsAvatar = {
  /** URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo). */
  readonly default: Maybe<Scalars['String']>;
  /** HTML attributes to insert in the IMG element. Is not sanitized. */
  readonly extraAttr: Maybe<Scalars['String']>;
  /** Whether to always show the default image, never the Gravatar. */
  readonly forceDefault: Maybe<Scalars['Boolean']>;
  /** Whether the avatar was successfully found. */
  readonly foundAvatar: Maybe<Scalars['Boolean']>;
  /** Height of the avatar image. */
  readonly height: Maybe<Scalars['Int']>;
  /** What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order. */
  readonly rating: Maybe<Scalars['String']>;
  /** Type of url scheme to use. Typically HTTP vs. HTTPS. */
  readonly scheme: Maybe<Scalars['String']>;
  /** The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image. */
  readonly size: Maybe<Scalars['Int']>;
  /** URL for the gravatar image source. */
  readonly url: Maybe<Scalars['String']>;
  /** Width of the avatar image. */
  readonly width: Maybe<Scalars['Int']>;
};

type tsAvatarFilterInput = {
  readonly default: InputMaybe<StringQueryOperatorInput>;
  readonly extraAttr: InputMaybe<StringQueryOperatorInput>;
  readonly forceDefault: InputMaybe<BooleanQueryOperatorInput>;
  readonly foundAvatar: InputMaybe<BooleanQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly rating: InputMaybe<StringQueryOperatorInput>;
  readonly scheme: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

/** A Gravity Forms captcha field. */
type tsCaptchaField = tsFormField & tsGfFieldWithCaptchaBadge & tsGfFieldWithCaptchaBg & tsGfFieldWithCaptchaFg & tsGfFieldWithCaptchaLanguage & tsGfFieldWithCaptchaSize & tsGfFieldWithCaptchaTheme & tsGfFieldWithCaptchaType & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & {
  /** The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress. */
  readonly captchaBadgePosition: Maybe<tsCaptchaFieldBadgePositionEnum>;
  /** The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress. */
  readonly captchaLanguage: Maybe<Scalars['String']>;
  /** Determines the theme to be used for the reCAPTCHA field. Only applicable to the recaptcha captcha type. */
  readonly captchaTheme: Maybe<tsCaptchaFieldThemeEnum>;
  /** Determines the type of CAPTCHA field to be used. */
  readonly captchaType: Maybe<tsCaptchaFieldTypeEnum>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** Determines the image’s background color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types. */
  readonly simpleCaptchaBackgroundColor: Maybe<Scalars['String']>;
  /** Determines the image’s font color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types. */
  readonly simpleCaptchaFontColor: Maybe<Scalars['String']>;
  /** Determines the CAPTCHA image size. Only applicable to simple_captcha and math captcha types. */
  readonly simpleCaptchaSize: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** The position to place the (invisible) reCaptcha badge. */
type tsCaptchaFieldBadgePositionEnum =
  | 'BOTTOM_LEFT'
  | 'BOTTOM_RIGHT'
  | 'INLINE';

/** The theme to be used for the reCAPTCHA field. */
type tsCaptchaFieldThemeEnum =
  | 'DARK'
  | 'LIGHT';

/** Type of CAPTCHA field to be used. */
type tsCaptchaFieldTypeEnum =
  | 'MATH'
  | 'RECAPTCHA'
  | 'SIMPLE';

type tsCareers = Node & tsContentNode & tsDatabaseIdentifier & tsHierarchicalContentNode & tsMenuItemLinkable & tsNode & tsNodeWithContentEditor & tsNodeWithFeaturedImage & tsNodeWithPageAttributes & tsNodeWithTemplate & tsNodeWithTitle & tsUniformResourceIdentifiable & {
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Careers&quot; was set to Show in GraphQL. */
  readonly careers: Maybe<tsCareers_Careers>;
  /** Connection between the Careers type and the CareersCategory type */
  readonly careersCategory: Maybe<tsCareersToCareersCategoryConnection>;
  readonly children: ReadonlyArray<Node>;
  /** The content of the post. */
  readonly content: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  readonly contentType: Maybe<tsContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  readonly contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** Post publishing date. */
  readonly date: Maybe<Scalars['Date']>;
  /** The publishing date set in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** The desired slug of the post */
  readonly desiredSlug: Maybe<Scalars['String']>;
  /** The RSS enclosure for the object */
  readonly enclosure: Maybe<Scalars['String']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  readonly featuredImage: Maybe<tsNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  readonly featuredImageId: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  readonly guid: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  readonly lastEditedBy: Maybe<tsContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  readonly link: Maybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  readonly menuOrder: Maybe<Scalars['Int']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  readonly modified: Maybe<Scalars['Date']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  readonly modifiedGmt: Maybe<Scalars['Date']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  readonly slug: Maybe<Scalars['String']>;
  /** The current status of the object */
  readonly status: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  readonly template: Maybe<tsContentTemplate>;
  /** Connection between the Careers type and the TermNode type */
  readonly terms: Maybe<tsCareersToTermNodeConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  readonly title: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  readonly wpChildren: Maybe<tsHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The parent of the node. The parent object can be of various types */
  readonly wpParent: Maybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdge>;
};


type tsCareers_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsCareers_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsCareers_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsCareers_modifiedGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

/** The CareersCategory type */
type tsCareersCategory = Node & tsDatabaseIdentifier & tsHierarchicalTermNode & tsMenuItemLinkable & tsNode & tsTermNode & tsUniformResourceIdentifiable & {
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsCareersCategoryToAncestorsCareersCategoryConnection>;
  /** Connection between the CareersCategory type and the Careers type */
  readonly careers: Maybe<tsCareersCategoryToCareersConnection>;
  readonly children: ReadonlyArray<Node>;
  /** Connection between the CareersCategory type and the ContentNode type */
  readonly contentNodes: Maybe<tsCareersCategoryToContentNodeConnection>;
  /** The number of objects connected to the object */
  readonly count: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** The description of the object */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The link to the term */
  readonly link: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** The Yoast SEO data of the Careers Category taxonomy. */
  readonly seo: Maybe<tsTaxonomySEO>;
  /** An alphanumeric identifier for the object unique to its type. */
  readonly slug: Maybe<Scalars['String']>;
  /** Connection between the CareersCategory type and the Taxonomy type */
  readonly taxonomy: Maybe<tsCareersCategoryToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  readonly taxonomyName: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  readonly termGroupId: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  readonly termTaxonomyId: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** Connection between the CareersCategory type and the CareersCategory type */
  readonly wpChildren: Maybe<tsCareersCategoryToCareersCategoryConnection>;
  /** Connection between the CareersCategory type and the CareersCategory type */
  readonly wpParent: Maybe<tsCareersCategoryToParentCareersCategoryConnectionEdge>;
};

type tsCareersCategoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCareersCategoryEdge>;
  readonly group: ReadonlyArray<tsCareersCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCareersCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCareersCategoryConnection_distinctArgs = {
  field: tsCareersCategoryFieldsEnum;
};


type tsCareersCategoryConnection_groupArgs = {
  field: tsCareersCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCareersCategoryConnection_maxArgs = {
  field: tsCareersCategoryFieldsEnum;
};


type tsCareersCategoryConnection_minArgs = {
  field: tsCareersCategoryFieldsEnum;
};


type tsCareersCategoryConnection_sumArgs = {
  field: tsCareersCategoryFieldsEnum;
};

type tsCareersCategoryEdge = {
  readonly next: Maybe<tsCareersCategory>;
  readonly node: tsCareersCategory;
  readonly previous: Maybe<tsCareersCategory>;
};

type tsCareersCategoryFieldsEnum =
  | 'ancestors.nodes'
  | 'ancestors.nodes.ancestors.nodes'
  | 'ancestors.nodes.careers.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentNodes.nodes'
  | 'ancestors.nodes.count'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.description'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.name'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parentDatabaseId'
  | 'ancestors.nodes.parentId'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.taxonomyName'
  | 'ancestors.nodes.termGroupId'
  | 'ancestors.nodes.termTaxonomyId'
  | 'ancestors.nodes.uri'
  | 'ancestors.nodes.wpChildren.nodes'
  | 'careers.nodes'
  | 'careers.nodes.ancestors.nodes'
  | 'careers.nodes.careersCategory.nodes'
  | 'careers.nodes.careers.experience'
  | 'careers.nodes.careers.fieldGroupName'
  | 'careers.nodes.careers.jobLocation'
  | 'careers.nodes.children'
  | 'careers.nodes.children.children'
  | 'careers.nodes.children.id'
  | 'careers.nodes.content'
  | 'careers.nodes.contentTypeName'
  | 'careers.nodes.databaseId'
  | 'careers.nodes.date'
  | 'careers.nodes.dateGmt'
  | 'careers.nodes.desiredSlug'
  | 'careers.nodes.enclosure'
  | 'careers.nodes.featuredImageDatabaseId'
  | 'careers.nodes.featuredImageId'
  | 'careers.nodes.guid'
  | 'careers.nodes.id'
  | 'careers.nodes.internal.content'
  | 'careers.nodes.internal.contentDigest'
  | 'careers.nodes.internal.contentFilePath'
  | 'careers.nodes.internal.description'
  | 'careers.nodes.internal.fieldOwners'
  | 'careers.nodes.internal.ignoreType'
  | 'careers.nodes.internal.mediaType'
  | 'careers.nodes.internal.owner'
  | 'careers.nodes.internal.type'
  | 'careers.nodes.isContentNode'
  | 'careers.nodes.isTermNode'
  | 'careers.nodes.link'
  | 'careers.nodes.menuOrder'
  | 'careers.nodes.modified'
  | 'careers.nodes.modifiedGmt'
  | 'careers.nodes.nodeType'
  | 'careers.nodes.parentDatabaseId'
  | 'careers.nodes.parentId'
  | 'careers.nodes.parent.children'
  | 'careers.nodes.parent.id'
  | 'careers.nodes.seo.breadcrumbs'
  | 'careers.nodes.seo.canonical'
  | 'careers.nodes.seo.cornerstone'
  | 'careers.nodes.seo.focuskw'
  | 'careers.nodes.seo.fullHead'
  | 'careers.nodes.seo.metaDesc'
  | 'careers.nodes.seo.metaKeywords'
  | 'careers.nodes.seo.metaRobotsNofollow'
  | 'careers.nodes.seo.metaRobotsNoindex'
  | 'careers.nodes.seo.opengraphAuthor'
  | 'careers.nodes.seo.opengraphDescription'
  | 'careers.nodes.seo.opengraphModifiedTime'
  | 'careers.nodes.seo.opengraphPublishedTime'
  | 'careers.nodes.seo.opengraphPublisher'
  | 'careers.nodes.seo.opengraphSiteName'
  | 'careers.nodes.seo.opengraphTitle'
  | 'careers.nodes.seo.opengraphType'
  | 'careers.nodes.seo.opengraphUrl'
  | 'careers.nodes.seo.readingTime'
  | 'careers.nodes.seo.title'
  | 'careers.nodes.seo.twitterDescription'
  | 'careers.nodes.seo.twitterTitle'
  | 'careers.nodes.slug'
  | 'careers.nodes.status'
  | 'careers.nodes.template.templateName'
  | 'careers.nodes.terms.nodes'
  | 'careers.nodes.title'
  | 'careers.nodes.uri'
  | 'careers.nodes.wpChildren.nodes'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentNodes.nodes'
  | 'contentNodes.nodes.children'
  | 'contentNodes.nodes.children.children'
  | 'contentNodes.nodes.children.id'
  | 'contentNodes.nodes.contentTypeName'
  | 'contentNodes.nodes.databaseId'
  | 'contentNodes.nodes.date'
  | 'contentNodes.nodes.dateGmt'
  | 'contentNodes.nodes.desiredSlug'
  | 'contentNodes.nodes.enclosure'
  | 'contentNodes.nodes.guid'
  | 'contentNodes.nodes.id'
  | 'contentNodes.nodes.internal.content'
  | 'contentNodes.nodes.internal.contentDigest'
  | 'contentNodes.nodes.internal.contentFilePath'
  | 'contentNodes.nodes.internal.description'
  | 'contentNodes.nodes.internal.fieldOwners'
  | 'contentNodes.nodes.internal.ignoreType'
  | 'contentNodes.nodes.internal.mediaType'
  | 'contentNodes.nodes.internal.owner'
  | 'contentNodes.nodes.internal.type'
  | 'contentNodes.nodes.isContentNode'
  | 'contentNodes.nodes.isTermNode'
  | 'contentNodes.nodes.link'
  | 'contentNodes.nodes.modified'
  | 'contentNodes.nodes.modifiedGmt'
  | 'contentNodes.nodes.nodeType'
  | 'contentNodes.nodes.parent.children'
  | 'contentNodes.nodes.parent.id'
  | 'contentNodes.nodes.seo.breadcrumbs'
  | 'contentNodes.nodes.seo.canonical'
  | 'contentNodes.nodes.seo.cornerstone'
  | 'contentNodes.nodes.seo.focuskw'
  | 'contentNodes.nodes.seo.fullHead'
  | 'contentNodes.nodes.seo.metaDesc'
  | 'contentNodes.nodes.seo.metaKeywords'
  | 'contentNodes.nodes.seo.metaRobotsNofollow'
  | 'contentNodes.nodes.seo.metaRobotsNoindex'
  | 'contentNodes.nodes.seo.opengraphAuthor'
  | 'contentNodes.nodes.seo.opengraphDescription'
  | 'contentNodes.nodes.seo.opengraphModifiedTime'
  | 'contentNodes.nodes.seo.opengraphPublishedTime'
  | 'contentNodes.nodes.seo.opengraphPublisher'
  | 'contentNodes.nodes.seo.opengraphSiteName'
  | 'contentNodes.nodes.seo.opengraphTitle'
  | 'contentNodes.nodes.seo.opengraphType'
  | 'contentNodes.nodes.seo.opengraphUrl'
  | 'contentNodes.nodes.seo.readingTime'
  | 'contentNodes.nodes.seo.title'
  | 'contentNodes.nodes.seo.twitterDescription'
  | 'contentNodes.nodes.seo.twitterTitle'
  | 'contentNodes.nodes.slug'
  | 'contentNodes.nodes.status'
  | 'contentNodes.nodes.template.templateName'
  | 'contentNodes.nodes.uri'
  | 'count'
  | 'databaseId'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'link'
  | 'name'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'taxonomyName'
  | 'taxonomy.node.archivePath'
  | 'taxonomy.node.children'
  | 'taxonomy.node.children.children'
  | 'taxonomy.node.children.id'
  | 'taxonomy.node.connectedContentTypes.nodes'
  | 'taxonomy.node.description'
  | 'taxonomy.node.graphqlPluralName'
  | 'taxonomy.node.graphqlSingleName'
  | 'taxonomy.node.hierarchical'
  | 'taxonomy.node.id'
  | 'taxonomy.node.internal.content'
  | 'taxonomy.node.internal.contentDigest'
  | 'taxonomy.node.internal.contentFilePath'
  | 'taxonomy.node.internal.description'
  | 'taxonomy.node.internal.fieldOwners'
  | 'taxonomy.node.internal.ignoreType'
  | 'taxonomy.node.internal.mediaType'
  | 'taxonomy.node.internal.owner'
  | 'taxonomy.node.internal.type'
  | 'taxonomy.node.label'
  | 'taxonomy.node.name'
  | 'taxonomy.node.nodeType'
  | 'taxonomy.node.parent.children'
  | 'taxonomy.node.parent.id'
  | 'taxonomy.node.public'
  | 'taxonomy.node.restBase'
  | 'taxonomy.node.restControllerClass'
  | 'taxonomy.node.showCloud'
  | 'taxonomy.node.showInAdminColumn'
  | 'taxonomy.node.showInGraphql'
  | 'taxonomy.node.showInMenu'
  | 'taxonomy.node.showInNavMenus'
  | 'taxonomy.node.showInQuickEdit'
  | 'taxonomy.node.showInRest'
  | 'taxonomy.node.showUi'
  | 'termGroupId'
  | 'termTaxonomyId'
  | 'uri'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.ancestors.nodes'
  | 'wpChildren.nodes.careers.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentNodes.nodes'
  | 'wpChildren.nodes.count'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.description'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.name'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parentDatabaseId'
  | 'wpChildren.nodes.parentId'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.taxonomyName'
  | 'wpChildren.nodes.termGroupId'
  | 'wpChildren.nodes.termTaxonomyId'
  | 'wpChildren.nodes.uri'
  | 'wpChildren.nodes.wpChildren.nodes'
  | 'wpParent.node.ancestors.nodes'
  | 'wpParent.node.careers.nodes'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentNodes.nodes'
  | 'wpParent.node.count'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.description'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.name'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parentDatabaseId'
  | 'wpParent.node.parentId'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.taxonomyName'
  | 'wpParent.node.termGroupId'
  | 'wpParent.node.termTaxonomyId'
  | 'wpParent.node.uri'
  | 'wpParent.node.wpChildren.nodes';

type tsCareersCategoryFilterInput = {
  readonly ancestors: InputMaybe<tsCareersCategoryToAncestorsCareersCategoryConnectionFilterInput>;
  readonly careers: InputMaybe<tsCareersCategoryToCareersConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentNodes: InputMaybe<tsCareersCategoryToContentNodeConnectionFilterInput>;
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly seo: InputMaybe<tsTaxonomySEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly taxonomy: InputMaybe<tsCareersCategoryToTaxonomyConnectionEdgeFilterInput>;
  readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
  readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
  readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsCareersCategoryToCareersCategoryConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsCareersCategoryToParentCareersCategoryConnectionEdgeFilterInput>;
};

type tsCareersCategoryFilterListInput = {
  readonly elemMatch: InputMaybe<tsCareersCategoryFilterInput>;
};

type tsCareersCategoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCareersCategoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsCareersCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCareersCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCareersCategoryGroupConnection_distinctArgs = {
  field: tsCareersCategoryFieldsEnum;
};


type tsCareersCategoryGroupConnection_groupArgs = {
  field: tsCareersCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCareersCategoryGroupConnection_maxArgs = {
  field: tsCareersCategoryFieldsEnum;
};


type tsCareersCategoryGroupConnection_minArgs = {
  field: tsCareersCategoryFieldsEnum;
};


type tsCareersCategoryGroupConnection_sumArgs = {
  field: tsCareersCategoryFieldsEnum;
};

type tsCareersCategorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsCareersCategoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the CareersCategory type and the CareersCategory type */
type tsCareersCategoryToAncestorsCareersCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCareersCategory>>>;
};

type tsCareersCategoryToAncestorsCareersCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCareersCategoryFilterListInput>;
};

/** Connection between the CareersCategory type and the CareersCategory type */
type tsCareersCategoryToCareersCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCareersCategory>>>;
};

type tsCareersCategoryToCareersCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCareersCategoryFilterListInput>;
};

/** Connection between the CareersCategory type and the Careers type */
type tsCareersCategoryToCareersConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCareers>>>;
};

type tsCareersCategoryToCareersConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCareersFilterListInput>;
};

/** Connection between the CareersCategory type and the ContentNode type */
type tsCareersCategoryToContentNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsCareersCategoryToContentNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the CareersCategory type and the CareersCategory type */
type tsCareersCategoryToParentCareersCategoryConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsCareersCategory>;
};

type tsCareersCategoryToParentCareersCategoryConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsCareersCategoryFilterInput>;
};

/** Connection between the CareersCategory type and the Taxonomy type */
type tsCareersCategoryToTaxonomyConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsTaxonomy>;
};

type tsCareersCategoryToTaxonomyConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsTaxonomyFilterInput>;
};

type tsCareersConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCareersEdge>;
  readonly group: ReadonlyArray<tsCareersGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCareers>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCareersConnection_distinctArgs = {
  field: tsCareersFieldsEnum;
};


type tsCareersConnection_groupArgs = {
  field: tsCareersFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCareersConnection_maxArgs = {
  field: tsCareersFieldsEnum;
};


type tsCareersConnection_minArgs = {
  field: tsCareersFieldsEnum;
};


type tsCareersConnection_sumArgs = {
  field: tsCareersFieldsEnum;
};

type tsCareersEdge = {
  readonly next: Maybe<tsCareers>;
  readonly node: tsCareers;
  readonly previous: Maybe<tsCareers>;
};

type tsCareersFieldsEnum =
  | 'ancestors.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentTypeName'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.date'
  | 'ancestors.nodes.dateGmt'
  | 'ancestors.nodes.desiredSlug'
  | 'ancestors.nodes.enclosure'
  | 'ancestors.nodes.guid'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.modified'
  | 'ancestors.nodes.modifiedGmt'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.readingTime'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.status'
  | 'ancestors.nodes.template.templateName'
  | 'ancestors.nodes.uri'
  | 'careersCategory.nodes'
  | 'careersCategory.nodes.ancestors.nodes'
  | 'careersCategory.nodes.careers.nodes'
  | 'careersCategory.nodes.children'
  | 'careersCategory.nodes.children.children'
  | 'careersCategory.nodes.children.id'
  | 'careersCategory.nodes.contentNodes.nodes'
  | 'careersCategory.nodes.count'
  | 'careersCategory.nodes.databaseId'
  | 'careersCategory.nodes.description'
  | 'careersCategory.nodes.id'
  | 'careersCategory.nodes.internal.content'
  | 'careersCategory.nodes.internal.contentDigest'
  | 'careersCategory.nodes.internal.contentFilePath'
  | 'careersCategory.nodes.internal.description'
  | 'careersCategory.nodes.internal.fieldOwners'
  | 'careersCategory.nodes.internal.ignoreType'
  | 'careersCategory.nodes.internal.mediaType'
  | 'careersCategory.nodes.internal.owner'
  | 'careersCategory.nodes.internal.type'
  | 'careersCategory.nodes.isContentNode'
  | 'careersCategory.nodes.isTermNode'
  | 'careersCategory.nodes.link'
  | 'careersCategory.nodes.name'
  | 'careersCategory.nodes.nodeType'
  | 'careersCategory.nodes.parentDatabaseId'
  | 'careersCategory.nodes.parentId'
  | 'careersCategory.nodes.parent.children'
  | 'careersCategory.nodes.parent.id'
  | 'careersCategory.nodes.seo.breadcrumbs'
  | 'careersCategory.nodes.seo.canonical'
  | 'careersCategory.nodes.seo.cornerstone'
  | 'careersCategory.nodes.seo.focuskw'
  | 'careersCategory.nodes.seo.fullHead'
  | 'careersCategory.nodes.seo.metaDesc'
  | 'careersCategory.nodes.seo.metaKeywords'
  | 'careersCategory.nodes.seo.metaRobotsNofollow'
  | 'careersCategory.nodes.seo.metaRobotsNoindex'
  | 'careersCategory.nodes.seo.opengraphAuthor'
  | 'careersCategory.nodes.seo.opengraphDescription'
  | 'careersCategory.nodes.seo.opengraphModifiedTime'
  | 'careersCategory.nodes.seo.opengraphPublishedTime'
  | 'careersCategory.nodes.seo.opengraphPublisher'
  | 'careersCategory.nodes.seo.opengraphSiteName'
  | 'careersCategory.nodes.seo.opengraphTitle'
  | 'careersCategory.nodes.seo.opengraphType'
  | 'careersCategory.nodes.seo.opengraphUrl'
  | 'careersCategory.nodes.seo.title'
  | 'careersCategory.nodes.seo.twitterDescription'
  | 'careersCategory.nodes.seo.twitterTitle'
  | 'careersCategory.nodes.slug'
  | 'careersCategory.nodes.taxonomyName'
  | 'careersCategory.nodes.termGroupId'
  | 'careersCategory.nodes.termTaxonomyId'
  | 'careersCategory.nodes.uri'
  | 'careersCategory.nodes.wpChildren.nodes'
  | 'careers.applyNowForThisPosition.target'
  | 'careers.applyNowForThisPosition.title'
  | 'careers.applyNowForThisPosition.url'
  | 'careers.experience'
  | 'careers.fieldGroupName'
  | 'careers.jobLocation'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'content'
  | 'contentTypeName'
  | 'contentType.node.archivePath'
  | 'contentType.node.canExport'
  | 'contentType.node.children'
  | 'contentType.node.children.children'
  | 'contentType.node.children.id'
  | 'contentType.node.connectedTaxonomies.nodes'
  | 'contentType.node.contentNodes.nodes'
  | 'contentType.node.deleteWithUser'
  | 'contentType.node.description'
  | 'contentType.node.excludeFromSearch'
  | 'contentType.node.graphqlPluralName'
  | 'contentType.node.graphqlSingleName'
  | 'contentType.node.hasArchive'
  | 'contentType.node.hierarchical'
  | 'contentType.node.id'
  | 'contentType.node.internal.content'
  | 'contentType.node.internal.contentDigest'
  | 'contentType.node.internal.contentFilePath'
  | 'contentType.node.internal.description'
  | 'contentType.node.internal.fieldOwners'
  | 'contentType.node.internal.ignoreType'
  | 'contentType.node.internal.mediaType'
  | 'contentType.node.internal.owner'
  | 'contentType.node.internal.type'
  | 'contentType.node.isContentNode'
  | 'contentType.node.isFrontPage'
  | 'contentType.node.isPostsPage'
  | 'contentType.node.isTermNode'
  | 'contentType.node.label'
  | 'contentType.node.labels.addNew'
  | 'contentType.node.labels.addNewItem'
  | 'contentType.node.labels.allItems'
  | 'contentType.node.labels.archives'
  | 'contentType.node.labels.attributes'
  | 'contentType.node.labels.editItem'
  | 'contentType.node.labels.featuredImage'
  | 'contentType.node.labels.filterItemsList'
  | 'contentType.node.labels.insertIntoItem'
  | 'contentType.node.labels.itemsList'
  | 'contentType.node.labels.itemsListNavigation'
  | 'contentType.node.labels.menuName'
  | 'contentType.node.labels.name'
  | 'contentType.node.labels.newItem'
  | 'contentType.node.labels.notFound'
  | 'contentType.node.labels.notFoundInTrash'
  | 'contentType.node.labels.parentItemColon'
  | 'contentType.node.labels.removeFeaturedImage'
  | 'contentType.node.labels.searchItems'
  | 'contentType.node.labels.setFeaturedImage'
  | 'contentType.node.labels.singularName'
  | 'contentType.node.labels.uploadedToThisItem'
  | 'contentType.node.labels.useFeaturedImage'
  | 'contentType.node.labels.viewItem'
  | 'contentType.node.labels.viewItems'
  | 'contentType.node.menuIcon'
  | 'contentType.node.menuPosition'
  | 'contentType.node.name'
  | 'contentType.node.nodeType'
  | 'contentType.node.parent.children'
  | 'contentType.node.parent.id'
  | 'contentType.node.public'
  | 'contentType.node.publiclyQueryable'
  | 'contentType.node.restBase'
  | 'contentType.node.restControllerClass'
  | 'contentType.node.showInAdminBar'
  | 'contentType.node.showInGraphql'
  | 'contentType.node.showInMenu'
  | 'contentType.node.showInNavMenus'
  | 'contentType.node.showInRest'
  | 'contentType.node.showUi'
  | 'contentType.node.uri'
  | 'databaseId'
  | 'date'
  | 'dateGmt'
  | 'desiredSlug'
  | 'enclosure'
  | 'featuredImageDatabaseId'
  | 'featuredImageId'
  | 'featuredImage.node.altText'
  | 'featuredImage.node.ancestors.nodes'
  | 'featuredImage.node.authorDatabaseId'
  | 'featuredImage.node.authorId'
  | 'featuredImage.node.caption'
  | 'featuredImage.node.children'
  | 'featuredImage.node.children.children'
  | 'featuredImage.node.children.id'
  | 'featuredImage.node.commentCount'
  | 'featuredImage.node.commentStatus'
  | 'featuredImage.node.comments.nodes'
  | 'featuredImage.node.contentTypeName'
  | 'featuredImage.node.databaseId'
  | 'featuredImage.node.date'
  | 'featuredImage.node.dateGmt'
  | 'featuredImage.node.description'
  | 'featuredImage.node.desiredSlug'
  | 'featuredImage.node.enclosure'
  | 'featuredImage.node.fileSize'
  | 'featuredImage.node.filename'
  | 'featuredImage.node.filesize'
  | 'featuredImage.node.gatsbyImage'
  | 'featuredImage.node.guid'
  | 'featuredImage.node.height'
  | 'featuredImage.node.id'
  | 'featuredImage.node.internal.content'
  | 'featuredImage.node.internal.contentDigest'
  | 'featuredImage.node.internal.contentFilePath'
  | 'featuredImage.node.internal.description'
  | 'featuredImage.node.internal.fieldOwners'
  | 'featuredImage.node.internal.ignoreType'
  | 'featuredImage.node.internal.mediaType'
  | 'featuredImage.node.internal.owner'
  | 'featuredImage.node.internal.type'
  | 'featuredImage.node.isContentNode'
  | 'featuredImage.node.isTermNode'
  | 'featuredImage.node.link'
  | 'featuredImage.node.localFile.absolutePath'
  | 'featuredImage.node.localFile.accessTime'
  | 'featuredImage.node.localFile.atime'
  | 'featuredImage.node.localFile.atimeMs'
  | 'featuredImage.node.localFile.base'
  | 'featuredImage.node.localFile.birthTime'
  | 'featuredImage.node.localFile.birthtime'
  | 'featuredImage.node.localFile.birthtimeMs'
  | 'featuredImage.node.localFile.blksize'
  | 'featuredImage.node.localFile.blocks'
  | 'featuredImage.node.localFile.changeTime'
  | 'featuredImage.node.localFile.children'
  | 'featuredImage.node.localFile.childrenImageSharp'
  | 'featuredImage.node.localFile.ctime'
  | 'featuredImage.node.localFile.ctimeMs'
  | 'featuredImage.node.localFile.dev'
  | 'featuredImage.node.localFile.dir'
  | 'featuredImage.node.localFile.ext'
  | 'featuredImage.node.localFile.extension'
  | 'featuredImage.node.localFile.gid'
  | 'featuredImage.node.localFile.hash'
  | 'featuredImage.node.localFile.id'
  | 'featuredImage.node.localFile.ino'
  | 'featuredImage.node.localFile.mode'
  | 'featuredImage.node.localFile.modifiedTime'
  | 'featuredImage.node.localFile.mtime'
  | 'featuredImage.node.localFile.mtimeMs'
  | 'featuredImage.node.localFile.name'
  | 'featuredImage.node.localFile.nlink'
  | 'featuredImage.node.localFile.prettySize'
  | 'featuredImage.node.localFile.publicURL'
  | 'featuredImage.node.localFile.rdev'
  | 'featuredImage.node.localFile.relativeDirectory'
  | 'featuredImage.node.localFile.relativePath'
  | 'featuredImage.node.localFile.root'
  | 'featuredImage.node.localFile.size'
  | 'featuredImage.node.localFile.sourceInstanceName'
  | 'featuredImage.node.localFile.uid'
  | 'featuredImage.node.mediaDetails.file'
  | 'featuredImage.node.mediaDetails.height'
  | 'featuredImage.node.mediaDetails.sizes'
  | 'featuredImage.node.mediaDetails.width'
  | 'featuredImage.node.mediaItemUrl'
  | 'featuredImage.node.mediaType'
  | 'featuredImage.node.mimeType'
  | 'featuredImage.node.modified'
  | 'featuredImage.node.modifiedGmt'
  | 'featuredImage.node.nodeType'
  | 'featuredImage.node.parentDatabaseId'
  | 'featuredImage.node.parentId'
  | 'featuredImage.node.parent.children'
  | 'featuredImage.node.parent.id'
  | 'featuredImage.node.publicUrl'
  | 'featuredImage.node.remoteFile.absolutePath'
  | 'featuredImage.node.remoteFile.accessTime'
  | 'featuredImage.node.remoteFile.atime'
  | 'featuredImage.node.remoteFile.atimeMs'
  | 'featuredImage.node.remoteFile.base'
  | 'featuredImage.node.remoteFile.birthTime'
  | 'featuredImage.node.remoteFile.birthtime'
  | 'featuredImage.node.remoteFile.birthtimeMs'
  | 'featuredImage.node.remoteFile.blksize'
  | 'featuredImage.node.remoteFile.blocks'
  | 'featuredImage.node.remoteFile.changeTime'
  | 'featuredImage.node.remoteFile.children'
  | 'featuredImage.node.remoteFile.childrenImageSharp'
  | 'featuredImage.node.remoteFile.ctime'
  | 'featuredImage.node.remoteFile.ctimeMs'
  | 'featuredImage.node.remoteFile.dev'
  | 'featuredImage.node.remoteFile.dir'
  | 'featuredImage.node.remoteFile.ext'
  | 'featuredImage.node.remoteFile.extension'
  | 'featuredImage.node.remoteFile.gid'
  | 'featuredImage.node.remoteFile.hash'
  | 'featuredImage.node.remoteFile.id'
  | 'featuredImage.node.remoteFile.ino'
  | 'featuredImage.node.remoteFile.mode'
  | 'featuredImage.node.remoteFile.modifiedTime'
  | 'featuredImage.node.remoteFile.mtime'
  | 'featuredImage.node.remoteFile.mtimeMs'
  | 'featuredImage.node.remoteFile.name'
  | 'featuredImage.node.remoteFile.nlink'
  | 'featuredImage.node.remoteFile.prettySize'
  | 'featuredImage.node.remoteFile.publicURL'
  | 'featuredImage.node.remoteFile.rdev'
  | 'featuredImage.node.remoteFile.relativeDirectory'
  | 'featuredImage.node.remoteFile.relativePath'
  | 'featuredImage.node.remoteFile.root'
  | 'featuredImage.node.remoteFile.size'
  | 'featuredImage.node.remoteFile.sourceInstanceName'
  | 'featuredImage.node.remoteFile.uid'
  | 'featuredImage.node.resize.height'
  | 'featuredImage.node.resize.src'
  | 'featuredImage.node.resize.width'
  | 'featuredImage.node.seo.breadcrumbs'
  | 'featuredImage.node.seo.canonical'
  | 'featuredImage.node.seo.cornerstone'
  | 'featuredImage.node.seo.focuskw'
  | 'featuredImage.node.seo.fullHead'
  | 'featuredImage.node.seo.metaDesc'
  | 'featuredImage.node.seo.metaKeywords'
  | 'featuredImage.node.seo.metaRobotsNofollow'
  | 'featuredImage.node.seo.metaRobotsNoindex'
  | 'featuredImage.node.seo.opengraphAuthor'
  | 'featuredImage.node.seo.opengraphDescription'
  | 'featuredImage.node.seo.opengraphModifiedTime'
  | 'featuredImage.node.seo.opengraphPublishedTime'
  | 'featuredImage.node.seo.opengraphPublisher'
  | 'featuredImage.node.seo.opengraphSiteName'
  | 'featuredImage.node.seo.opengraphTitle'
  | 'featuredImage.node.seo.opengraphType'
  | 'featuredImage.node.seo.opengraphUrl'
  | 'featuredImage.node.seo.readingTime'
  | 'featuredImage.node.seo.title'
  | 'featuredImage.node.seo.twitterDescription'
  | 'featuredImage.node.seo.twitterTitle'
  | 'featuredImage.node.sizes'
  | 'featuredImage.node.slug'
  | 'featuredImage.node.sourceUrl'
  | 'featuredImage.node.srcSet'
  | 'featuredImage.node.status'
  | 'featuredImage.node.template.templateName'
  | 'featuredImage.node.title'
  | 'featuredImage.node.uri'
  | 'featuredImage.node.width'
  | 'featuredImage.node.wpChildren.nodes'
  | 'guid'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'lastEditedBy.node.authorProfile.fieldGroupName'
  | 'lastEditedBy.node.avatar.default'
  | 'lastEditedBy.node.avatar.extraAttr'
  | 'lastEditedBy.node.avatar.forceDefault'
  | 'lastEditedBy.node.avatar.foundAvatar'
  | 'lastEditedBy.node.avatar.height'
  | 'lastEditedBy.node.avatar.rating'
  | 'lastEditedBy.node.avatar.scheme'
  | 'lastEditedBy.node.avatar.size'
  | 'lastEditedBy.node.avatar.url'
  | 'lastEditedBy.node.avatar.width'
  | 'lastEditedBy.node.capKey'
  | 'lastEditedBy.node.capabilities'
  | 'lastEditedBy.node.children'
  | 'lastEditedBy.node.children.children'
  | 'lastEditedBy.node.children.id'
  | 'lastEditedBy.node.comments.nodes'
  | 'lastEditedBy.node.databaseId'
  | 'lastEditedBy.node.description'
  | 'lastEditedBy.node.email'
  | 'lastEditedBy.node.extraCapabilities'
  | 'lastEditedBy.node.firstName'
  | 'lastEditedBy.node.id'
  | 'lastEditedBy.node.internal.content'
  | 'lastEditedBy.node.internal.contentDigest'
  | 'lastEditedBy.node.internal.contentFilePath'
  | 'lastEditedBy.node.internal.description'
  | 'lastEditedBy.node.internal.fieldOwners'
  | 'lastEditedBy.node.internal.ignoreType'
  | 'lastEditedBy.node.internal.mediaType'
  | 'lastEditedBy.node.internal.owner'
  | 'lastEditedBy.node.internal.type'
  | 'lastEditedBy.node.isContentNode'
  | 'lastEditedBy.node.isTermNode'
  | 'lastEditedBy.node.lastName'
  | 'lastEditedBy.node.locale'
  | 'lastEditedBy.node.name'
  | 'lastEditedBy.node.nicename'
  | 'lastEditedBy.node.nickname'
  | 'lastEditedBy.node.nodeType'
  | 'lastEditedBy.node.pages.nodes'
  | 'lastEditedBy.node.parent.children'
  | 'lastEditedBy.node.parent.id'
  | 'lastEditedBy.node.posts.nodes'
  | 'lastEditedBy.node.registeredDate'
  | 'lastEditedBy.node.roles.nodes'
  | 'lastEditedBy.node.seo.breadcrumbTitle'
  | 'lastEditedBy.node.seo.canonical'
  | 'lastEditedBy.node.seo.fullHead'
  | 'lastEditedBy.node.seo.language'
  | 'lastEditedBy.node.seo.metaDesc'
  | 'lastEditedBy.node.seo.metaRobotsNofollow'
  | 'lastEditedBy.node.seo.metaRobotsNoindex'
  | 'lastEditedBy.node.seo.opengraphDescription'
  | 'lastEditedBy.node.seo.opengraphTitle'
  | 'lastEditedBy.node.seo.region'
  | 'lastEditedBy.node.seo.title'
  | 'lastEditedBy.node.seo.twitterDescription'
  | 'lastEditedBy.node.seo.twitterTitle'
  | 'lastEditedBy.node.slug'
  | 'lastEditedBy.node.uri'
  | 'lastEditedBy.node.url'
  | 'lastEditedBy.node.username'
  | 'link'
  | 'menuOrder'
  | 'modified'
  | 'modifiedGmt'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.readingTime'
  | 'seo.schema.articleType'
  | 'seo.schema.pageType'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'status'
  | 'template.templateName'
  | 'terms.nodes'
  | 'terms.nodes.children'
  | 'terms.nodes.children.children'
  | 'terms.nodes.children.id'
  | 'terms.nodes.count'
  | 'terms.nodes.databaseId'
  | 'terms.nodes.description'
  | 'terms.nodes.id'
  | 'terms.nodes.internal.content'
  | 'terms.nodes.internal.contentDigest'
  | 'terms.nodes.internal.contentFilePath'
  | 'terms.nodes.internal.description'
  | 'terms.nodes.internal.fieldOwners'
  | 'terms.nodes.internal.ignoreType'
  | 'terms.nodes.internal.mediaType'
  | 'terms.nodes.internal.owner'
  | 'terms.nodes.internal.type'
  | 'terms.nodes.isContentNode'
  | 'terms.nodes.isTermNode'
  | 'terms.nodes.link'
  | 'terms.nodes.name'
  | 'terms.nodes.nodeType'
  | 'terms.nodes.parent.children'
  | 'terms.nodes.parent.id'
  | 'terms.nodes.slug'
  | 'terms.nodes.taxonomyName'
  | 'terms.nodes.termGroupId'
  | 'terms.nodes.termTaxonomyId'
  | 'terms.nodes.uri'
  | 'title'
  | 'uri'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentTypeName'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.date'
  | 'wpChildren.nodes.dateGmt'
  | 'wpChildren.nodes.desiredSlug'
  | 'wpChildren.nodes.enclosure'
  | 'wpChildren.nodes.guid'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.modified'
  | 'wpChildren.nodes.modifiedGmt'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.readingTime'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.status'
  | 'wpChildren.nodes.template.templateName'
  | 'wpChildren.nodes.uri'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentTypeName'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.date'
  | 'wpParent.node.dateGmt'
  | 'wpParent.node.desiredSlug'
  | 'wpParent.node.enclosure'
  | 'wpParent.node.guid'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.modified'
  | 'wpParent.node.modifiedGmt'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.readingTime'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.status'
  | 'wpParent.node.template.templateName'
  | 'wpParent.node.uri';

type tsCareersFilterInput = {
  readonly ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  readonly careers: InputMaybe<tsCareers_CareersFilterInput>;
  readonly careersCategory: InputMaybe<tsCareersToCareersCategoryConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
  readonly enclosure: InputMaybe<StringQueryOperatorInput>;
  readonly featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  readonly featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly featuredImageId: InputMaybe<IDQueryOperatorInput>;
  readonly guid: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly menuOrder: InputMaybe<IntQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly seo: InputMaybe<tsPostTypeSEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly template: InputMaybe<tsContentTemplateFilterInput>;
  readonly terms: InputMaybe<tsCareersToTermNodeConnectionFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};

type tsCareersFilterListInput = {
  readonly elemMatch: InputMaybe<tsCareersFilterInput>;
};

type tsCareersGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCareersEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsCareersGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCareers>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCareersGroupConnection_distinctArgs = {
  field: tsCareersFieldsEnum;
};


type tsCareersGroupConnection_groupArgs = {
  field: tsCareersFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCareersGroupConnection_maxArgs = {
  field: tsCareersFieldsEnum;
};


type tsCareersGroupConnection_minArgs = {
  field: tsCareersFieldsEnum;
};


type tsCareersGroupConnection_sumArgs = {
  field: tsCareersFieldsEnum;
};

type tsCareersSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsCareersFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the Careers type and the CareersCategory type */
type tsCareersToCareersCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCareersCategory>>>;
};

type tsCareersToCareersCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCareersCategoryFilterListInput>;
};

/** Connection between the Careers type and the TermNode type */
type tsCareersToTermNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsTermNode>>>;
};

type tsCareersToTermNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsTermNodeFilterListInput>;
};

/** Field Group */
type tsCareers_Careers = tsAcfFieldGroup & {
  readonly applyNowForThisPosition: Maybe<tsAcfLink>;
  readonly experience: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly jobLocation: Maybe<Scalars['String']>;
};

type tsCareers_CareersFilterInput = {
  readonly applyNowForThisPosition: InputMaybe<tsAcfLinkFilterInput>;
  readonly experience: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly jobLocation: InputMaybe<StringQueryOperatorInput>;
};

type tsCaseStudy = Node & tsContentNode & tsDatabaseIdentifier & tsMenuItemLinkable & tsNode & tsNodeWithContentEditor & tsNodeWithFeaturedImage & tsNodeWithTemplate & tsNodeWithTitle & tsUniformResourceIdentifiable & {
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Camber Roadmap: Case Study&quot; was set to Show in GraphQL. */
  readonly camberRoadmapCaseStudy: Maybe<tsCaseStudy_Camberroadmapcasestudy>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Case Study&quot; was set to Show in GraphQL. */
  readonly caseStudy: Maybe<tsCaseStudy_Casestudy>;
  /** Connection between the CaseStudy type and the CaseStudyCategory type */
  readonly caseStudyCategory: Maybe<tsCaseStudyToCaseStudyCategoryConnection>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Case Study Details Page&quot; was set to Show in GraphQL. */
  readonly caseStudyDetailsPage: Maybe<tsCaseStudy_Casestudydetailspage>;
  /** Connection between the CaseStudy type and the CaseStudyType type */
  readonly caseStudyType: Maybe<tsCaseStudyToCaseStudyTypeConnection>;
  readonly children: ReadonlyArray<Node>;
  /** The content of the post. */
  readonly content: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  readonly contentType: Maybe<tsContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  readonly contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** Post publishing date. */
  readonly date: Maybe<Scalars['Date']>;
  /** The publishing date set in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** The desired slug of the post */
  readonly desiredSlug: Maybe<Scalars['String']>;
  /** The RSS enclosure for the object */
  readonly enclosure: Maybe<Scalars['String']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  readonly featuredImage: Maybe<tsNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  readonly featuredImageId: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  readonly guid: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  readonly lastEditedBy: Maybe<tsContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  readonly link: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  readonly modified: Maybe<Scalars['Date']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  readonly modifiedGmt: Maybe<Scalars['Date']>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;New Case Study&quot; was set to Show in GraphQL. */
  readonly newCaseStudy: Maybe<tsCaseStudy_Newcasestudy>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Portfolio&quot; was set to Show in GraphQL. */
  readonly portfolio: Maybe<tsCaseStudy_Portfolio>;
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  readonly slug: Maybe<Scalars['String']>;
  /** The current status of the object */
  readonly status: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  readonly template: Maybe<tsContentTemplate>;
  /** Connection between the CaseStudy type and the TermNode type */
  readonly terms: Maybe<tsCaseStudyToTermNodeConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  readonly title: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};


type tsCaseStudy_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsCaseStudy_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsCaseStudy_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsCaseStudy_modifiedGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

/** The CaseStudyCategory type */
type tsCaseStudyCategory = Node & tsDatabaseIdentifier & tsHierarchicalTermNode & tsMenuItemLinkable & tsNode & tsTermNode & tsUniformResourceIdentifiable & {
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsCaseStudyCategoryToAncestorsCaseStudyCategoryConnection>;
  /** Connection between the CaseStudyCategory type and the CaseStudy type */
  readonly caseStudies: Maybe<tsCaseStudyCategoryToCaseStudyConnection>;
  readonly children: ReadonlyArray<Node>;
  /** Connection between the CaseStudyCategory type and the ContentNode type */
  readonly contentNodes: Maybe<tsCaseStudyCategoryToContentNodeConnection>;
  /** The number of objects connected to the object */
  readonly count: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** The description of the object */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The link to the term */
  readonly link: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** The Yoast SEO data of the Category taxonomy. */
  readonly seo: Maybe<tsTaxonomySEO>;
  /** An alphanumeric identifier for the object unique to its type. */
  readonly slug: Maybe<Scalars['String']>;
  /** Connection between the CaseStudyCategory type and the Taxonomy type */
  readonly taxonomy: Maybe<tsCaseStudyCategoryToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  readonly taxonomyName: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  readonly termGroupId: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  readonly termTaxonomyId: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** Connection between the CaseStudyCategory type and the CaseStudyCategory type */
  readonly wpChildren: Maybe<tsCaseStudyCategoryToCaseStudyCategoryConnection>;
  /** Connection between the CaseStudyCategory type and the CaseStudyCategory type */
  readonly wpParent: Maybe<tsCaseStudyCategoryToParentCaseStudyCategoryConnectionEdge>;
};

type tsCaseStudyCategoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCaseStudyCategoryEdge>;
  readonly group: ReadonlyArray<tsCaseStudyCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCaseStudyCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCaseStudyCategoryConnection_distinctArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
};


type tsCaseStudyCategoryConnection_groupArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCaseStudyCategoryConnection_maxArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
};


type tsCaseStudyCategoryConnection_minArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
};


type tsCaseStudyCategoryConnection_sumArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
};

type tsCaseStudyCategoryEdge = {
  readonly next: Maybe<tsCaseStudyCategory>;
  readonly node: tsCaseStudyCategory;
  readonly previous: Maybe<tsCaseStudyCategory>;
};

type tsCaseStudyCategoryFieldsEnum =
  | 'ancestors.nodes'
  | 'ancestors.nodes.ancestors.nodes'
  | 'ancestors.nodes.caseStudies.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentNodes.nodes'
  | 'ancestors.nodes.count'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.description'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.name'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parentDatabaseId'
  | 'ancestors.nodes.parentId'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.taxonomyName'
  | 'ancestors.nodes.termGroupId'
  | 'ancestors.nodes.termTaxonomyId'
  | 'ancestors.nodes.uri'
  | 'ancestors.nodes.wpChildren.nodes'
  | 'caseStudies.nodes'
  | 'caseStudies.nodes.camberRoadmapCaseStudy.camberRoadmapCaseStudy'
  | 'caseStudies.nodes.camberRoadmapCaseStudy.fieldGroupName'
  | 'caseStudies.nodes.camberRoadmapCaseStudy.mobileCaseStudyTitle'
  | 'caseStudies.nodes.caseStudyCategory.nodes'
  | 'caseStudies.nodes.caseStudyDetailsPage.clientSaysHeading'
  | 'caseStudies.nodes.caseStudyDetailsPage.content'
  | 'caseStudies.nodes.caseStudyDetailsPage.featureHeading'
  | 'caseStudies.nodes.caseStudyDetailsPage.featuresListsForApps'
  | 'caseStudies.nodes.caseStudyDetailsPage.featuresListsForWeb'
  | 'caseStudies.nodes.caseStudyDetailsPage.fieldGroupName'
  | 'caseStudies.nodes.caseStudyDetailsPage.heading'
  | 'caseStudies.nodes.caseStudyDetailsPage.problemChallengesResultLists'
  | 'caseStudies.nodes.caseStudyDetailsPage.specialFeaturesContent'
  | 'caseStudies.nodes.caseStudyDetailsPage.specialFeaturesHeading'
  | 'caseStudies.nodes.caseStudyType.nodes'
  | 'caseStudies.nodes.caseStudy.appGallery'
  | 'caseStudies.nodes.caseStudy.fieldGroupName'
  | 'caseStudies.nodes.caseStudy.gallery'
  | 'caseStudies.nodes.caseStudy.ourRole'
  | 'caseStudies.nodes.caseStudy.problem'
  | 'caseStudies.nodes.caseStudy.problemStrategyResultLayout'
  | 'caseStudies.nodes.caseStudy.result'
  | 'caseStudies.nodes.caseStudy.strategy'
  | 'caseStudies.nodes.caseStudy.technology'
  | 'caseStudies.nodes.caseStudy.type'
  | 'caseStudies.nodes.children'
  | 'caseStudies.nodes.children.children'
  | 'caseStudies.nodes.children.id'
  | 'caseStudies.nodes.content'
  | 'caseStudies.nodes.contentTypeName'
  | 'caseStudies.nodes.databaseId'
  | 'caseStudies.nodes.date'
  | 'caseStudies.nodes.dateGmt'
  | 'caseStudies.nodes.desiredSlug'
  | 'caseStudies.nodes.enclosure'
  | 'caseStudies.nodes.featuredImageDatabaseId'
  | 'caseStudies.nodes.featuredImageId'
  | 'caseStudies.nodes.guid'
  | 'caseStudies.nodes.id'
  | 'caseStudies.nodes.internal.content'
  | 'caseStudies.nodes.internal.contentDigest'
  | 'caseStudies.nodes.internal.contentFilePath'
  | 'caseStudies.nodes.internal.description'
  | 'caseStudies.nodes.internal.fieldOwners'
  | 'caseStudies.nodes.internal.ignoreType'
  | 'caseStudies.nodes.internal.mediaType'
  | 'caseStudies.nodes.internal.owner'
  | 'caseStudies.nodes.internal.type'
  | 'caseStudies.nodes.isContentNode'
  | 'caseStudies.nodes.isTermNode'
  | 'caseStudies.nodes.link'
  | 'caseStudies.nodes.modified'
  | 'caseStudies.nodes.modifiedGmt'
  | 'caseStudies.nodes.newCaseStudy.fieldGroupName'
  | 'caseStudies.nodes.newCaseStudy.newCaseStudy'
  | 'caseStudies.nodes.newCaseStudy.secondaryContent'
  | 'caseStudies.nodes.newCaseStudy.secondaryTitle'
  | 'caseStudies.nodes.newCaseStudy.sections'
  | 'caseStudies.nodes.newCaseStudy.shortContent'
  | 'caseStudies.nodes.nodeType'
  | 'caseStudies.nodes.parent.children'
  | 'caseStudies.nodes.parent.id'
  | 'caseStudies.nodes.portfolio.backgroundGradient'
  | 'caseStudies.nodes.portfolio.fieldGroupName'
  | 'caseStudies.nodes.seo.breadcrumbs'
  | 'caseStudies.nodes.seo.canonical'
  | 'caseStudies.nodes.seo.cornerstone'
  | 'caseStudies.nodes.seo.focuskw'
  | 'caseStudies.nodes.seo.fullHead'
  | 'caseStudies.nodes.seo.metaDesc'
  | 'caseStudies.nodes.seo.metaKeywords'
  | 'caseStudies.nodes.seo.metaRobotsNofollow'
  | 'caseStudies.nodes.seo.metaRobotsNoindex'
  | 'caseStudies.nodes.seo.opengraphAuthor'
  | 'caseStudies.nodes.seo.opengraphDescription'
  | 'caseStudies.nodes.seo.opengraphModifiedTime'
  | 'caseStudies.nodes.seo.opengraphPublishedTime'
  | 'caseStudies.nodes.seo.opengraphPublisher'
  | 'caseStudies.nodes.seo.opengraphSiteName'
  | 'caseStudies.nodes.seo.opengraphTitle'
  | 'caseStudies.nodes.seo.opengraphType'
  | 'caseStudies.nodes.seo.opengraphUrl'
  | 'caseStudies.nodes.seo.readingTime'
  | 'caseStudies.nodes.seo.title'
  | 'caseStudies.nodes.seo.twitterDescription'
  | 'caseStudies.nodes.seo.twitterTitle'
  | 'caseStudies.nodes.slug'
  | 'caseStudies.nodes.status'
  | 'caseStudies.nodes.template.templateName'
  | 'caseStudies.nodes.terms.nodes'
  | 'caseStudies.nodes.title'
  | 'caseStudies.nodes.uri'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentNodes.nodes'
  | 'contentNodes.nodes.children'
  | 'contentNodes.nodes.children.children'
  | 'contentNodes.nodes.children.id'
  | 'contentNodes.nodes.contentTypeName'
  | 'contentNodes.nodes.databaseId'
  | 'contentNodes.nodes.date'
  | 'contentNodes.nodes.dateGmt'
  | 'contentNodes.nodes.desiredSlug'
  | 'contentNodes.nodes.enclosure'
  | 'contentNodes.nodes.guid'
  | 'contentNodes.nodes.id'
  | 'contentNodes.nodes.internal.content'
  | 'contentNodes.nodes.internal.contentDigest'
  | 'contentNodes.nodes.internal.contentFilePath'
  | 'contentNodes.nodes.internal.description'
  | 'contentNodes.nodes.internal.fieldOwners'
  | 'contentNodes.nodes.internal.ignoreType'
  | 'contentNodes.nodes.internal.mediaType'
  | 'contentNodes.nodes.internal.owner'
  | 'contentNodes.nodes.internal.type'
  | 'contentNodes.nodes.isContentNode'
  | 'contentNodes.nodes.isTermNode'
  | 'contentNodes.nodes.link'
  | 'contentNodes.nodes.modified'
  | 'contentNodes.nodes.modifiedGmt'
  | 'contentNodes.nodes.nodeType'
  | 'contentNodes.nodes.parent.children'
  | 'contentNodes.nodes.parent.id'
  | 'contentNodes.nodes.seo.breadcrumbs'
  | 'contentNodes.nodes.seo.canonical'
  | 'contentNodes.nodes.seo.cornerstone'
  | 'contentNodes.nodes.seo.focuskw'
  | 'contentNodes.nodes.seo.fullHead'
  | 'contentNodes.nodes.seo.metaDesc'
  | 'contentNodes.nodes.seo.metaKeywords'
  | 'contentNodes.nodes.seo.metaRobotsNofollow'
  | 'contentNodes.nodes.seo.metaRobotsNoindex'
  | 'contentNodes.nodes.seo.opengraphAuthor'
  | 'contentNodes.nodes.seo.opengraphDescription'
  | 'contentNodes.nodes.seo.opengraphModifiedTime'
  | 'contentNodes.nodes.seo.opengraphPublishedTime'
  | 'contentNodes.nodes.seo.opengraphPublisher'
  | 'contentNodes.nodes.seo.opengraphSiteName'
  | 'contentNodes.nodes.seo.opengraphTitle'
  | 'contentNodes.nodes.seo.opengraphType'
  | 'contentNodes.nodes.seo.opengraphUrl'
  | 'contentNodes.nodes.seo.readingTime'
  | 'contentNodes.nodes.seo.title'
  | 'contentNodes.nodes.seo.twitterDescription'
  | 'contentNodes.nodes.seo.twitterTitle'
  | 'contentNodes.nodes.slug'
  | 'contentNodes.nodes.status'
  | 'contentNodes.nodes.template.templateName'
  | 'contentNodes.nodes.uri'
  | 'count'
  | 'databaseId'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'link'
  | 'name'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'taxonomyName'
  | 'taxonomy.node.archivePath'
  | 'taxonomy.node.children'
  | 'taxonomy.node.children.children'
  | 'taxonomy.node.children.id'
  | 'taxonomy.node.connectedContentTypes.nodes'
  | 'taxonomy.node.description'
  | 'taxonomy.node.graphqlPluralName'
  | 'taxonomy.node.graphqlSingleName'
  | 'taxonomy.node.hierarchical'
  | 'taxonomy.node.id'
  | 'taxonomy.node.internal.content'
  | 'taxonomy.node.internal.contentDigest'
  | 'taxonomy.node.internal.contentFilePath'
  | 'taxonomy.node.internal.description'
  | 'taxonomy.node.internal.fieldOwners'
  | 'taxonomy.node.internal.ignoreType'
  | 'taxonomy.node.internal.mediaType'
  | 'taxonomy.node.internal.owner'
  | 'taxonomy.node.internal.type'
  | 'taxonomy.node.label'
  | 'taxonomy.node.name'
  | 'taxonomy.node.nodeType'
  | 'taxonomy.node.parent.children'
  | 'taxonomy.node.parent.id'
  | 'taxonomy.node.public'
  | 'taxonomy.node.restBase'
  | 'taxonomy.node.restControllerClass'
  | 'taxonomy.node.showCloud'
  | 'taxonomy.node.showInAdminColumn'
  | 'taxonomy.node.showInGraphql'
  | 'taxonomy.node.showInMenu'
  | 'taxonomy.node.showInNavMenus'
  | 'taxonomy.node.showInQuickEdit'
  | 'taxonomy.node.showInRest'
  | 'taxonomy.node.showUi'
  | 'termGroupId'
  | 'termTaxonomyId'
  | 'uri'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.ancestors.nodes'
  | 'wpChildren.nodes.caseStudies.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentNodes.nodes'
  | 'wpChildren.nodes.count'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.description'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.name'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parentDatabaseId'
  | 'wpChildren.nodes.parentId'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.taxonomyName'
  | 'wpChildren.nodes.termGroupId'
  | 'wpChildren.nodes.termTaxonomyId'
  | 'wpChildren.nodes.uri'
  | 'wpChildren.nodes.wpChildren.nodes'
  | 'wpParent.node.ancestors.nodes'
  | 'wpParent.node.caseStudies.nodes'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentNodes.nodes'
  | 'wpParent.node.count'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.description'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.name'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parentDatabaseId'
  | 'wpParent.node.parentId'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.taxonomyName'
  | 'wpParent.node.termGroupId'
  | 'wpParent.node.termTaxonomyId'
  | 'wpParent.node.uri'
  | 'wpParent.node.wpChildren.nodes';

type tsCaseStudyCategoryFilterInput = {
  readonly ancestors: InputMaybe<tsCaseStudyCategoryToAncestorsCaseStudyCategoryConnectionFilterInput>;
  readonly caseStudies: InputMaybe<tsCaseStudyCategoryToCaseStudyConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentNodes: InputMaybe<tsCaseStudyCategoryToContentNodeConnectionFilterInput>;
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly seo: InputMaybe<tsTaxonomySEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly taxonomy: InputMaybe<tsCaseStudyCategoryToTaxonomyConnectionEdgeFilterInput>;
  readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
  readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
  readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsCaseStudyCategoryToCaseStudyCategoryConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsCaseStudyCategoryToParentCaseStudyCategoryConnectionEdgeFilterInput>;
};

type tsCaseStudyCategoryFilterListInput = {
  readonly elemMatch: InputMaybe<tsCaseStudyCategoryFilterInput>;
};

type tsCaseStudyCategoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCaseStudyCategoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsCaseStudyCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCaseStudyCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCaseStudyCategoryGroupConnection_distinctArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
};


type tsCaseStudyCategoryGroupConnection_groupArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCaseStudyCategoryGroupConnection_maxArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
};


type tsCaseStudyCategoryGroupConnection_minArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
};


type tsCaseStudyCategoryGroupConnection_sumArgs = {
  field: tsCaseStudyCategoryFieldsEnum;
};

type tsCaseStudyCategorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsCaseStudyCategoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the CaseStudyCategory type and the CaseStudyCategory type */
type tsCaseStudyCategoryToAncestorsCaseStudyCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCaseStudyCategory>>>;
};

type tsCaseStudyCategoryToAncestorsCaseStudyCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCaseStudyCategoryFilterListInput>;
};

/** Connection between the CaseStudyCategory type and the CaseStudyCategory type */
type tsCaseStudyCategoryToCaseStudyCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCaseStudyCategory>>>;
};

type tsCaseStudyCategoryToCaseStudyCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCaseStudyCategoryFilterListInput>;
};

/** Connection between the CaseStudyCategory type and the CaseStudy type */
type tsCaseStudyCategoryToCaseStudyConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCaseStudy>>>;
};

type tsCaseStudyCategoryToCaseStudyConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCaseStudyFilterListInput>;
};

/** Connection between the CaseStudyCategory type and the ContentNode type */
type tsCaseStudyCategoryToContentNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsCaseStudyCategoryToContentNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the CaseStudyCategory type and the CaseStudyCategory type */
type tsCaseStudyCategoryToParentCaseStudyCategoryConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsCaseStudyCategory>;
};

type tsCaseStudyCategoryToParentCaseStudyCategoryConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsCaseStudyCategoryFilterInput>;
};

/** Connection between the CaseStudyCategory type and the Taxonomy type */
type tsCaseStudyCategoryToTaxonomyConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsTaxonomy>;
};

type tsCaseStudyCategoryToTaxonomyConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsTaxonomyFilterInput>;
};

type tsCaseStudyConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCaseStudyEdge>;
  readonly group: ReadonlyArray<tsCaseStudyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCaseStudy>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCaseStudyConnection_distinctArgs = {
  field: tsCaseStudyFieldsEnum;
};


type tsCaseStudyConnection_groupArgs = {
  field: tsCaseStudyFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCaseStudyConnection_maxArgs = {
  field: tsCaseStudyFieldsEnum;
};


type tsCaseStudyConnection_minArgs = {
  field: tsCaseStudyFieldsEnum;
};


type tsCaseStudyConnection_sumArgs = {
  field: tsCaseStudyFieldsEnum;
};

type tsCaseStudyEdge = {
  readonly next: Maybe<tsCaseStudy>;
  readonly node: tsCaseStudy;
  readonly previous: Maybe<tsCaseStudy>;
};

type tsCaseStudyFieldsEnum =
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.content'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.fieldGroupName'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.altText'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.authorDatabaseId'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.authorId'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.caption'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.children'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.commentCount'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.commentStatus'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.contentTypeName'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.databaseId'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.date'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.dateGmt'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.description'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.desiredSlug'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.enclosure'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.fileSize'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.filename'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.filesize'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.gatsbyImage'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.guid'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.height'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.id'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.isContentNode'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.isTermNode'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.link'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.mediaItemUrl'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.mediaType'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.mimeType'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.modified'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.modifiedGmt'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.nodeType'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.parentDatabaseId'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.parentId'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.publicUrl'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.sizes'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.slug'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.sourceUrl'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.srcSet'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.status'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.title'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.uri'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.image.width'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.listContent'
  | 'camberRoadmapCaseStudy.camberRoadmapCaseStudy.title'
  | 'camberRoadmapCaseStudy.fieldGroupName'
  | 'camberRoadmapCaseStudy.mobileCaseStudyTitle'
  | 'caseStudyCategory.nodes'
  | 'caseStudyCategory.nodes.ancestors.nodes'
  | 'caseStudyCategory.nodes.caseStudies.nodes'
  | 'caseStudyCategory.nodes.children'
  | 'caseStudyCategory.nodes.children.children'
  | 'caseStudyCategory.nodes.children.id'
  | 'caseStudyCategory.nodes.contentNodes.nodes'
  | 'caseStudyCategory.nodes.count'
  | 'caseStudyCategory.nodes.databaseId'
  | 'caseStudyCategory.nodes.description'
  | 'caseStudyCategory.nodes.id'
  | 'caseStudyCategory.nodes.internal.content'
  | 'caseStudyCategory.nodes.internal.contentDigest'
  | 'caseStudyCategory.nodes.internal.contentFilePath'
  | 'caseStudyCategory.nodes.internal.description'
  | 'caseStudyCategory.nodes.internal.fieldOwners'
  | 'caseStudyCategory.nodes.internal.ignoreType'
  | 'caseStudyCategory.nodes.internal.mediaType'
  | 'caseStudyCategory.nodes.internal.owner'
  | 'caseStudyCategory.nodes.internal.type'
  | 'caseStudyCategory.nodes.isContentNode'
  | 'caseStudyCategory.nodes.isTermNode'
  | 'caseStudyCategory.nodes.link'
  | 'caseStudyCategory.nodes.name'
  | 'caseStudyCategory.nodes.nodeType'
  | 'caseStudyCategory.nodes.parentDatabaseId'
  | 'caseStudyCategory.nodes.parentId'
  | 'caseStudyCategory.nodes.parent.children'
  | 'caseStudyCategory.nodes.parent.id'
  | 'caseStudyCategory.nodes.seo.breadcrumbs'
  | 'caseStudyCategory.nodes.seo.canonical'
  | 'caseStudyCategory.nodes.seo.cornerstone'
  | 'caseStudyCategory.nodes.seo.focuskw'
  | 'caseStudyCategory.nodes.seo.fullHead'
  | 'caseStudyCategory.nodes.seo.metaDesc'
  | 'caseStudyCategory.nodes.seo.metaKeywords'
  | 'caseStudyCategory.nodes.seo.metaRobotsNofollow'
  | 'caseStudyCategory.nodes.seo.metaRobotsNoindex'
  | 'caseStudyCategory.nodes.seo.opengraphAuthor'
  | 'caseStudyCategory.nodes.seo.opengraphDescription'
  | 'caseStudyCategory.nodes.seo.opengraphModifiedTime'
  | 'caseStudyCategory.nodes.seo.opengraphPublishedTime'
  | 'caseStudyCategory.nodes.seo.opengraphPublisher'
  | 'caseStudyCategory.nodes.seo.opengraphSiteName'
  | 'caseStudyCategory.nodes.seo.opengraphTitle'
  | 'caseStudyCategory.nodes.seo.opengraphType'
  | 'caseStudyCategory.nodes.seo.opengraphUrl'
  | 'caseStudyCategory.nodes.seo.title'
  | 'caseStudyCategory.nodes.seo.twitterDescription'
  | 'caseStudyCategory.nodes.seo.twitterTitle'
  | 'caseStudyCategory.nodes.slug'
  | 'caseStudyCategory.nodes.taxonomyName'
  | 'caseStudyCategory.nodes.termGroupId'
  | 'caseStudyCategory.nodes.termTaxonomyId'
  | 'caseStudyCategory.nodes.uri'
  | 'caseStudyCategory.nodes.wpChildren.nodes'
  | 'caseStudyDetailsPage.clientSaysHeading'
  | 'caseStudyDetailsPage.content'
  | 'caseStudyDetailsPage.detailsPageImage.altText'
  | 'caseStudyDetailsPage.detailsPageImage.ancestors.nodes'
  | 'caseStudyDetailsPage.detailsPageImage.authorDatabaseId'
  | 'caseStudyDetailsPage.detailsPageImage.authorId'
  | 'caseStudyDetailsPage.detailsPageImage.caption'
  | 'caseStudyDetailsPage.detailsPageImage.children'
  | 'caseStudyDetailsPage.detailsPageImage.children.children'
  | 'caseStudyDetailsPage.detailsPageImage.children.id'
  | 'caseStudyDetailsPage.detailsPageImage.commentCount'
  | 'caseStudyDetailsPage.detailsPageImage.commentStatus'
  | 'caseStudyDetailsPage.detailsPageImage.comments.nodes'
  | 'caseStudyDetailsPage.detailsPageImage.contentTypeName'
  | 'caseStudyDetailsPage.detailsPageImage.databaseId'
  | 'caseStudyDetailsPage.detailsPageImage.date'
  | 'caseStudyDetailsPage.detailsPageImage.dateGmt'
  | 'caseStudyDetailsPage.detailsPageImage.description'
  | 'caseStudyDetailsPage.detailsPageImage.desiredSlug'
  | 'caseStudyDetailsPage.detailsPageImage.enclosure'
  | 'caseStudyDetailsPage.detailsPageImage.fileSize'
  | 'caseStudyDetailsPage.detailsPageImage.filename'
  | 'caseStudyDetailsPage.detailsPageImage.filesize'
  | 'caseStudyDetailsPage.detailsPageImage.gatsbyImage'
  | 'caseStudyDetailsPage.detailsPageImage.guid'
  | 'caseStudyDetailsPage.detailsPageImage.height'
  | 'caseStudyDetailsPage.detailsPageImage.id'
  | 'caseStudyDetailsPage.detailsPageImage.internal.content'
  | 'caseStudyDetailsPage.detailsPageImage.internal.contentDigest'
  | 'caseStudyDetailsPage.detailsPageImage.internal.contentFilePath'
  | 'caseStudyDetailsPage.detailsPageImage.internal.description'
  | 'caseStudyDetailsPage.detailsPageImage.internal.fieldOwners'
  | 'caseStudyDetailsPage.detailsPageImage.internal.ignoreType'
  | 'caseStudyDetailsPage.detailsPageImage.internal.mediaType'
  | 'caseStudyDetailsPage.detailsPageImage.internal.owner'
  | 'caseStudyDetailsPage.detailsPageImage.internal.type'
  | 'caseStudyDetailsPage.detailsPageImage.isContentNode'
  | 'caseStudyDetailsPage.detailsPageImage.isTermNode'
  | 'caseStudyDetailsPage.detailsPageImage.link'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.absolutePath'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.accessTime'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.atime'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.atimeMs'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.base'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.birthTime'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.birthtime'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.birthtimeMs'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.blksize'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.blocks'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.changeTime'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.children'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.childrenImageSharp'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.ctime'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.ctimeMs'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.dev'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.dir'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.ext'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.extension'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.gid'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.hash'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.id'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.ino'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.mode'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.modifiedTime'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.mtime'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.mtimeMs'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.name'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.nlink'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.prettySize'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.publicURL'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.rdev'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.relativeDirectory'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.relativePath'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.root'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.size'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.sourceInstanceName'
  | 'caseStudyDetailsPage.detailsPageImage.localFile.uid'
  | 'caseStudyDetailsPage.detailsPageImage.mediaDetails.file'
  | 'caseStudyDetailsPage.detailsPageImage.mediaDetails.height'
  | 'caseStudyDetailsPage.detailsPageImage.mediaDetails.sizes'
  | 'caseStudyDetailsPage.detailsPageImage.mediaDetails.width'
  | 'caseStudyDetailsPage.detailsPageImage.mediaItemUrl'
  | 'caseStudyDetailsPage.detailsPageImage.mediaType'
  | 'caseStudyDetailsPage.detailsPageImage.mimeType'
  | 'caseStudyDetailsPage.detailsPageImage.modified'
  | 'caseStudyDetailsPage.detailsPageImage.modifiedGmt'
  | 'caseStudyDetailsPage.detailsPageImage.nodeType'
  | 'caseStudyDetailsPage.detailsPageImage.parentDatabaseId'
  | 'caseStudyDetailsPage.detailsPageImage.parentId'
  | 'caseStudyDetailsPage.detailsPageImage.parent.children'
  | 'caseStudyDetailsPage.detailsPageImage.parent.id'
  | 'caseStudyDetailsPage.detailsPageImage.publicUrl'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.absolutePath'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.accessTime'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.atime'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.atimeMs'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.base'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.birthTime'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.birthtime'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.birthtimeMs'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.blksize'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.blocks'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.changeTime'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.children'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.childrenImageSharp'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.ctime'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.ctimeMs'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.dev'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.dir'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.ext'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.extension'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.gid'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.hash'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.id'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.ino'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.mode'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.modifiedTime'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.mtime'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.mtimeMs'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.name'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.nlink'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.prettySize'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.publicURL'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.rdev'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.relativeDirectory'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.relativePath'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.root'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.size'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.sourceInstanceName'
  | 'caseStudyDetailsPage.detailsPageImage.remoteFile.uid'
  | 'caseStudyDetailsPage.detailsPageImage.resize.height'
  | 'caseStudyDetailsPage.detailsPageImage.resize.src'
  | 'caseStudyDetailsPage.detailsPageImage.resize.width'
  | 'caseStudyDetailsPage.detailsPageImage.seo.breadcrumbs'
  | 'caseStudyDetailsPage.detailsPageImage.seo.canonical'
  | 'caseStudyDetailsPage.detailsPageImage.seo.cornerstone'
  | 'caseStudyDetailsPage.detailsPageImage.seo.focuskw'
  | 'caseStudyDetailsPage.detailsPageImage.seo.fullHead'
  | 'caseStudyDetailsPage.detailsPageImage.seo.metaDesc'
  | 'caseStudyDetailsPage.detailsPageImage.seo.metaKeywords'
  | 'caseStudyDetailsPage.detailsPageImage.seo.metaRobotsNofollow'
  | 'caseStudyDetailsPage.detailsPageImage.seo.metaRobotsNoindex'
  | 'caseStudyDetailsPage.detailsPageImage.seo.opengraphAuthor'
  | 'caseStudyDetailsPage.detailsPageImage.seo.opengraphDescription'
  | 'caseStudyDetailsPage.detailsPageImage.seo.opengraphModifiedTime'
  | 'caseStudyDetailsPage.detailsPageImage.seo.opengraphPublishedTime'
  | 'caseStudyDetailsPage.detailsPageImage.seo.opengraphPublisher'
  | 'caseStudyDetailsPage.detailsPageImage.seo.opengraphSiteName'
  | 'caseStudyDetailsPage.detailsPageImage.seo.opengraphTitle'
  | 'caseStudyDetailsPage.detailsPageImage.seo.opengraphType'
  | 'caseStudyDetailsPage.detailsPageImage.seo.opengraphUrl'
  | 'caseStudyDetailsPage.detailsPageImage.seo.readingTime'
  | 'caseStudyDetailsPage.detailsPageImage.seo.title'
  | 'caseStudyDetailsPage.detailsPageImage.seo.twitterDescription'
  | 'caseStudyDetailsPage.detailsPageImage.seo.twitterTitle'
  | 'caseStudyDetailsPage.detailsPageImage.sizes'
  | 'caseStudyDetailsPage.detailsPageImage.slug'
  | 'caseStudyDetailsPage.detailsPageImage.sourceUrl'
  | 'caseStudyDetailsPage.detailsPageImage.srcSet'
  | 'caseStudyDetailsPage.detailsPageImage.status'
  | 'caseStudyDetailsPage.detailsPageImage.template.templateName'
  | 'caseStudyDetailsPage.detailsPageImage.title'
  | 'caseStudyDetailsPage.detailsPageImage.uri'
  | 'caseStudyDetailsPage.detailsPageImage.width'
  | 'caseStudyDetailsPage.detailsPageImage.wpChildren.nodes'
  | 'caseStudyDetailsPage.featureHeading'
  | 'caseStudyDetailsPage.featuresListsForApps'
  | 'caseStudyDetailsPage.featuresListsForApps.content'
  | 'caseStudyDetailsPage.featuresListsForApps.fieldGroupName'
  | 'caseStudyDetailsPage.featuresListsForApps.heading'
  | 'caseStudyDetailsPage.featuresListsForApps.image.altText'
  | 'caseStudyDetailsPage.featuresListsForApps.image.authorDatabaseId'
  | 'caseStudyDetailsPage.featuresListsForApps.image.authorId'
  | 'caseStudyDetailsPage.featuresListsForApps.image.caption'
  | 'caseStudyDetailsPage.featuresListsForApps.image.children'
  | 'caseStudyDetailsPage.featuresListsForApps.image.commentCount'
  | 'caseStudyDetailsPage.featuresListsForApps.image.commentStatus'
  | 'caseStudyDetailsPage.featuresListsForApps.image.contentTypeName'
  | 'caseStudyDetailsPage.featuresListsForApps.image.databaseId'
  | 'caseStudyDetailsPage.featuresListsForApps.image.date'
  | 'caseStudyDetailsPage.featuresListsForApps.image.dateGmt'
  | 'caseStudyDetailsPage.featuresListsForApps.image.description'
  | 'caseStudyDetailsPage.featuresListsForApps.image.desiredSlug'
  | 'caseStudyDetailsPage.featuresListsForApps.image.enclosure'
  | 'caseStudyDetailsPage.featuresListsForApps.image.fileSize'
  | 'caseStudyDetailsPage.featuresListsForApps.image.filename'
  | 'caseStudyDetailsPage.featuresListsForApps.image.filesize'
  | 'caseStudyDetailsPage.featuresListsForApps.image.gatsbyImage'
  | 'caseStudyDetailsPage.featuresListsForApps.image.guid'
  | 'caseStudyDetailsPage.featuresListsForApps.image.height'
  | 'caseStudyDetailsPage.featuresListsForApps.image.id'
  | 'caseStudyDetailsPage.featuresListsForApps.image.isContentNode'
  | 'caseStudyDetailsPage.featuresListsForApps.image.isTermNode'
  | 'caseStudyDetailsPage.featuresListsForApps.image.link'
  | 'caseStudyDetailsPage.featuresListsForApps.image.mediaItemUrl'
  | 'caseStudyDetailsPage.featuresListsForApps.image.mediaType'
  | 'caseStudyDetailsPage.featuresListsForApps.image.mimeType'
  | 'caseStudyDetailsPage.featuresListsForApps.image.modified'
  | 'caseStudyDetailsPage.featuresListsForApps.image.modifiedGmt'
  | 'caseStudyDetailsPage.featuresListsForApps.image.nodeType'
  | 'caseStudyDetailsPage.featuresListsForApps.image.parentDatabaseId'
  | 'caseStudyDetailsPage.featuresListsForApps.image.parentId'
  | 'caseStudyDetailsPage.featuresListsForApps.image.publicUrl'
  | 'caseStudyDetailsPage.featuresListsForApps.image.sizes'
  | 'caseStudyDetailsPage.featuresListsForApps.image.slug'
  | 'caseStudyDetailsPage.featuresListsForApps.image.sourceUrl'
  | 'caseStudyDetailsPage.featuresListsForApps.image.srcSet'
  | 'caseStudyDetailsPage.featuresListsForApps.image.status'
  | 'caseStudyDetailsPage.featuresListsForApps.image.title'
  | 'caseStudyDetailsPage.featuresListsForApps.image.uri'
  | 'caseStudyDetailsPage.featuresListsForApps.image.width'
  | 'caseStudyDetailsPage.featuresListsForWeb'
  | 'caseStudyDetailsPage.featuresListsForWeb.content'
  | 'caseStudyDetailsPage.featuresListsForWeb.fieldGroupName'
  | 'caseStudyDetailsPage.featuresListsForWeb.heading'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.altText'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.authorDatabaseId'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.authorId'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.caption'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.children'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.commentCount'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.commentStatus'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.contentTypeName'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.databaseId'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.date'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.dateGmt'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.description'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.desiredSlug'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.enclosure'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.fileSize'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.filename'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.filesize'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.gatsbyImage'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.guid'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.height'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.id'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.isContentNode'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.isTermNode'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.link'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.mediaItemUrl'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.mediaType'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.mimeType'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.modified'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.modifiedGmt'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.nodeType'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.parentDatabaseId'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.parentId'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.publicUrl'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.sizes'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.slug'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.sourceUrl'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.srcSet'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.status'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.title'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.uri'
  | 'caseStudyDetailsPage.featuresListsForWeb.image.width'
  | 'caseStudyDetailsPage.fieldGroupName'
  | 'caseStudyDetailsPage.heading'
  | 'caseStudyDetailsPage.ourProcess.content'
  | 'caseStudyDetailsPage.ourProcess.cta.target'
  | 'caseStudyDetailsPage.ourProcess.cta.title'
  | 'caseStudyDetailsPage.ourProcess.cta.url'
  | 'caseStudyDetailsPage.ourProcess.fieldGroupName'
  | 'caseStudyDetailsPage.ourProcess.heading'
  | 'caseStudyDetailsPage.ourRoleSection.fieldGroupName'
  | 'caseStudyDetailsPage.ourRoleSection.roleContent'
  | 'caseStudyDetailsPage.ourRoleSection.roleHeading'
  | 'caseStudyDetailsPage.portfolioLinks.androidLink'
  | 'caseStudyDetailsPage.portfolioLinks.fieldGroupName'
  | 'caseStudyDetailsPage.portfolioLinks.heading'
  | 'caseStudyDetailsPage.portfolioLinks.iosLink'
  | 'caseStudyDetailsPage.portfolioLinks.webLink'
  | 'caseStudyDetailsPage.problemChallengesResultLists'
  | 'caseStudyDetailsPage.problemChallengesResultLists.content'
  | 'caseStudyDetailsPage.problemChallengesResultLists.fieldGroupName'
  | 'caseStudyDetailsPage.problemChallengesResultLists.heading'
  | 'caseStudyDetailsPage.services.content'
  | 'caseStudyDetailsPage.services.fieldGroupName'
  | 'caseStudyDetailsPage.services.heading'
  | 'caseStudyDetailsPage.specialFeaturesContent'
  | 'caseStudyDetailsPage.specialFeaturesHeading'
  | 'caseStudyDetailsPage.tools.content'
  | 'caseStudyDetailsPage.tools.fieldGroupName'
  | 'caseStudyDetailsPage.tools.heading'
  | 'caseStudyDetailsPage.weFollowAgile.content'
  | 'caseStudyDetailsPage.weFollowAgile.cta.target'
  | 'caseStudyDetailsPage.weFollowAgile.cta.title'
  | 'caseStudyDetailsPage.weFollowAgile.cta.url'
  | 'caseStudyDetailsPage.weFollowAgile.fieldGroupName'
  | 'caseStudyDetailsPage.weFollowAgile.heading'
  | 'caseStudyType.nodes'
  | 'caseStudyType.nodes.ancestors.nodes'
  | 'caseStudyType.nodes.caseStudies.nodes'
  | 'caseStudyType.nodes.children'
  | 'caseStudyType.nodes.children.children'
  | 'caseStudyType.nodes.children.id'
  | 'caseStudyType.nodes.contentNodes.nodes'
  | 'caseStudyType.nodes.count'
  | 'caseStudyType.nodes.databaseId'
  | 'caseStudyType.nodes.description'
  | 'caseStudyType.nodes.id'
  | 'caseStudyType.nodes.internal.content'
  | 'caseStudyType.nodes.internal.contentDigest'
  | 'caseStudyType.nodes.internal.contentFilePath'
  | 'caseStudyType.nodes.internal.description'
  | 'caseStudyType.nodes.internal.fieldOwners'
  | 'caseStudyType.nodes.internal.ignoreType'
  | 'caseStudyType.nodes.internal.mediaType'
  | 'caseStudyType.nodes.internal.owner'
  | 'caseStudyType.nodes.internal.type'
  | 'caseStudyType.nodes.isContentNode'
  | 'caseStudyType.nodes.isTermNode'
  | 'caseStudyType.nodes.link'
  | 'caseStudyType.nodes.name'
  | 'caseStudyType.nodes.nodeType'
  | 'caseStudyType.nodes.parentDatabaseId'
  | 'caseStudyType.nodes.parentId'
  | 'caseStudyType.nodes.parent.children'
  | 'caseStudyType.nodes.parent.id'
  | 'caseStudyType.nodes.seo.breadcrumbs'
  | 'caseStudyType.nodes.seo.canonical'
  | 'caseStudyType.nodes.seo.cornerstone'
  | 'caseStudyType.nodes.seo.focuskw'
  | 'caseStudyType.nodes.seo.fullHead'
  | 'caseStudyType.nodes.seo.metaDesc'
  | 'caseStudyType.nodes.seo.metaKeywords'
  | 'caseStudyType.nodes.seo.metaRobotsNofollow'
  | 'caseStudyType.nodes.seo.metaRobotsNoindex'
  | 'caseStudyType.nodes.seo.opengraphAuthor'
  | 'caseStudyType.nodes.seo.opengraphDescription'
  | 'caseStudyType.nodes.seo.opengraphModifiedTime'
  | 'caseStudyType.nodes.seo.opengraphPublishedTime'
  | 'caseStudyType.nodes.seo.opengraphPublisher'
  | 'caseStudyType.nodes.seo.opengraphSiteName'
  | 'caseStudyType.nodes.seo.opengraphTitle'
  | 'caseStudyType.nodes.seo.opengraphType'
  | 'caseStudyType.nodes.seo.opengraphUrl'
  | 'caseStudyType.nodes.seo.title'
  | 'caseStudyType.nodes.seo.twitterDescription'
  | 'caseStudyType.nodes.seo.twitterTitle'
  | 'caseStudyType.nodes.slug'
  | 'caseStudyType.nodes.taxonomyName'
  | 'caseStudyType.nodes.termGroupId'
  | 'caseStudyType.nodes.termTaxonomyId'
  | 'caseStudyType.nodes.uri'
  | 'caseStudyType.nodes.wpChildren.nodes'
  | 'caseStudy.appGallery'
  | 'caseStudy.appGallery.altText'
  | 'caseStudy.appGallery.ancestors.nodes'
  | 'caseStudy.appGallery.authorDatabaseId'
  | 'caseStudy.appGallery.authorId'
  | 'caseStudy.appGallery.caption'
  | 'caseStudy.appGallery.children'
  | 'caseStudy.appGallery.children.children'
  | 'caseStudy.appGallery.children.id'
  | 'caseStudy.appGallery.commentCount'
  | 'caseStudy.appGallery.commentStatus'
  | 'caseStudy.appGallery.comments.nodes'
  | 'caseStudy.appGallery.contentTypeName'
  | 'caseStudy.appGallery.databaseId'
  | 'caseStudy.appGallery.date'
  | 'caseStudy.appGallery.dateGmt'
  | 'caseStudy.appGallery.description'
  | 'caseStudy.appGallery.desiredSlug'
  | 'caseStudy.appGallery.enclosure'
  | 'caseStudy.appGallery.fileSize'
  | 'caseStudy.appGallery.filename'
  | 'caseStudy.appGallery.filesize'
  | 'caseStudy.appGallery.gatsbyImage'
  | 'caseStudy.appGallery.guid'
  | 'caseStudy.appGallery.height'
  | 'caseStudy.appGallery.id'
  | 'caseStudy.appGallery.internal.content'
  | 'caseStudy.appGallery.internal.contentDigest'
  | 'caseStudy.appGallery.internal.contentFilePath'
  | 'caseStudy.appGallery.internal.description'
  | 'caseStudy.appGallery.internal.fieldOwners'
  | 'caseStudy.appGallery.internal.ignoreType'
  | 'caseStudy.appGallery.internal.mediaType'
  | 'caseStudy.appGallery.internal.owner'
  | 'caseStudy.appGallery.internal.type'
  | 'caseStudy.appGallery.isContentNode'
  | 'caseStudy.appGallery.isTermNode'
  | 'caseStudy.appGallery.link'
  | 'caseStudy.appGallery.localFile.absolutePath'
  | 'caseStudy.appGallery.localFile.accessTime'
  | 'caseStudy.appGallery.localFile.atime'
  | 'caseStudy.appGallery.localFile.atimeMs'
  | 'caseStudy.appGallery.localFile.base'
  | 'caseStudy.appGallery.localFile.birthTime'
  | 'caseStudy.appGallery.localFile.birthtime'
  | 'caseStudy.appGallery.localFile.birthtimeMs'
  | 'caseStudy.appGallery.localFile.blksize'
  | 'caseStudy.appGallery.localFile.blocks'
  | 'caseStudy.appGallery.localFile.changeTime'
  | 'caseStudy.appGallery.localFile.children'
  | 'caseStudy.appGallery.localFile.childrenImageSharp'
  | 'caseStudy.appGallery.localFile.ctime'
  | 'caseStudy.appGallery.localFile.ctimeMs'
  | 'caseStudy.appGallery.localFile.dev'
  | 'caseStudy.appGallery.localFile.dir'
  | 'caseStudy.appGallery.localFile.ext'
  | 'caseStudy.appGallery.localFile.extension'
  | 'caseStudy.appGallery.localFile.gid'
  | 'caseStudy.appGallery.localFile.hash'
  | 'caseStudy.appGallery.localFile.id'
  | 'caseStudy.appGallery.localFile.ino'
  | 'caseStudy.appGallery.localFile.mode'
  | 'caseStudy.appGallery.localFile.modifiedTime'
  | 'caseStudy.appGallery.localFile.mtime'
  | 'caseStudy.appGallery.localFile.mtimeMs'
  | 'caseStudy.appGallery.localFile.name'
  | 'caseStudy.appGallery.localFile.nlink'
  | 'caseStudy.appGallery.localFile.prettySize'
  | 'caseStudy.appGallery.localFile.publicURL'
  | 'caseStudy.appGallery.localFile.rdev'
  | 'caseStudy.appGallery.localFile.relativeDirectory'
  | 'caseStudy.appGallery.localFile.relativePath'
  | 'caseStudy.appGallery.localFile.root'
  | 'caseStudy.appGallery.localFile.size'
  | 'caseStudy.appGallery.localFile.sourceInstanceName'
  | 'caseStudy.appGallery.localFile.uid'
  | 'caseStudy.appGallery.mediaDetails.file'
  | 'caseStudy.appGallery.mediaDetails.height'
  | 'caseStudy.appGallery.mediaDetails.sizes'
  | 'caseStudy.appGallery.mediaDetails.width'
  | 'caseStudy.appGallery.mediaItemUrl'
  | 'caseStudy.appGallery.mediaType'
  | 'caseStudy.appGallery.mimeType'
  | 'caseStudy.appGallery.modified'
  | 'caseStudy.appGallery.modifiedGmt'
  | 'caseStudy.appGallery.nodeType'
  | 'caseStudy.appGallery.parentDatabaseId'
  | 'caseStudy.appGallery.parentId'
  | 'caseStudy.appGallery.parent.children'
  | 'caseStudy.appGallery.parent.id'
  | 'caseStudy.appGallery.publicUrl'
  | 'caseStudy.appGallery.remoteFile.absolutePath'
  | 'caseStudy.appGallery.remoteFile.accessTime'
  | 'caseStudy.appGallery.remoteFile.atime'
  | 'caseStudy.appGallery.remoteFile.atimeMs'
  | 'caseStudy.appGallery.remoteFile.base'
  | 'caseStudy.appGallery.remoteFile.birthTime'
  | 'caseStudy.appGallery.remoteFile.birthtime'
  | 'caseStudy.appGallery.remoteFile.birthtimeMs'
  | 'caseStudy.appGallery.remoteFile.blksize'
  | 'caseStudy.appGallery.remoteFile.blocks'
  | 'caseStudy.appGallery.remoteFile.changeTime'
  | 'caseStudy.appGallery.remoteFile.children'
  | 'caseStudy.appGallery.remoteFile.childrenImageSharp'
  | 'caseStudy.appGallery.remoteFile.ctime'
  | 'caseStudy.appGallery.remoteFile.ctimeMs'
  | 'caseStudy.appGallery.remoteFile.dev'
  | 'caseStudy.appGallery.remoteFile.dir'
  | 'caseStudy.appGallery.remoteFile.ext'
  | 'caseStudy.appGallery.remoteFile.extension'
  | 'caseStudy.appGallery.remoteFile.gid'
  | 'caseStudy.appGallery.remoteFile.hash'
  | 'caseStudy.appGallery.remoteFile.id'
  | 'caseStudy.appGallery.remoteFile.ino'
  | 'caseStudy.appGallery.remoteFile.mode'
  | 'caseStudy.appGallery.remoteFile.modifiedTime'
  | 'caseStudy.appGallery.remoteFile.mtime'
  | 'caseStudy.appGallery.remoteFile.mtimeMs'
  | 'caseStudy.appGallery.remoteFile.name'
  | 'caseStudy.appGallery.remoteFile.nlink'
  | 'caseStudy.appGallery.remoteFile.prettySize'
  | 'caseStudy.appGallery.remoteFile.publicURL'
  | 'caseStudy.appGallery.remoteFile.rdev'
  | 'caseStudy.appGallery.remoteFile.relativeDirectory'
  | 'caseStudy.appGallery.remoteFile.relativePath'
  | 'caseStudy.appGallery.remoteFile.root'
  | 'caseStudy.appGallery.remoteFile.size'
  | 'caseStudy.appGallery.remoteFile.sourceInstanceName'
  | 'caseStudy.appGallery.remoteFile.uid'
  | 'caseStudy.appGallery.resize.height'
  | 'caseStudy.appGallery.resize.src'
  | 'caseStudy.appGallery.resize.width'
  | 'caseStudy.appGallery.seo.breadcrumbs'
  | 'caseStudy.appGallery.seo.canonical'
  | 'caseStudy.appGallery.seo.cornerstone'
  | 'caseStudy.appGallery.seo.focuskw'
  | 'caseStudy.appGallery.seo.fullHead'
  | 'caseStudy.appGallery.seo.metaDesc'
  | 'caseStudy.appGallery.seo.metaKeywords'
  | 'caseStudy.appGallery.seo.metaRobotsNofollow'
  | 'caseStudy.appGallery.seo.metaRobotsNoindex'
  | 'caseStudy.appGallery.seo.opengraphAuthor'
  | 'caseStudy.appGallery.seo.opengraphDescription'
  | 'caseStudy.appGallery.seo.opengraphModifiedTime'
  | 'caseStudy.appGallery.seo.opengraphPublishedTime'
  | 'caseStudy.appGallery.seo.opengraphPublisher'
  | 'caseStudy.appGallery.seo.opengraphSiteName'
  | 'caseStudy.appGallery.seo.opengraphTitle'
  | 'caseStudy.appGallery.seo.opengraphType'
  | 'caseStudy.appGallery.seo.opengraphUrl'
  | 'caseStudy.appGallery.seo.readingTime'
  | 'caseStudy.appGallery.seo.title'
  | 'caseStudy.appGallery.seo.twitterDescription'
  | 'caseStudy.appGallery.seo.twitterTitle'
  | 'caseStudy.appGallery.sizes'
  | 'caseStudy.appGallery.slug'
  | 'caseStudy.appGallery.sourceUrl'
  | 'caseStudy.appGallery.srcSet'
  | 'caseStudy.appGallery.status'
  | 'caseStudy.appGallery.template.templateName'
  | 'caseStudy.appGallery.title'
  | 'caseStudy.appGallery.uri'
  | 'caseStudy.appGallery.width'
  | 'caseStudy.appGallery.wpChildren.nodes'
  | 'caseStudy.detailPageImage.altText'
  | 'caseStudy.detailPageImage.ancestors.nodes'
  | 'caseStudy.detailPageImage.authorDatabaseId'
  | 'caseStudy.detailPageImage.authorId'
  | 'caseStudy.detailPageImage.caption'
  | 'caseStudy.detailPageImage.children'
  | 'caseStudy.detailPageImage.children.children'
  | 'caseStudy.detailPageImage.children.id'
  | 'caseStudy.detailPageImage.commentCount'
  | 'caseStudy.detailPageImage.commentStatus'
  | 'caseStudy.detailPageImage.comments.nodes'
  | 'caseStudy.detailPageImage.contentTypeName'
  | 'caseStudy.detailPageImage.databaseId'
  | 'caseStudy.detailPageImage.date'
  | 'caseStudy.detailPageImage.dateGmt'
  | 'caseStudy.detailPageImage.description'
  | 'caseStudy.detailPageImage.desiredSlug'
  | 'caseStudy.detailPageImage.enclosure'
  | 'caseStudy.detailPageImage.fileSize'
  | 'caseStudy.detailPageImage.filename'
  | 'caseStudy.detailPageImage.filesize'
  | 'caseStudy.detailPageImage.gatsbyImage'
  | 'caseStudy.detailPageImage.guid'
  | 'caseStudy.detailPageImage.height'
  | 'caseStudy.detailPageImage.id'
  | 'caseStudy.detailPageImage.internal.content'
  | 'caseStudy.detailPageImage.internal.contentDigest'
  | 'caseStudy.detailPageImage.internal.contentFilePath'
  | 'caseStudy.detailPageImage.internal.description'
  | 'caseStudy.detailPageImage.internal.fieldOwners'
  | 'caseStudy.detailPageImage.internal.ignoreType'
  | 'caseStudy.detailPageImage.internal.mediaType'
  | 'caseStudy.detailPageImage.internal.owner'
  | 'caseStudy.detailPageImage.internal.type'
  | 'caseStudy.detailPageImage.isContentNode'
  | 'caseStudy.detailPageImage.isTermNode'
  | 'caseStudy.detailPageImage.link'
  | 'caseStudy.detailPageImage.localFile.absolutePath'
  | 'caseStudy.detailPageImage.localFile.accessTime'
  | 'caseStudy.detailPageImage.localFile.atime'
  | 'caseStudy.detailPageImage.localFile.atimeMs'
  | 'caseStudy.detailPageImage.localFile.base'
  | 'caseStudy.detailPageImage.localFile.birthTime'
  | 'caseStudy.detailPageImage.localFile.birthtime'
  | 'caseStudy.detailPageImage.localFile.birthtimeMs'
  | 'caseStudy.detailPageImage.localFile.blksize'
  | 'caseStudy.detailPageImage.localFile.blocks'
  | 'caseStudy.detailPageImage.localFile.changeTime'
  | 'caseStudy.detailPageImage.localFile.children'
  | 'caseStudy.detailPageImage.localFile.childrenImageSharp'
  | 'caseStudy.detailPageImage.localFile.ctime'
  | 'caseStudy.detailPageImage.localFile.ctimeMs'
  | 'caseStudy.detailPageImage.localFile.dev'
  | 'caseStudy.detailPageImage.localFile.dir'
  | 'caseStudy.detailPageImage.localFile.ext'
  | 'caseStudy.detailPageImage.localFile.extension'
  | 'caseStudy.detailPageImage.localFile.gid'
  | 'caseStudy.detailPageImage.localFile.hash'
  | 'caseStudy.detailPageImage.localFile.id'
  | 'caseStudy.detailPageImage.localFile.ino'
  | 'caseStudy.detailPageImage.localFile.mode'
  | 'caseStudy.detailPageImage.localFile.modifiedTime'
  | 'caseStudy.detailPageImage.localFile.mtime'
  | 'caseStudy.detailPageImage.localFile.mtimeMs'
  | 'caseStudy.detailPageImage.localFile.name'
  | 'caseStudy.detailPageImage.localFile.nlink'
  | 'caseStudy.detailPageImage.localFile.prettySize'
  | 'caseStudy.detailPageImage.localFile.publicURL'
  | 'caseStudy.detailPageImage.localFile.rdev'
  | 'caseStudy.detailPageImage.localFile.relativeDirectory'
  | 'caseStudy.detailPageImage.localFile.relativePath'
  | 'caseStudy.detailPageImage.localFile.root'
  | 'caseStudy.detailPageImage.localFile.size'
  | 'caseStudy.detailPageImage.localFile.sourceInstanceName'
  | 'caseStudy.detailPageImage.localFile.uid'
  | 'caseStudy.detailPageImage.mediaDetails.file'
  | 'caseStudy.detailPageImage.mediaDetails.height'
  | 'caseStudy.detailPageImage.mediaDetails.sizes'
  | 'caseStudy.detailPageImage.mediaDetails.width'
  | 'caseStudy.detailPageImage.mediaItemUrl'
  | 'caseStudy.detailPageImage.mediaType'
  | 'caseStudy.detailPageImage.mimeType'
  | 'caseStudy.detailPageImage.modified'
  | 'caseStudy.detailPageImage.modifiedGmt'
  | 'caseStudy.detailPageImage.nodeType'
  | 'caseStudy.detailPageImage.parentDatabaseId'
  | 'caseStudy.detailPageImage.parentId'
  | 'caseStudy.detailPageImage.parent.children'
  | 'caseStudy.detailPageImage.parent.id'
  | 'caseStudy.detailPageImage.publicUrl'
  | 'caseStudy.detailPageImage.remoteFile.absolutePath'
  | 'caseStudy.detailPageImage.remoteFile.accessTime'
  | 'caseStudy.detailPageImage.remoteFile.atime'
  | 'caseStudy.detailPageImage.remoteFile.atimeMs'
  | 'caseStudy.detailPageImage.remoteFile.base'
  | 'caseStudy.detailPageImage.remoteFile.birthTime'
  | 'caseStudy.detailPageImage.remoteFile.birthtime'
  | 'caseStudy.detailPageImage.remoteFile.birthtimeMs'
  | 'caseStudy.detailPageImage.remoteFile.blksize'
  | 'caseStudy.detailPageImage.remoteFile.blocks'
  | 'caseStudy.detailPageImage.remoteFile.changeTime'
  | 'caseStudy.detailPageImage.remoteFile.children'
  | 'caseStudy.detailPageImage.remoteFile.childrenImageSharp'
  | 'caseStudy.detailPageImage.remoteFile.ctime'
  | 'caseStudy.detailPageImage.remoteFile.ctimeMs'
  | 'caseStudy.detailPageImage.remoteFile.dev'
  | 'caseStudy.detailPageImage.remoteFile.dir'
  | 'caseStudy.detailPageImage.remoteFile.ext'
  | 'caseStudy.detailPageImage.remoteFile.extension'
  | 'caseStudy.detailPageImage.remoteFile.gid'
  | 'caseStudy.detailPageImage.remoteFile.hash'
  | 'caseStudy.detailPageImage.remoteFile.id'
  | 'caseStudy.detailPageImage.remoteFile.ino'
  | 'caseStudy.detailPageImage.remoteFile.mode'
  | 'caseStudy.detailPageImage.remoteFile.modifiedTime'
  | 'caseStudy.detailPageImage.remoteFile.mtime'
  | 'caseStudy.detailPageImage.remoteFile.mtimeMs'
  | 'caseStudy.detailPageImage.remoteFile.name'
  | 'caseStudy.detailPageImage.remoteFile.nlink'
  | 'caseStudy.detailPageImage.remoteFile.prettySize'
  | 'caseStudy.detailPageImage.remoteFile.publicURL'
  | 'caseStudy.detailPageImage.remoteFile.rdev'
  | 'caseStudy.detailPageImage.remoteFile.relativeDirectory'
  | 'caseStudy.detailPageImage.remoteFile.relativePath'
  | 'caseStudy.detailPageImage.remoteFile.root'
  | 'caseStudy.detailPageImage.remoteFile.size'
  | 'caseStudy.detailPageImage.remoteFile.sourceInstanceName'
  | 'caseStudy.detailPageImage.remoteFile.uid'
  | 'caseStudy.detailPageImage.resize.height'
  | 'caseStudy.detailPageImage.resize.src'
  | 'caseStudy.detailPageImage.resize.width'
  | 'caseStudy.detailPageImage.seo.breadcrumbs'
  | 'caseStudy.detailPageImage.seo.canonical'
  | 'caseStudy.detailPageImage.seo.cornerstone'
  | 'caseStudy.detailPageImage.seo.focuskw'
  | 'caseStudy.detailPageImage.seo.fullHead'
  | 'caseStudy.detailPageImage.seo.metaDesc'
  | 'caseStudy.detailPageImage.seo.metaKeywords'
  | 'caseStudy.detailPageImage.seo.metaRobotsNofollow'
  | 'caseStudy.detailPageImage.seo.metaRobotsNoindex'
  | 'caseStudy.detailPageImage.seo.opengraphAuthor'
  | 'caseStudy.detailPageImage.seo.opengraphDescription'
  | 'caseStudy.detailPageImage.seo.opengraphModifiedTime'
  | 'caseStudy.detailPageImage.seo.opengraphPublishedTime'
  | 'caseStudy.detailPageImage.seo.opengraphPublisher'
  | 'caseStudy.detailPageImage.seo.opengraphSiteName'
  | 'caseStudy.detailPageImage.seo.opengraphTitle'
  | 'caseStudy.detailPageImage.seo.opengraphType'
  | 'caseStudy.detailPageImage.seo.opengraphUrl'
  | 'caseStudy.detailPageImage.seo.readingTime'
  | 'caseStudy.detailPageImage.seo.title'
  | 'caseStudy.detailPageImage.seo.twitterDescription'
  | 'caseStudy.detailPageImage.seo.twitterTitle'
  | 'caseStudy.detailPageImage.sizes'
  | 'caseStudy.detailPageImage.slug'
  | 'caseStudy.detailPageImage.sourceUrl'
  | 'caseStudy.detailPageImage.srcSet'
  | 'caseStudy.detailPageImage.status'
  | 'caseStudy.detailPageImage.template.templateName'
  | 'caseStudy.detailPageImage.title'
  | 'caseStudy.detailPageImage.uri'
  | 'caseStudy.detailPageImage.width'
  | 'caseStudy.detailPageImage.wpChildren.nodes'
  | 'caseStudy.fieldGroupName'
  | 'caseStudy.gallery'
  | 'caseStudy.gallery.altText'
  | 'caseStudy.gallery.ancestors.nodes'
  | 'caseStudy.gallery.authorDatabaseId'
  | 'caseStudy.gallery.authorId'
  | 'caseStudy.gallery.caption'
  | 'caseStudy.gallery.children'
  | 'caseStudy.gallery.children.children'
  | 'caseStudy.gallery.children.id'
  | 'caseStudy.gallery.commentCount'
  | 'caseStudy.gallery.commentStatus'
  | 'caseStudy.gallery.comments.nodes'
  | 'caseStudy.gallery.contentTypeName'
  | 'caseStudy.gallery.databaseId'
  | 'caseStudy.gallery.date'
  | 'caseStudy.gallery.dateGmt'
  | 'caseStudy.gallery.description'
  | 'caseStudy.gallery.desiredSlug'
  | 'caseStudy.gallery.enclosure'
  | 'caseStudy.gallery.fileSize'
  | 'caseStudy.gallery.filename'
  | 'caseStudy.gallery.filesize'
  | 'caseStudy.gallery.gatsbyImage'
  | 'caseStudy.gallery.guid'
  | 'caseStudy.gallery.height'
  | 'caseStudy.gallery.id'
  | 'caseStudy.gallery.internal.content'
  | 'caseStudy.gallery.internal.contentDigest'
  | 'caseStudy.gallery.internal.contentFilePath'
  | 'caseStudy.gallery.internal.description'
  | 'caseStudy.gallery.internal.fieldOwners'
  | 'caseStudy.gallery.internal.ignoreType'
  | 'caseStudy.gallery.internal.mediaType'
  | 'caseStudy.gallery.internal.owner'
  | 'caseStudy.gallery.internal.type'
  | 'caseStudy.gallery.isContentNode'
  | 'caseStudy.gallery.isTermNode'
  | 'caseStudy.gallery.link'
  | 'caseStudy.gallery.localFile.absolutePath'
  | 'caseStudy.gallery.localFile.accessTime'
  | 'caseStudy.gallery.localFile.atime'
  | 'caseStudy.gallery.localFile.atimeMs'
  | 'caseStudy.gallery.localFile.base'
  | 'caseStudy.gallery.localFile.birthTime'
  | 'caseStudy.gallery.localFile.birthtime'
  | 'caseStudy.gallery.localFile.birthtimeMs'
  | 'caseStudy.gallery.localFile.blksize'
  | 'caseStudy.gallery.localFile.blocks'
  | 'caseStudy.gallery.localFile.changeTime'
  | 'caseStudy.gallery.localFile.children'
  | 'caseStudy.gallery.localFile.childrenImageSharp'
  | 'caseStudy.gallery.localFile.ctime'
  | 'caseStudy.gallery.localFile.ctimeMs'
  | 'caseStudy.gallery.localFile.dev'
  | 'caseStudy.gallery.localFile.dir'
  | 'caseStudy.gallery.localFile.ext'
  | 'caseStudy.gallery.localFile.extension'
  | 'caseStudy.gallery.localFile.gid'
  | 'caseStudy.gallery.localFile.hash'
  | 'caseStudy.gallery.localFile.id'
  | 'caseStudy.gallery.localFile.ino'
  | 'caseStudy.gallery.localFile.mode'
  | 'caseStudy.gallery.localFile.modifiedTime'
  | 'caseStudy.gallery.localFile.mtime'
  | 'caseStudy.gallery.localFile.mtimeMs'
  | 'caseStudy.gallery.localFile.name'
  | 'caseStudy.gallery.localFile.nlink'
  | 'caseStudy.gallery.localFile.prettySize'
  | 'caseStudy.gallery.localFile.publicURL'
  | 'caseStudy.gallery.localFile.rdev'
  | 'caseStudy.gallery.localFile.relativeDirectory'
  | 'caseStudy.gallery.localFile.relativePath'
  | 'caseStudy.gallery.localFile.root'
  | 'caseStudy.gallery.localFile.size'
  | 'caseStudy.gallery.localFile.sourceInstanceName'
  | 'caseStudy.gallery.localFile.uid'
  | 'caseStudy.gallery.mediaDetails.file'
  | 'caseStudy.gallery.mediaDetails.height'
  | 'caseStudy.gallery.mediaDetails.sizes'
  | 'caseStudy.gallery.mediaDetails.width'
  | 'caseStudy.gallery.mediaItemUrl'
  | 'caseStudy.gallery.mediaType'
  | 'caseStudy.gallery.mimeType'
  | 'caseStudy.gallery.modified'
  | 'caseStudy.gallery.modifiedGmt'
  | 'caseStudy.gallery.nodeType'
  | 'caseStudy.gallery.parentDatabaseId'
  | 'caseStudy.gallery.parentId'
  | 'caseStudy.gallery.parent.children'
  | 'caseStudy.gallery.parent.id'
  | 'caseStudy.gallery.publicUrl'
  | 'caseStudy.gallery.remoteFile.absolutePath'
  | 'caseStudy.gallery.remoteFile.accessTime'
  | 'caseStudy.gallery.remoteFile.atime'
  | 'caseStudy.gallery.remoteFile.atimeMs'
  | 'caseStudy.gallery.remoteFile.base'
  | 'caseStudy.gallery.remoteFile.birthTime'
  | 'caseStudy.gallery.remoteFile.birthtime'
  | 'caseStudy.gallery.remoteFile.birthtimeMs'
  | 'caseStudy.gallery.remoteFile.blksize'
  | 'caseStudy.gallery.remoteFile.blocks'
  | 'caseStudy.gallery.remoteFile.changeTime'
  | 'caseStudy.gallery.remoteFile.children'
  | 'caseStudy.gallery.remoteFile.childrenImageSharp'
  | 'caseStudy.gallery.remoteFile.ctime'
  | 'caseStudy.gallery.remoteFile.ctimeMs'
  | 'caseStudy.gallery.remoteFile.dev'
  | 'caseStudy.gallery.remoteFile.dir'
  | 'caseStudy.gallery.remoteFile.ext'
  | 'caseStudy.gallery.remoteFile.extension'
  | 'caseStudy.gallery.remoteFile.gid'
  | 'caseStudy.gallery.remoteFile.hash'
  | 'caseStudy.gallery.remoteFile.id'
  | 'caseStudy.gallery.remoteFile.ino'
  | 'caseStudy.gallery.remoteFile.mode'
  | 'caseStudy.gallery.remoteFile.modifiedTime'
  | 'caseStudy.gallery.remoteFile.mtime'
  | 'caseStudy.gallery.remoteFile.mtimeMs'
  | 'caseStudy.gallery.remoteFile.name'
  | 'caseStudy.gallery.remoteFile.nlink'
  | 'caseStudy.gallery.remoteFile.prettySize'
  | 'caseStudy.gallery.remoteFile.publicURL'
  | 'caseStudy.gallery.remoteFile.rdev'
  | 'caseStudy.gallery.remoteFile.relativeDirectory'
  | 'caseStudy.gallery.remoteFile.relativePath'
  | 'caseStudy.gallery.remoteFile.root'
  | 'caseStudy.gallery.remoteFile.size'
  | 'caseStudy.gallery.remoteFile.sourceInstanceName'
  | 'caseStudy.gallery.remoteFile.uid'
  | 'caseStudy.gallery.resize.height'
  | 'caseStudy.gallery.resize.src'
  | 'caseStudy.gallery.resize.width'
  | 'caseStudy.gallery.seo.breadcrumbs'
  | 'caseStudy.gallery.seo.canonical'
  | 'caseStudy.gallery.seo.cornerstone'
  | 'caseStudy.gallery.seo.focuskw'
  | 'caseStudy.gallery.seo.fullHead'
  | 'caseStudy.gallery.seo.metaDesc'
  | 'caseStudy.gallery.seo.metaKeywords'
  | 'caseStudy.gallery.seo.metaRobotsNofollow'
  | 'caseStudy.gallery.seo.metaRobotsNoindex'
  | 'caseStudy.gallery.seo.opengraphAuthor'
  | 'caseStudy.gallery.seo.opengraphDescription'
  | 'caseStudy.gallery.seo.opengraphModifiedTime'
  | 'caseStudy.gallery.seo.opengraphPublishedTime'
  | 'caseStudy.gallery.seo.opengraphPublisher'
  | 'caseStudy.gallery.seo.opengraphSiteName'
  | 'caseStudy.gallery.seo.opengraphTitle'
  | 'caseStudy.gallery.seo.opengraphType'
  | 'caseStudy.gallery.seo.opengraphUrl'
  | 'caseStudy.gallery.seo.readingTime'
  | 'caseStudy.gallery.seo.title'
  | 'caseStudy.gallery.seo.twitterDescription'
  | 'caseStudy.gallery.seo.twitterTitle'
  | 'caseStudy.gallery.sizes'
  | 'caseStudy.gallery.slug'
  | 'caseStudy.gallery.sourceUrl'
  | 'caseStudy.gallery.srcSet'
  | 'caseStudy.gallery.status'
  | 'caseStudy.gallery.template.templateName'
  | 'caseStudy.gallery.title'
  | 'caseStudy.gallery.uri'
  | 'caseStudy.gallery.width'
  | 'caseStudy.gallery.wpChildren.nodes'
  | 'caseStudy.ourRole'
  | 'caseStudy.problem'
  | 'caseStudy.problemStrategyResultLayout'
  | 'caseStudy.result'
  | 'caseStudy.secondoryImage.altText'
  | 'caseStudy.secondoryImage.ancestors.nodes'
  | 'caseStudy.secondoryImage.authorDatabaseId'
  | 'caseStudy.secondoryImage.authorId'
  | 'caseStudy.secondoryImage.caption'
  | 'caseStudy.secondoryImage.children'
  | 'caseStudy.secondoryImage.children.children'
  | 'caseStudy.secondoryImage.children.id'
  | 'caseStudy.secondoryImage.commentCount'
  | 'caseStudy.secondoryImage.commentStatus'
  | 'caseStudy.secondoryImage.comments.nodes'
  | 'caseStudy.secondoryImage.contentTypeName'
  | 'caseStudy.secondoryImage.databaseId'
  | 'caseStudy.secondoryImage.date'
  | 'caseStudy.secondoryImage.dateGmt'
  | 'caseStudy.secondoryImage.description'
  | 'caseStudy.secondoryImage.desiredSlug'
  | 'caseStudy.secondoryImage.enclosure'
  | 'caseStudy.secondoryImage.fileSize'
  | 'caseStudy.secondoryImage.filename'
  | 'caseStudy.secondoryImage.filesize'
  | 'caseStudy.secondoryImage.gatsbyImage'
  | 'caseStudy.secondoryImage.guid'
  | 'caseStudy.secondoryImage.height'
  | 'caseStudy.secondoryImage.id'
  | 'caseStudy.secondoryImage.internal.content'
  | 'caseStudy.secondoryImage.internal.contentDigest'
  | 'caseStudy.secondoryImage.internal.contentFilePath'
  | 'caseStudy.secondoryImage.internal.description'
  | 'caseStudy.secondoryImage.internal.fieldOwners'
  | 'caseStudy.secondoryImage.internal.ignoreType'
  | 'caseStudy.secondoryImage.internal.mediaType'
  | 'caseStudy.secondoryImage.internal.owner'
  | 'caseStudy.secondoryImage.internal.type'
  | 'caseStudy.secondoryImage.isContentNode'
  | 'caseStudy.secondoryImage.isTermNode'
  | 'caseStudy.secondoryImage.link'
  | 'caseStudy.secondoryImage.localFile.absolutePath'
  | 'caseStudy.secondoryImage.localFile.accessTime'
  | 'caseStudy.secondoryImage.localFile.atime'
  | 'caseStudy.secondoryImage.localFile.atimeMs'
  | 'caseStudy.secondoryImage.localFile.base'
  | 'caseStudy.secondoryImage.localFile.birthTime'
  | 'caseStudy.secondoryImage.localFile.birthtime'
  | 'caseStudy.secondoryImage.localFile.birthtimeMs'
  | 'caseStudy.secondoryImage.localFile.blksize'
  | 'caseStudy.secondoryImage.localFile.blocks'
  | 'caseStudy.secondoryImage.localFile.changeTime'
  | 'caseStudy.secondoryImage.localFile.children'
  | 'caseStudy.secondoryImage.localFile.childrenImageSharp'
  | 'caseStudy.secondoryImage.localFile.ctime'
  | 'caseStudy.secondoryImage.localFile.ctimeMs'
  | 'caseStudy.secondoryImage.localFile.dev'
  | 'caseStudy.secondoryImage.localFile.dir'
  | 'caseStudy.secondoryImage.localFile.ext'
  | 'caseStudy.secondoryImage.localFile.extension'
  | 'caseStudy.secondoryImage.localFile.gid'
  | 'caseStudy.secondoryImage.localFile.hash'
  | 'caseStudy.secondoryImage.localFile.id'
  | 'caseStudy.secondoryImage.localFile.ino'
  | 'caseStudy.secondoryImage.localFile.mode'
  | 'caseStudy.secondoryImage.localFile.modifiedTime'
  | 'caseStudy.secondoryImage.localFile.mtime'
  | 'caseStudy.secondoryImage.localFile.mtimeMs'
  | 'caseStudy.secondoryImage.localFile.name'
  | 'caseStudy.secondoryImage.localFile.nlink'
  | 'caseStudy.secondoryImage.localFile.prettySize'
  | 'caseStudy.secondoryImage.localFile.publicURL'
  | 'caseStudy.secondoryImage.localFile.rdev'
  | 'caseStudy.secondoryImage.localFile.relativeDirectory'
  | 'caseStudy.secondoryImage.localFile.relativePath'
  | 'caseStudy.secondoryImage.localFile.root'
  | 'caseStudy.secondoryImage.localFile.size'
  | 'caseStudy.secondoryImage.localFile.sourceInstanceName'
  | 'caseStudy.secondoryImage.localFile.uid'
  | 'caseStudy.secondoryImage.mediaDetails.file'
  | 'caseStudy.secondoryImage.mediaDetails.height'
  | 'caseStudy.secondoryImage.mediaDetails.sizes'
  | 'caseStudy.secondoryImage.mediaDetails.width'
  | 'caseStudy.secondoryImage.mediaItemUrl'
  | 'caseStudy.secondoryImage.mediaType'
  | 'caseStudy.secondoryImage.mimeType'
  | 'caseStudy.secondoryImage.modified'
  | 'caseStudy.secondoryImage.modifiedGmt'
  | 'caseStudy.secondoryImage.nodeType'
  | 'caseStudy.secondoryImage.parentDatabaseId'
  | 'caseStudy.secondoryImage.parentId'
  | 'caseStudy.secondoryImage.parent.children'
  | 'caseStudy.secondoryImage.parent.id'
  | 'caseStudy.secondoryImage.publicUrl'
  | 'caseStudy.secondoryImage.remoteFile.absolutePath'
  | 'caseStudy.secondoryImage.remoteFile.accessTime'
  | 'caseStudy.secondoryImage.remoteFile.atime'
  | 'caseStudy.secondoryImage.remoteFile.atimeMs'
  | 'caseStudy.secondoryImage.remoteFile.base'
  | 'caseStudy.secondoryImage.remoteFile.birthTime'
  | 'caseStudy.secondoryImage.remoteFile.birthtime'
  | 'caseStudy.secondoryImage.remoteFile.birthtimeMs'
  | 'caseStudy.secondoryImage.remoteFile.blksize'
  | 'caseStudy.secondoryImage.remoteFile.blocks'
  | 'caseStudy.secondoryImage.remoteFile.changeTime'
  | 'caseStudy.secondoryImage.remoteFile.children'
  | 'caseStudy.secondoryImage.remoteFile.childrenImageSharp'
  | 'caseStudy.secondoryImage.remoteFile.ctime'
  | 'caseStudy.secondoryImage.remoteFile.ctimeMs'
  | 'caseStudy.secondoryImage.remoteFile.dev'
  | 'caseStudy.secondoryImage.remoteFile.dir'
  | 'caseStudy.secondoryImage.remoteFile.ext'
  | 'caseStudy.secondoryImage.remoteFile.extension'
  | 'caseStudy.secondoryImage.remoteFile.gid'
  | 'caseStudy.secondoryImage.remoteFile.hash'
  | 'caseStudy.secondoryImage.remoteFile.id'
  | 'caseStudy.secondoryImage.remoteFile.ino'
  | 'caseStudy.secondoryImage.remoteFile.mode'
  | 'caseStudy.secondoryImage.remoteFile.modifiedTime'
  | 'caseStudy.secondoryImage.remoteFile.mtime'
  | 'caseStudy.secondoryImage.remoteFile.mtimeMs'
  | 'caseStudy.secondoryImage.remoteFile.name'
  | 'caseStudy.secondoryImage.remoteFile.nlink'
  | 'caseStudy.secondoryImage.remoteFile.prettySize'
  | 'caseStudy.secondoryImage.remoteFile.publicURL'
  | 'caseStudy.secondoryImage.remoteFile.rdev'
  | 'caseStudy.secondoryImage.remoteFile.relativeDirectory'
  | 'caseStudy.secondoryImage.remoteFile.relativePath'
  | 'caseStudy.secondoryImage.remoteFile.root'
  | 'caseStudy.secondoryImage.remoteFile.size'
  | 'caseStudy.secondoryImage.remoteFile.sourceInstanceName'
  | 'caseStudy.secondoryImage.remoteFile.uid'
  | 'caseStudy.secondoryImage.resize.height'
  | 'caseStudy.secondoryImage.resize.src'
  | 'caseStudy.secondoryImage.resize.width'
  | 'caseStudy.secondoryImage.seo.breadcrumbs'
  | 'caseStudy.secondoryImage.seo.canonical'
  | 'caseStudy.secondoryImage.seo.cornerstone'
  | 'caseStudy.secondoryImage.seo.focuskw'
  | 'caseStudy.secondoryImage.seo.fullHead'
  | 'caseStudy.secondoryImage.seo.metaDesc'
  | 'caseStudy.secondoryImage.seo.metaKeywords'
  | 'caseStudy.secondoryImage.seo.metaRobotsNofollow'
  | 'caseStudy.secondoryImage.seo.metaRobotsNoindex'
  | 'caseStudy.secondoryImage.seo.opengraphAuthor'
  | 'caseStudy.secondoryImage.seo.opengraphDescription'
  | 'caseStudy.secondoryImage.seo.opengraphModifiedTime'
  | 'caseStudy.secondoryImage.seo.opengraphPublishedTime'
  | 'caseStudy.secondoryImage.seo.opengraphPublisher'
  | 'caseStudy.secondoryImage.seo.opengraphSiteName'
  | 'caseStudy.secondoryImage.seo.opengraphTitle'
  | 'caseStudy.secondoryImage.seo.opengraphType'
  | 'caseStudy.secondoryImage.seo.opengraphUrl'
  | 'caseStudy.secondoryImage.seo.readingTime'
  | 'caseStudy.secondoryImage.seo.title'
  | 'caseStudy.secondoryImage.seo.twitterDescription'
  | 'caseStudy.secondoryImage.seo.twitterTitle'
  | 'caseStudy.secondoryImage.sizes'
  | 'caseStudy.secondoryImage.slug'
  | 'caseStudy.secondoryImage.sourceUrl'
  | 'caseStudy.secondoryImage.srcSet'
  | 'caseStudy.secondoryImage.status'
  | 'caseStudy.secondoryImage.template.templateName'
  | 'caseStudy.secondoryImage.title'
  | 'caseStudy.secondoryImage.uri'
  | 'caseStudy.secondoryImage.width'
  | 'caseStudy.secondoryImage.wpChildren.nodes'
  | 'caseStudy.strategy'
  | 'caseStudy.technology'
  | 'caseStudy.technology.fieldGroupName'
  | 'caseStudy.technology.name'
  | 'caseStudy.technology.svgIcon'
  | 'caseStudy.type'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'content'
  | 'contentTypeName'
  | 'contentType.node.archivePath'
  | 'contentType.node.canExport'
  | 'contentType.node.children'
  | 'contentType.node.children.children'
  | 'contentType.node.children.id'
  | 'contentType.node.connectedTaxonomies.nodes'
  | 'contentType.node.contentNodes.nodes'
  | 'contentType.node.deleteWithUser'
  | 'contentType.node.description'
  | 'contentType.node.excludeFromSearch'
  | 'contentType.node.graphqlPluralName'
  | 'contentType.node.graphqlSingleName'
  | 'contentType.node.hasArchive'
  | 'contentType.node.hierarchical'
  | 'contentType.node.id'
  | 'contentType.node.internal.content'
  | 'contentType.node.internal.contentDigest'
  | 'contentType.node.internal.contentFilePath'
  | 'contentType.node.internal.description'
  | 'contentType.node.internal.fieldOwners'
  | 'contentType.node.internal.ignoreType'
  | 'contentType.node.internal.mediaType'
  | 'contentType.node.internal.owner'
  | 'contentType.node.internal.type'
  | 'contentType.node.isContentNode'
  | 'contentType.node.isFrontPage'
  | 'contentType.node.isPostsPage'
  | 'contentType.node.isTermNode'
  | 'contentType.node.label'
  | 'contentType.node.labels.addNew'
  | 'contentType.node.labels.addNewItem'
  | 'contentType.node.labels.allItems'
  | 'contentType.node.labels.archives'
  | 'contentType.node.labels.attributes'
  | 'contentType.node.labels.editItem'
  | 'contentType.node.labels.featuredImage'
  | 'contentType.node.labels.filterItemsList'
  | 'contentType.node.labels.insertIntoItem'
  | 'contentType.node.labels.itemsList'
  | 'contentType.node.labels.itemsListNavigation'
  | 'contentType.node.labels.menuName'
  | 'contentType.node.labels.name'
  | 'contentType.node.labels.newItem'
  | 'contentType.node.labels.notFound'
  | 'contentType.node.labels.notFoundInTrash'
  | 'contentType.node.labels.parentItemColon'
  | 'contentType.node.labels.removeFeaturedImage'
  | 'contentType.node.labels.searchItems'
  | 'contentType.node.labels.setFeaturedImage'
  | 'contentType.node.labels.singularName'
  | 'contentType.node.labels.uploadedToThisItem'
  | 'contentType.node.labels.useFeaturedImage'
  | 'contentType.node.labels.viewItem'
  | 'contentType.node.labels.viewItems'
  | 'contentType.node.menuIcon'
  | 'contentType.node.menuPosition'
  | 'contentType.node.name'
  | 'contentType.node.nodeType'
  | 'contentType.node.parent.children'
  | 'contentType.node.parent.id'
  | 'contentType.node.public'
  | 'contentType.node.publiclyQueryable'
  | 'contentType.node.restBase'
  | 'contentType.node.restControllerClass'
  | 'contentType.node.showInAdminBar'
  | 'contentType.node.showInGraphql'
  | 'contentType.node.showInMenu'
  | 'contentType.node.showInNavMenus'
  | 'contentType.node.showInRest'
  | 'contentType.node.showUi'
  | 'contentType.node.uri'
  | 'databaseId'
  | 'date'
  | 'dateGmt'
  | 'desiredSlug'
  | 'enclosure'
  | 'featuredImageDatabaseId'
  | 'featuredImageId'
  | 'featuredImage.node.altText'
  | 'featuredImage.node.ancestors.nodes'
  | 'featuredImage.node.authorDatabaseId'
  | 'featuredImage.node.authorId'
  | 'featuredImage.node.caption'
  | 'featuredImage.node.children'
  | 'featuredImage.node.children.children'
  | 'featuredImage.node.children.id'
  | 'featuredImage.node.commentCount'
  | 'featuredImage.node.commentStatus'
  | 'featuredImage.node.comments.nodes'
  | 'featuredImage.node.contentTypeName'
  | 'featuredImage.node.databaseId'
  | 'featuredImage.node.date'
  | 'featuredImage.node.dateGmt'
  | 'featuredImage.node.description'
  | 'featuredImage.node.desiredSlug'
  | 'featuredImage.node.enclosure'
  | 'featuredImage.node.fileSize'
  | 'featuredImage.node.filename'
  | 'featuredImage.node.filesize'
  | 'featuredImage.node.gatsbyImage'
  | 'featuredImage.node.guid'
  | 'featuredImage.node.height'
  | 'featuredImage.node.id'
  | 'featuredImage.node.internal.content'
  | 'featuredImage.node.internal.contentDigest'
  | 'featuredImage.node.internal.contentFilePath'
  | 'featuredImage.node.internal.description'
  | 'featuredImage.node.internal.fieldOwners'
  | 'featuredImage.node.internal.ignoreType'
  | 'featuredImage.node.internal.mediaType'
  | 'featuredImage.node.internal.owner'
  | 'featuredImage.node.internal.type'
  | 'featuredImage.node.isContentNode'
  | 'featuredImage.node.isTermNode'
  | 'featuredImage.node.link'
  | 'featuredImage.node.localFile.absolutePath'
  | 'featuredImage.node.localFile.accessTime'
  | 'featuredImage.node.localFile.atime'
  | 'featuredImage.node.localFile.atimeMs'
  | 'featuredImage.node.localFile.base'
  | 'featuredImage.node.localFile.birthTime'
  | 'featuredImage.node.localFile.birthtime'
  | 'featuredImage.node.localFile.birthtimeMs'
  | 'featuredImage.node.localFile.blksize'
  | 'featuredImage.node.localFile.blocks'
  | 'featuredImage.node.localFile.changeTime'
  | 'featuredImage.node.localFile.children'
  | 'featuredImage.node.localFile.childrenImageSharp'
  | 'featuredImage.node.localFile.ctime'
  | 'featuredImage.node.localFile.ctimeMs'
  | 'featuredImage.node.localFile.dev'
  | 'featuredImage.node.localFile.dir'
  | 'featuredImage.node.localFile.ext'
  | 'featuredImage.node.localFile.extension'
  | 'featuredImage.node.localFile.gid'
  | 'featuredImage.node.localFile.hash'
  | 'featuredImage.node.localFile.id'
  | 'featuredImage.node.localFile.ino'
  | 'featuredImage.node.localFile.mode'
  | 'featuredImage.node.localFile.modifiedTime'
  | 'featuredImage.node.localFile.mtime'
  | 'featuredImage.node.localFile.mtimeMs'
  | 'featuredImage.node.localFile.name'
  | 'featuredImage.node.localFile.nlink'
  | 'featuredImage.node.localFile.prettySize'
  | 'featuredImage.node.localFile.publicURL'
  | 'featuredImage.node.localFile.rdev'
  | 'featuredImage.node.localFile.relativeDirectory'
  | 'featuredImage.node.localFile.relativePath'
  | 'featuredImage.node.localFile.root'
  | 'featuredImage.node.localFile.size'
  | 'featuredImage.node.localFile.sourceInstanceName'
  | 'featuredImage.node.localFile.uid'
  | 'featuredImage.node.mediaDetails.file'
  | 'featuredImage.node.mediaDetails.height'
  | 'featuredImage.node.mediaDetails.sizes'
  | 'featuredImage.node.mediaDetails.width'
  | 'featuredImage.node.mediaItemUrl'
  | 'featuredImage.node.mediaType'
  | 'featuredImage.node.mimeType'
  | 'featuredImage.node.modified'
  | 'featuredImage.node.modifiedGmt'
  | 'featuredImage.node.nodeType'
  | 'featuredImage.node.parentDatabaseId'
  | 'featuredImage.node.parentId'
  | 'featuredImage.node.parent.children'
  | 'featuredImage.node.parent.id'
  | 'featuredImage.node.publicUrl'
  | 'featuredImage.node.remoteFile.absolutePath'
  | 'featuredImage.node.remoteFile.accessTime'
  | 'featuredImage.node.remoteFile.atime'
  | 'featuredImage.node.remoteFile.atimeMs'
  | 'featuredImage.node.remoteFile.base'
  | 'featuredImage.node.remoteFile.birthTime'
  | 'featuredImage.node.remoteFile.birthtime'
  | 'featuredImage.node.remoteFile.birthtimeMs'
  | 'featuredImage.node.remoteFile.blksize'
  | 'featuredImage.node.remoteFile.blocks'
  | 'featuredImage.node.remoteFile.changeTime'
  | 'featuredImage.node.remoteFile.children'
  | 'featuredImage.node.remoteFile.childrenImageSharp'
  | 'featuredImage.node.remoteFile.ctime'
  | 'featuredImage.node.remoteFile.ctimeMs'
  | 'featuredImage.node.remoteFile.dev'
  | 'featuredImage.node.remoteFile.dir'
  | 'featuredImage.node.remoteFile.ext'
  | 'featuredImage.node.remoteFile.extension'
  | 'featuredImage.node.remoteFile.gid'
  | 'featuredImage.node.remoteFile.hash'
  | 'featuredImage.node.remoteFile.id'
  | 'featuredImage.node.remoteFile.ino'
  | 'featuredImage.node.remoteFile.mode'
  | 'featuredImage.node.remoteFile.modifiedTime'
  | 'featuredImage.node.remoteFile.mtime'
  | 'featuredImage.node.remoteFile.mtimeMs'
  | 'featuredImage.node.remoteFile.name'
  | 'featuredImage.node.remoteFile.nlink'
  | 'featuredImage.node.remoteFile.prettySize'
  | 'featuredImage.node.remoteFile.publicURL'
  | 'featuredImage.node.remoteFile.rdev'
  | 'featuredImage.node.remoteFile.relativeDirectory'
  | 'featuredImage.node.remoteFile.relativePath'
  | 'featuredImage.node.remoteFile.root'
  | 'featuredImage.node.remoteFile.size'
  | 'featuredImage.node.remoteFile.sourceInstanceName'
  | 'featuredImage.node.remoteFile.uid'
  | 'featuredImage.node.resize.height'
  | 'featuredImage.node.resize.src'
  | 'featuredImage.node.resize.width'
  | 'featuredImage.node.seo.breadcrumbs'
  | 'featuredImage.node.seo.canonical'
  | 'featuredImage.node.seo.cornerstone'
  | 'featuredImage.node.seo.focuskw'
  | 'featuredImage.node.seo.fullHead'
  | 'featuredImage.node.seo.metaDesc'
  | 'featuredImage.node.seo.metaKeywords'
  | 'featuredImage.node.seo.metaRobotsNofollow'
  | 'featuredImage.node.seo.metaRobotsNoindex'
  | 'featuredImage.node.seo.opengraphAuthor'
  | 'featuredImage.node.seo.opengraphDescription'
  | 'featuredImage.node.seo.opengraphModifiedTime'
  | 'featuredImage.node.seo.opengraphPublishedTime'
  | 'featuredImage.node.seo.opengraphPublisher'
  | 'featuredImage.node.seo.opengraphSiteName'
  | 'featuredImage.node.seo.opengraphTitle'
  | 'featuredImage.node.seo.opengraphType'
  | 'featuredImage.node.seo.opengraphUrl'
  | 'featuredImage.node.seo.readingTime'
  | 'featuredImage.node.seo.title'
  | 'featuredImage.node.seo.twitterDescription'
  | 'featuredImage.node.seo.twitterTitle'
  | 'featuredImage.node.sizes'
  | 'featuredImage.node.slug'
  | 'featuredImage.node.sourceUrl'
  | 'featuredImage.node.srcSet'
  | 'featuredImage.node.status'
  | 'featuredImage.node.template.templateName'
  | 'featuredImage.node.title'
  | 'featuredImage.node.uri'
  | 'featuredImage.node.width'
  | 'featuredImage.node.wpChildren.nodes'
  | 'guid'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'lastEditedBy.node.authorProfile.fieldGroupName'
  | 'lastEditedBy.node.avatar.default'
  | 'lastEditedBy.node.avatar.extraAttr'
  | 'lastEditedBy.node.avatar.forceDefault'
  | 'lastEditedBy.node.avatar.foundAvatar'
  | 'lastEditedBy.node.avatar.height'
  | 'lastEditedBy.node.avatar.rating'
  | 'lastEditedBy.node.avatar.scheme'
  | 'lastEditedBy.node.avatar.size'
  | 'lastEditedBy.node.avatar.url'
  | 'lastEditedBy.node.avatar.width'
  | 'lastEditedBy.node.capKey'
  | 'lastEditedBy.node.capabilities'
  | 'lastEditedBy.node.children'
  | 'lastEditedBy.node.children.children'
  | 'lastEditedBy.node.children.id'
  | 'lastEditedBy.node.comments.nodes'
  | 'lastEditedBy.node.databaseId'
  | 'lastEditedBy.node.description'
  | 'lastEditedBy.node.email'
  | 'lastEditedBy.node.extraCapabilities'
  | 'lastEditedBy.node.firstName'
  | 'lastEditedBy.node.id'
  | 'lastEditedBy.node.internal.content'
  | 'lastEditedBy.node.internal.contentDigest'
  | 'lastEditedBy.node.internal.contentFilePath'
  | 'lastEditedBy.node.internal.description'
  | 'lastEditedBy.node.internal.fieldOwners'
  | 'lastEditedBy.node.internal.ignoreType'
  | 'lastEditedBy.node.internal.mediaType'
  | 'lastEditedBy.node.internal.owner'
  | 'lastEditedBy.node.internal.type'
  | 'lastEditedBy.node.isContentNode'
  | 'lastEditedBy.node.isTermNode'
  | 'lastEditedBy.node.lastName'
  | 'lastEditedBy.node.locale'
  | 'lastEditedBy.node.name'
  | 'lastEditedBy.node.nicename'
  | 'lastEditedBy.node.nickname'
  | 'lastEditedBy.node.nodeType'
  | 'lastEditedBy.node.pages.nodes'
  | 'lastEditedBy.node.parent.children'
  | 'lastEditedBy.node.parent.id'
  | 'lastEditedBy.node.posts.nodes'
  | 'lastEditedBy.node.registeredDate'
  | 'lastEditedBy.node.roles.nodes'
  | 'lastEditedBy.node.seo.breadcrumbTitle'
  | 'lastEditedBy.node.seo.canonical'
  | 'lastEditedBy.node.seo.fullHead'
  | 'lastEditedBy.node.seo.language'
  | 'lastEditedBy.node.seo.metaDesc'
  | 'lastEditedBy.node.seo.metaRobotsNofollow'
  | 'lastEditedBy.node.seo.metaRobotsNoindex'
  | 'lastEditedBy.node.seo.opengraphDescription'
  | 'lastEditedBy.node.seo.opengraphTitle'
  | 'lastEditedBy.node.seo.region'
  | 'lastEditedBy.node.seo.title'
  | 'lastEditedBy.node.seo.twitterDescription'
  | 'lastEditedBy.node.seo.twitterTitle'
  | 'lastEditedBy.node.slug'
  | 'lastEditedBy.node.uri'
  | 'lastEditedBy.node.url'
  | 'lastEditedBy.node.username'
  | 'link'
  | 'modified'
  | 'modifiedGmt'
  | 'newCaseStudy.detailPageImage.altText'
  | 'newCaseStudy.detailPageImage.ancestors.nodes'
  | 'newCaseStudy.detailPageImage.authorDatabaseId'
  | 'newCaseStudy.detailPageImage.authorId'
  | 'newCaseStudy.detailPageImage.caption'
  | 'newCaseStudy.detailPageImage.children'
  | 'newCaseStudy.detailPageImage.children.children'
  | 'newCaseStudy.detailPageImage.children.id'
  | 'newCaseStudy.detailPageImage.commentCount'
  | 'newCaseStudy.detailPageImage.commentStatus'
  | 'newCaseStudy.detailPageImage.comments.nodes'
  | 'newCaseStudy.detailPageImage.contentTypeName'
  | 'newCaseStudy.detailPageImage.databaseId'
  | 'newCaseStudy.detailPageImage.date'
  | 'newCaseStudy.detailPageImage.dateGmt'
  | 'newCaseStudy.detailPageImage.description'
  | 'newCaseStudy.detailPageImage.desiredSlug'
  | 'newCaseStudy.detailPageImage.enclosure'
  | 'newCaseStudy.detailPageImage.fileSize'
  | 'newCaseStudy.detailPageImage.filename'
  | 'newCaseStudy.detailPageImage.filesize'
  | 'newCaseStudy.detailPageImage.gatsbyImage'
  | 'newCaseStudy.detailPageImage.guid'
  | 'newCaseStudy.detailPageImage.height'
  | 'newCaseStudy.detailPageImage.id'
  | 'newCaseStudy.detailPageImage.internal.content'
  | 'newCaseStudy.detailPageImage.internal.contentDigest'
  | 'newCaseStudy.detailPageImage.internal.contentFilePath'
  | 'newCaseStudy.detailPageImage.internal.description'
  | 'newCaseStudy.detailPageImage.internal.fieldOwners'
  | 'newCaseStudy.detailPageImage.internal.ignoreType'
  | 'newCaseStudy.detailPageImage.internal.mediaType'
  | 'newCaseStudy.detailPageImage.internal.owner'
  | 'newCaseStudy.detailPageImage.internal.type'
  | 'newCaseStudy.detailPageImage.isContentNode'
  | 'newCaseStudy.detailPageImage.isTermNode'
  | 'newCaseStudy.detailPageImage.link'
  | 'newCaseStudy.detailPageImage.localFile.absolutePath'
  | 'newCaseStudy.detailPageImage.localFile.accessTime'
  | 'newCaseStudy.detailPageImage.localFile.atime'
  | 'newCaseStudy.detailPageImage.localFile.atimeMs'
  | 'newCaseStudy.detailPageImage.localFile.base'
  | 'newCaseStudy.detailPageImage.localFile.birthTime'
  | 'newCaseStudy.detailPageImage.localFile.birthtime'
  | 'newCaseStudy.detailPageImage.localFile.birthtimeMs'
  | 'newCaseStudy.detailPageImage.localFile.blksize'
  | 'newCaseStudy.detailPageImage.localFile.blocks'
  | 'newCaseStudy.detailPageImage.localFile.changeTime'
  | 'newCaseStudy.detailPageImage.localFile.children'
  | 'newCaseStudy.detailPageImage.localFile.childrenImageSharp'
  | 'newCaseStudy.detailPageImage.localFile.ctime'
  | 'newCaseStudy.detailPageImage.localFile.ctimeMs'
  | 'newCaseStudy.detailPageImage.localFile.dev'
  | 'newCaseStudy.detailPageImage.localFile.dir'
  | 'newCaseStudy.detailPageImage.localFile.ext'
  | 'newCaseStudy.detailPageImage.localFile.extension'
  | 'newCaseStudy.detailPageImage.localFile.gid'
  | 'newCaseStudy.detailPageImage.localFile.hash'
  | 'newCaseStudy.detailPageImage.localFile.id'
  | 'newCaseStudy.detailPageImage.localFile.ino'
  | 'newCaseStudy.detailPageImage.localFile.mode'
  | 'newCaseStudy.detailPageImage.localFile.modifiedTime'
  | 'newCaseStudy.detailPageImage.localFile.mtime'
  | 'newCaseStudy.detailPageImage.localFile.mtimeMs'
  | 'newCaseStudy.detailPageImage.localFile.name'
  | 'newCaseStudy.detailPageImage.localFile.nlink'
  | 'newCaseStudy.detailPageImage.localFile.prettySize'
  | 'newCaseStudy.detailPageImage.localFile.publicURL'
  | 'newCaseStudy.detailPageImage.localFile.rdev'
  | 'newCaseStudy.detailPageImage.localFile.relativeDirectory'
  | 'newCaseStudy.detailPageImage.localFile.relativePath'
  | 'newCaseStudy.detailPageImage.localFile.root'
  | 'newCaseStudy.detailPageImage.localFile.size'
  | 'newCaseStudy.detailPageImage.localFile.sourceInstanceName'
  | 'newCaseStudy.detailPageImage.localFile.uid'
  | 'newCaseStudy.detailPageImage.mediaDetails.file'
  | 'newCaseStudy.detailPageImage.mediaDetails.height'
  | 'newCaseStudy.detailPageImage.mediaDetails.sizes'
  | 'newCaseStudy.detailPageImage.mediaDetails.width'
  | 'newCaseStudy.detailPageImage.mediaItemUrl'
  | 'newCaseStudy.detailPageImage.mediaType'
  | 'newCaseStudy.detailPageImage.mimeType'
  | 'newCaseStudy.detailPageImage.modified'
  | 'newCaseStudy.detailPageImage.modifiedGmt'
  | 'newCaseStudy.detailPageImage.nodeType'
  | 'newCaseStudy.detailPageImage.parentDatabaseId'
  | 'newCaseStudy.detailPageImage.parentId'
  | 'newCaseStudy.detailPageImage.parent.children'
  | 'newCaseStudy.detailPageImage.parent.id'
  | 'newCaseStudy.detailPageImage.publicUrl'
  | 'newCaseStudy.detailPageImage.remoteFile.absolutePath'
  | 'newCaseStudy.detailPageImage.remoteFile.accessTime'
  | 'newCaseStudy.detailPageImage.remoteFile.atime'
  | 'newCaseStudy.detailPageImage.remoteFile.atimeMs'
  | 'newCaseStudy.detailPageImage.remoteFile.base'
  | 'newCaseStudy.detailPageImage.remoteFile.birthTime'
  | 'newCaseStudy.detailPageImage.remoteFile.birthtime'
  | 'newCaseStudy.detailPageImage.remoteFile.birthtimeMs'
  | 'newCaseStudy.detailPageImage.remoteFile.blksize'
  | 'newCaseStudy.detailPageImage.remoteFile.blocks'
  | 'newCaseStudy.detailPageImage.remoteFile.changeTime'
  | 'newCaseStudy.detailPageImage.remoteFile.children'
  | 'newCaseStudy.detailPageImage.remoteFile.childrenImageSharp'
  | 'newCaseStudy.detailPageImage.remoteFile.ctime'
  | 'newCaseStudy.detailPageImage.remoteFile.ctimeMs'
  | 'newCaseStudy.detailPageImage.remoteFile.dev'
  | 'newCaseStudy.detailPageImage.remoteFile.dir'
  | 'newCaseStudy.detailPageImage.remoteFile.ext'
  | 'newCaseStudy.detailPageImage.remoteFile.extension'
  | 'newCaseStudy.detailPageImage.remoteFile.gid'
  | 'newCaseStudy.detailPageImage.remoteFile.hash'
  | 'newCaseStudy.detailPageImage.remoteFile.id'
  | 'newCaseStudy.detailPageImage.remoteFile.ino'
  | 'newCaseStudy.detailPageImage.remoteFile.mode'
  | 'newCaseStudy.detailPageImage.remoteFile.modifiedTime'
  | 'newCaseStudy.detailPageImage.remoteFile.mtime'
  | 'newCaseStudy.detailPageImage.remoteFile.mtimeMs'
  | 'newCaseStudy.detailPageImage.remoteFile.name'
  | 'newCaseStudy.detailPageImage.remoteFile.nlink'
  | 'newCaseStudy.detailPageImage.remoteFile.prettySize'
  | 'newCaseStudy.detailPageImage.remoteFile.publicURL'
  | 'newCaseStudy.detailPageImage.remoteFile.rdev'
  | 'newCaseStudy.detailPageImage.remoteFile.relativeDirectory'
  | 'newCaseStudy.detailPageImage.remoteFile.relativePath'
  | 'newCaseStudy.detailPageImage.remoteFile.root'
  | 'newCaseStudy.detailPageImage.remoteFile.size'
  | 'newCaseStudy.detailPageImage.remoteFile.sourceInstanceName'
  | 'newCaseStudy.detailPageImage.remoteFile.uid'
  | 'newCaseStudy.detailPageImage.resize.height'
  | 'newCaseStudy.detailPageImage.resize.src'
  | 'newCaseStudy.detailPageImage.resize.width'
  | 'newCaseStudy.detailPageImage.seo.breadcrumbs'
  | 'newCaseStudy.detailPageImage.seo.canonical'
  | 'newCaseStudy.detailPageImage.seo.cornerstone'
  | 'newCaseStudy.detailPageImage.seo.focuskw'
  | 'newCaseStudy.detailPageImage.seo.fullHead'
  | 'newCaseStudy.detailPageImage.seo.metaDesc'
  | 'newCaseStudy.detailPageImage.seo.metaKeywords'
  | 'newCaseStudy.detailPageImage.seo.metaRobotsNofollow'
  | 'newCaseStudy.detailPageImage.seo.metaRobotsNoindex'
  | 'newCaseStudy.detailPageImage.seo.opengraphAuthor'
  | 'newCaseStudy.detailPageImage.seo.opengraphDescription'
  | 'newCaseStudy.detailPageImage.seo.opengraphModifiedTime'
  | 'newCaseStudy.detailPageImage.seo.opengraphPublishedTime'
  | 'newCaseStudy.detailPageImage.seo.opengraphPublisher'
  | 'newCaseStudy.detailPageImage.seo.opengraphSiteName'
  | 'newCaseStudy.detailPageImage.seo.opengraphTitle'
  | 'newCaseStudy.detailPageImage.seo.opengraphType'
  | 'newCaseStudy.detailPageImage.seo.opengraphUrl'
  | 'newCaseStudy.detailPageImage.seo.readingTime'
  | 'newCaseStudy.detailPageImage.seo.title'
  | 'newCaseStudy.detailPageImage.seo.twitterDescription'
  | 'newCaseStudy.detailPageImage.seo.twitterTitle'
  | 'newCaseStudy.detailPageImage.sizes'
  | 'newCaseStudy.detailPageImage.slug'
  | 'newCaseStudy.detailPageImage.sourceUrl'
  | 'newCaseStudy.detailPageImage.srcSet'
  | 'newCaseStudy.detailPageImage.status'
  | 'newCaseStudy.detailPageImage.template.templateName'
  | 'newCaseStudy.detailPageImage.title'
  | 'newCaseStudy.detailPageImage.uri'
  | 'newCaseStudy.detailPageImage.width'
  | 'newCaseStudy.detailPageImage.wpChildren.nodes'
  | 'newCaseStudy.fieldGroupName'
  | 'newCaseStudy.newCaseStudy'
  | 'newCaseStudy.ppcPage.altText'
  | 'newCaseStudy.ppcPage.ancestors.nodes'
  | 'newCaseStudy.ppcPage.authorDatabaseId'
  | 'newCaseStudy.ppcPage.authorId'
  | 'newCaseStudy.ppcPage.caption'
  | 'newCaseStudy.ppcPage.children'
  | 'newCaseStudy.ppcPage.children.children'
  | 'newCaseStudy.ppcPage.children.id'
  | 'newCaseStudy.ppcPage.commentCount'
  | 'newCaseStudy.ppcPage.commentStatus'
  | 'newCaseStudy.ppcPage.comments.nodes'
  | 'newCaseStudy.ppcPage.contentTypeName'
  | 'newCaseStudy.ppcPage.databaseId'
  | 'newCaseStudy.ppcPage.date'
  | 'newCaseStudy.ppcPage.dateGmt'
  | 'newCaseStudy.ppcPage.description'
  | 'newCaseStudy.ppcPage.desiredSlug'
  | 'newCaseStudy.ppcPage.enclosure'
  | 'newCaseStudy.ppcPage.fileSize'
  | 'newCaseStudy.ppcPage.filename'
  | 'newCaseStudy.ppcPage.filesize'
  | 'newCaseStudy.ppcPage.gatsbyImage'
  | 'newCaseStudy.ppcPage.guid'
  | 'newCaseStudy.ppcPage.height'
  | 'newCaseStudy.ppcPage.id'
  | 'newCaseStudy.ppcPage.internal.content'
  | 'newCaseStudy.ppcPage.internal.contentDigest'
  | 'newCaseStudy.ppcPage.internal.contentFilePath'
  | 'newCaseStudy.ppcPage.internal.description'
  | 'newCaseStudy.ppcPage.internal.fieldOwners'
  | 'newCaseStudy.ppcPage.internal.ignoreType'
  | 'newCaseStudy.ppcPage.internal.mediaType'
  | 'newCaseStudy.ppcPage.internal.owner'
  | 'newCaseStudy.ppcPage.internal.type'
  | 'newCaseStudy.ppcPage.isContentNode'
  | 'newCaseStudy.ppcPage.isTermNode'
  | 'newCaseStudy.ppcPage.link'
  | 'newCaseStudy.ppcPage.localFile.absolutePath'
  | 'newCaseStudy.ppcPage.localFile.accessTime'
  | 'newCaseStudy.ppcPage.localFile.atime'
  | 'newCaseStudy.ppcPage.localFile.atimeMs'
  | 'newCaseStudy.ppcPage.localFile.base'
  | 'newCaseStudy.ppcPage.localFile.birthTime'
  | 'newCaseStudy.ppcPage.localFile.birthtime'
  | 'newCaseStudy.ppcPage.localFile.birthtimeMs'
  | 'newCaseStudy.ppcPage.localFile.blksize'
  | 'newCaseStudy.ppcPage.localFile.blocks'
  | 'newCaseStudy.ppcPage.localFile.changeTime'
  | 'newCaseStudy.ppcPage.localFile.children'
  | 'newCaseStudy.ppcPage.localFile.childrenImageSharp'
  | 'newCaseStudy.ppcPage.localFile.ctime'
  | 'newCaseStudy.ppcPage.localFile.ctimeMs'
  | 'newCaseStudy.ppcPage.localFile.dev'
  | 'newCaseStudy.ppcPage.localFile.dir'
  | 'newCaseStudy.ppcPage.localFile.ext'
  | 'newCaseStudy.ppcPage.localFile.extension'
  | 'newCaseStudy.ppcPage.localFile.gid'
  | 'newCaseStudy.ppcPage.localFile.hash'
  | 'newCaseStudy.ppcPage.localFile.id'
  | 'newCaseStudy.ppcPage.localFile.ino'
  | 'newCaseStudy.ppcPage.localFile.mode'
  | 'newCaseStudy.ppcPage.localFile.modifiedTime'
  | 'newCaseStudy.ppcPage.localFile.mtime'
  | 'newCaseStudy.ppcPage.localFile.mtimeMs'
  | 'newCaseStudy.ppcPage.localFile.name'
  | 'newCaseStudy.ppcPage.localFile.nlink'
  | 'newCaseStudy.ppcPage.localFile.prettySize'
  | 'newCaseStudy.ppcPage.localFile.publicURL'
  | 'newCaseStudy.ppcPage.localFile.rdev'
  | 'newCaseStudy.ppcPage.localFile.relativeDirectory'
  | 'newCaseStudy.ppcPage.localFile.relativePath'
  | 'newCaseStudy.ppcPage.localFile.root'
  | 'newCaseStudy.ppcPage.localFile.size'
  | 'newCaseStudy.ppcPage.localFile.sourceInstanceName'
  | 'newCaseStudy.ppcPage.localFile.uid'
  | 'newCaseStudy.ppcPage.mediaDetails.file'
  | 'newCaseStudy.ppcPage.mediaDetails.height'
  | 'newCaseStudy.ppcPage.mediaDetails.sizes'
  | 'newCaseStudy.ppcPage.mediaDetails.width'
  | 'newCaseStudy.ppcPage.mediaItemUrl'
  | 'newCaseStudy.ppcPage.mediaType'
  | 'newCaseStudy.ppcPage.mimeType'
  | 'newCaseStudy.ppcPage.modified'
  | 'newCaseStudy.ppcPage.modifiedGmt'
  | 'newCaseStudy.ppcPage.nodeType'
  | 'newCaseStudy.ppcPage.parentDatabaseId'
  | 'newCaseStudy.ppcPage.parentId'
  | 'newCaseStudy.ppcPage.parent.children'
  | 'newCaseStudy.ppcPage.parent.id'
  | 'newCaseStudy.ppcPage.publicUrl'
  | 'newCaseStudy.ppcPage.remoteFile.absolutePath'
  | 'newCaseStudy.ppcPage.remoteFile.accessTime'
  | 'newCaseStudy.ppcPage.remoteFile.atime'
  | 'newCaseStudy.ppcPage.remoteFile.atimeMs'
  | 'newCaseStudy.ppcPage.remoteFile.base'
  | 'newCaseStudy.ppcPage.remoteFile.birthTime'
  | 'newCaseStudy.ppcPage.remoteFile.birthtime'
  | 'newCaseStudy.ppcPage.remoteFile.birthtimeMs'
  | 'newCaseStudy.ppcPage.remoteFile.blksize'
  | 'newCaseStudy.ppcPage.remoteFile.blocks'
  | 'newCaseStudy.ppcPage.remoteFile.changeTime'
  | 'newCaseStudy.ppcPage.remoteFile.children'
  | 'newCaseStudy.ppcPage.remoteFile.childrenImageSharp'
  | 'newCaseStudy.ppcPage.remoteFile.ctime'
  | 'newCaseStudy.ppcPage.remoteFile.ctimeMs'
  | 'newCaseStudy.ppcPage.remoteFile.dev'
  | 'newCaseStudy.ppcPage.remoteFile.dir'
  | 'newCaseStudy.ppcPage.remoteFile.ext'
  | 'newCaseStudy.ppcPage.remoteFile.extension'
  | 'newCaseStudy.ppcPage.remoteFile.gid'
  | 'newCaseStudy.ppcPage.remoteFile.hash'
  | 'newCaseStudy.ppcPage.remoteFile.id'
  | 'newCaseStudy.ppcPage.remoteFile.ino'
  | 'newCaseStudy.ppcPage.remoteFile.mode'
  | 'newCaseStudy.ppcPage.remoteFile.modifiedTime'
  | 'newCaseStudy.ppcPage.remoteFile.mtime'
  | 'newCaseStudy.ppcPage.remoteFile.mtimeMs'
  | 'newCaseStudy.ppcPage.remoteFile.name'
  | 'newCaseStudy.ppcPage.remoteFile.nlink'
  | 'newCaseStudy.ppcPage.remoteFile.prettySize'
  | 'newCaseStudy.ppcPage.remoteFile.publicURL'
  | 'newCaseStudy.ppcPage.remoteFile.rdev'
  | 'newCaseStudy.ppcPage.remoteFile.relativeDirectory'
  | 'newCaseStudy.ppcPage.remoteFile.relativePath'
  | 'newCaseStudy.ppcPage.remoteFile.root'
  | 'newCaseStudy.ppcPage.remoteFile.size'
  | 'newCaseStudy.ppcPage.remoteFile.sourceInstanceName'
  | 'newCaseStudy.ppcPage.remoteFile.uid'
  | 'newCaseStudy.ppcPage.resize.height'
  | 'newCaseStudy.ppcPage.resize.src'
  | 'newCaseStudy.ppcPage.resize.width'
  | 'newCaseStudy.ppcPage.seo.breadcrumbs'
  | 'newCaseStudy.ppcPage.seo.canonical'
  | 'newCaseStudy.ppcPage.seo.cornerstone'
  | 'newCaseStudy.ppcPage.seo.focuskw'
  | 'newCaseStudy.ppcPage.seo.fullHead'
  | 'newCaseStudy.ppcPage.seo.metaDesc'
  | 'newCaseStudy.ppcPage.seo.metaKeywords'
  | 'newCaseStudy.ppcPage.seo.metaRobotsNofollow'
  | 'newCaseStudy.ppcPage.seo.metaRobotsNoindex'
  | 'newCaseStudy.ppcPage.seo.opengraphAuthor'
  | 'newCaseStudy.ppcPage.seo.opengraphDescription'
  | 'newCaseStudy.ppcPage.seo.opengraphModifiedTime'
  | 'newCaseStudy.ppcPage.seo.opengraphPublishedTime'
  | 'newCaseStudy.ppcPage.seo.opengraphPublisher'
  | 'newCaseStudy.ppcPage.seo.opengraphSiteName'
  | 'newCaseStudy.ppcPage.seo.opengraphTitle'
  | 'newCaseStudy.ppcPage.seo.opengraphType'
  | 'newCaseStudy.ppcPage.seo.opengraphUrl'
  | 'newCaseStudy.ppcPage.seo.readingTime'
  | 'newCaseStudy.ppcPage.seo.title'
  | 'newCaseStudy.ppcPage.seo.twitterDescription'
  | 'newCaseStudy.ppcPage.seo.twitterTitle'
  | 'newCaseStudy.ppcPage.sizes'
  | 'newCaseStudy.ppcPage.slug'
  | 'newCaseStudy.ppcPage.sourceUrl'
  | 'newCaseStudy.ppcPage.srcSet'
  | 'newCaseStudy.ppcPage.status'
  | 'newCaseStudy.ppcPage.template.templateName'
  | 'newCaseStudy.ppcPage.title'
  | 'newCaseStudy.ppcPage.uri'
  | 'newCaseStudy.ppcPage.width'
  | 'newCaseStudy.ppcPage.wpChildren.nodes'
  | 'newCaseStudy.secondaryContent'
  | 'newCaseStudy.secondaryTitle'
  | 'newCaseStudy.sections'
  | 'newCaseStudy.sections.content'
  | 'newCaseStudy.sections.fieldGroupName'
  | 'newCaseStudy.sections.image.altText'
  | 'newCaseStudy.sections.image.authorDatabaseId'
  | 'newCaseStudy.sections.image.authorId'
  | 'newCaseStudy.sections.image.caption'
  | 'newCaseStudy.sections.image.children'
  | 'newCaseStudy.sections.image.commentCount'
  | 'newCaseStudy.sections.image.commentStatus'
  | 'newCaseStudy.sections.image.contentTypeName'
  | 'newCaseStudy.sections.image.databaseId'
  | 'newCaseStudy.sections.image.date'
  | 'newCaseStudy.sections.image.dateGmt'
  | 'newCaseStudy.sections.image.description'
  | 'newCaseStudy.sections.image.desiredSlug'
  | 'newCaseStudy.sections.image.enclosure'
  | 'newCaseStudy.sections.image.fileSize'
  | 'newCaseStudy.sections.image.filename'
  | 'newCaseStudy.sections.image.filesize'
  | 'newCaseStudy.sections.image.gatsbyImage'
  | 'newCaseStudy.sections.image.guid'
  | 'newCaseStudy.sections.image.height'
  | 'newCaseStudy.sections.image.id'
  | 'newCaseStudy.sections.image.isContentNode'
  | 'newCaseStudy.sections.image.isTermNode'
  | 'newCaseStudy.sections.image.link'
  | 'newCaseStudy.sections.image.mediaItemUrl'
  | 'newCaseStudy.sections.image.mediaType'
  | 'newCaseStudy.sections.image.mimeType'
  | 'newCaseStudy.sections.image.modified'
  | 'newCaseStudy.sections.image.modifiedGmt'
  | 'newCaseStudy.sections.image.nodeType'
  | 'newCaseStudy.sections.image.parentDatabaseId'
  | 'newCaseStudy.sections.image.parentId'
  | 'newCaseStudy.sections.image.publicUrl'
  | 'newCaseStudy.sections.image.sizes'
  | 'newCaseStudy.sections.image.slug'
  | 'newCaseStudy.sections.image.sourceUrl'
  | 'newCaseStudy.sections.image.srcSet'
  | 'newCaseStudy.sections.image.status'
  | 'newCaseStudy.sections.image.title'
  | 'newCaseStudy.sections.image.uri'
  | 'newCaseStudy.sections.image.width'
  | 'newCaseStudy.sections.secondImage.altText'
  | 'newCaseStudy.sections.secondImage.authorDatabaseId'
  | 'newCaseStudy.sections.secondImage.authorId'
  | 'newCaseStudy.sections.secondImage.caption'
  | 'newCaseStudy.sections.secondImage.children'
  | 'newCaseStudy.sections.secondImage.commentCount'
  | 'newCaseStudy.sections.secondImage.commentStatus'
  | 'newCaseStudy.sections.secondImage.contentTypeName'
  | 'newCaseStudy.sections.secondImage.databaseId'
  | 'newCaseStudy.sections.secondImage.date'
  | 'newCaseStudy.sections.secondImage.dateGmt'
  | 'newCaseStudy.sections.secondImage.description'
  | 'newCaseStudy.sections.secondImage.desiredSlug'
  | 'newCaseStudy.sections.secondImage.enclosure'
  | 'newCaseStudy.sections.secondImage.fileSize'
  | 'newCaseStudy.sections.secondImage.filename'
  | 'newCaseStudy.sections.secondImage.filesize'
  | 'newCaseStudy.sections.secondImage.gatsbyImage'
  | 'newCaseStudy.sections.secondImage.guid'
  | 'newCaseStudy.sections.secondImage.height'
  | 'newCaseStudy.sections.secondImage.id'
  | 'newCaseStudy.sections.secondImage.isContentNode'
  | 'newCaseStudy.sections.secondImage.isTermNode'
  | 'newCaseStudy.sections.secondImage.link'
  | 'newCaseStudy.sections.secondImage.mediaItemUrl'
  | 'newCaseStudy.sections.secondImage.mediaType'
  | 'newCaseStudy.sections.secondImage.mimeType'
  | 'newCaseStudy.sections.secondImage.modified'
  | 'newCaseStudy.sections.secondImage.modifiedGmt'
  | 'newCaseStudy.sections.secondImage.nodeType'
  | 'newCaseStudy.sections.secondImage.parentDatabaseId'
  | 'newCaseStudy.sections.secondImage.parentId'
  | 'newCaseStudy.sections.secondImage.publicUrl'
  | 'newCaseStudy.sections.secondImage.sizes'
  | 'newCaseStudy.sections.secondImage.slug'
  | 'newCaseStudy.sections.secondImage.sourceUrl'
  | 'newCaseStudy.sections.secondImage.srcSet'
  | 'newCaseStudy.sections.secondImage.status'
  | 'newCaseStudy.sections.secondImage.title'
  | 'newCaseStudy.sections.secondImage.uri'
  | 'newCaseStudy.sections.secondImage.width'
  | 'newCaseStudy.sections.title'
  | 'newCaseStudy.sections.type'
  | 'newCaseStudy.shortContent'
  | 'newCaseStudy.toolsSection.fieldGroupName'
  | 'newCaseStudy.toolsSection.processContent'
  | 'newCaseStudy.toolsSection.processCta.target'
  | 'newCaseStudy.toolsSection.processCta.title'
  | 'newCaseStudy.toolsSection.processCta.url'
  | 'newCaseStudy.toolsSection.processHeading'
  | 'newCaseStudy.toolsSection.toolsContent'
  | 'newCaseStudy.toolsSection.toolsHeading'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'portfolio.backgroundGradient'
  | 'portfolio.fieldGroupName'
  | 'portfolio.listingPage.altText'
  | 'portfolio.listingPage.ancestors.nodes'
  | 'portfolio.listingPage.authorDatabaseId'
  | 'portfolio.listingPage.authorId'
  | 'portfolio.listingPage.caption'
  | 'portfolio.listingPage.children'
  | 'portfolio.listingPage.children.children'
  | 'portfolio.listingPage.children.id'
  | 'portfolio.listingPage.commentCount'
  | 'portfolio.listingPage.commentStatus'
  | 'portfolio.listingPage.comments.nodes'
  | 'portfolio.listingPage.contentTypeName'
  | 'portfolio.listingPage.databaseId'
  | 'portfolio.listingPage.date'
  | 'portfolio.listingPage.dateGmt'
  | 'portfolio.listingPage.description'
  | 'portfolio.listingPage.desiredSlug'
  | 'portfolio.listingPage.enclosure'
  | 'portfolio.listingPage.fileSize'
  | 'portfolio.listingPage.filename'
  | 'portfolio.listingPage.filesize'
  | 'portfolio.listingPage.gatsbyImage'
  | 'portfolio.listingPage.guid'
  | 'portfolio.listingPage.height'
  | 'portfolio.listingPage.id'
  | 'portfolio.listingPage.internal.content'
  | 'portfolio.listingPage.internal.contentDigest'
  | 'portfolio.listingPage.internal.contentFilePath'
  | 'portfolio.listingPage.internal.description'
  | 'portfolio.listingPage.internal.fieldOwners'
  | 'portfolio.listingPage.internal.ignoreType'
  | 'portfolio.listingPage.internal.mediaType'
  | 'portfolio.listingPage.internal.owner'
  | 'portfolio.listingPage.internal.type'
  | 'portfolio.listingPage.isContentNode'
  | 'portfolio.listingPage.isTermNode'
  | 'portfolio.listingPage.link'
  | 'portfolio.listingPage.localFile.absolutePath'
  | 'portfolio.listingPage.localFile.accessTime'
  | 'portfolio.listingPage.localFile.atime'
  | 'portfolio.listingPage.localFile.atimeMs'
  | 'portfolio.listingPage.localFile.base'
  | 'portfolio.listingPage.localFile.birthTime'
  | 'portfolio.listingPage.localFile.birthtime'
  | 'portfolio.listingPage.localFile.birthtimeMs'
  | 'portfolio.listingPage.localFile.blksize'
  | 'portfolio.listingPage.localFile.blocks'
  | 'portfolio.listingPage.localFile.changeTime'
  | 'portfolio.listingPage.localFile.children'
  | 'portfolio.listingPage.localFile.childrenImageSharp'
  | 'portfolio.listingPage.localFile.ctime'
  | 'portfolio.listingPage.localFile.ctimeMs'
  | 'portfolio.listingPage.localFile.dev'
  | 'portfolio.listingPage.localFile.dir'
  | 'portfolio.listingPage.localFile.ext'
  | 'portfolio.listingPage.localFile.extension'
  | 'portfolio.listingPage.localFile.gid'
  | 'portfolio.listingPage.localFile.hash'
  | 'portfolio.listingPage.localFile.id'
  | 'portfolio.listingPage.localFile.ino'
  | 'portfolio.listingPage.localFile.mode'
  | 'portfolio.listingPage.localFile.modifiedTime'
  | 'portfolio.listingPage.localFile.mtime'
  | 'portfolio.listingPage.localFile.mtimeMs'
  | 'portfolio.listingPage.localFile.name'
  | 'portfolio.listingPage.localFile.nlink'
  | 'portfolio.listingPage.localFile.prettySize'
  | 'portfolio.listingPage.localFile.publicURL'
  | 'portfolio.listingPage.localFile.rdev'
  | 'portfolio.listingPage.localFile.relativeDirectory'
  | 'portfolio.listingPage.localFile.relativePath'
  | 'portfolio.listingPage.localFile.root'
  | 'portfolio.listingPage.localFile.size'
  | 'portfolio.listingPage.localFile.sourceInstanceName'
  | 'portfolio.listingPage.localFile.uid'
  | 'portfolio.listingPage.mediaDetails.file'
  | 'portfolio.listingPage.mediaDetails.height'
  | 'portfolio.listingPage.mediaDetails.sizes'
  | 'portfolio.listingPage.mediaDetails.width'
  | 'portfolio.listingPage.mediaItemUrl'
  | 'portfolio.listingPage.mediaType'
  | 'portfolio.listingPage.mimeType'
  | 'portfolio.listingPage.modified'
  | 'portfolio.listingPage.modifiedGmt'
  | 'portfolio.listingPage.nodeType'
  | 'portfolio.listingPage.parentDatabaseId'
  | 'portfolio.listingPage.parentId'
  | 'portfolio.listingPage.parent.children'
  | 'portfolio.listingPage.parent.id'
  | 'portfolio.listingPage.publicUrl'
  | 'portfolio.listingPage.remoteFile.absolutePath'
  | 'portfolio.listingPage.remoteFile.accessTime'
  | 'portfolio.listingPage.remoteFile.atime'
  | 'portfolio.listingPage.remoteFile.atimeMs'
  | 'portfolio.listingPage.remoteFile.base'
  | 'portfolio.listingPage.remoteFile.birthTime'
  | 'portfolio.listingPage.remoteFile.birthtime'
  | 'portfolio.listingPage.remoteFile.birthtimeMs'
  | 'portfolio.listingPage.remoteFile.blksize'
  | 'portfolio.listingPage.remoteFile.blocks'
  | 'portfolio.listingPage.remoteFile.changeTime'
  | 'portfolio.listingPage.remoteFile.children'
  | 'portfolio.listingPage.remoteFile.childrenImageSharp'
  | 'portfolio.listingPage.remoteFile.ctime'
  | 'portfolio.listingPage.remoteFile.ctimeMs'
  | 'portfolio.listingPage.remoteFile.dev'
  | 'portfolio.listingPage.remoteFile.dir'
  | 'portfolio.listingPage.remoteFile.ext'
  | 'portfolio.listingPage.remoteFile.extension'
  | 'portfolio.listingPage.remoteFile.gid'
  | 'portfolio.listingPage.remoteFile.hash'
  | 'portfolio.listingPage.remoteFile.id'
  | 'portfolio.listingPage.remoteFile.ino'
  | 'portfolio.listingPage.remoteFile.mode'
  | 'portfolio.listingPage.remoteFile.modifiedTime'
  | 'portfolio.listingPage.remoteFile.mtime'
  | 'portfolio.listingPage.remoteFile.mtimeMs'
  | 'portfolio.listingPage.remoteFile.name'
  | 'portfolio.listingPage.remoteFile.nlink'
  | 'portfolio.listingPage.remoteFile.prettySize'
  | 'portfolio.listingPage.remoteFile.publicURL'
  | 'portfolio.listingPage.remoteFile.rdev'
  | 'portfolio.listingPage.remoteFile.relativeDirectory'
  | 'portfolio.listingPage.remoteFile.relativePath'
  | 'portfolio.listingPage.remoteFile.root'
  | 'portfolio.listingPage.remoteFile.size'
  | 'portfolio.listingPage.remoteFile.sourceInstanceName'
  | 'portfolio.listingPage.remoteFile.uid'
  | 'portfolio.listingPage.resize.height'
  | 'portfolio.listingPage.resize.src'
  | 'portfolio.listingPage.resize.width'
  | 'portfolio.listingPage.seo.breadcrumbs'
  | 'portfolio.listingPage.seo.canonical'
  | 'portfolio.listingPage.seo.cornerstone'
  | 'portfolio.listingPage.seo.focuskw'
  | 'portfolio.listingPage.seo.fullHead'
  | 'portfolio.listingPage.seo.metaDesc'
  | 'portfolio.listingPage.seo.metaKeywords'
  | 'portfolio.listingPage.seo.metaRobotsNofollow'
  | 'portfolio.listingPage.seo.metaRobotsNoindex'
  | 'portfolio.listingPage.seo.opengraphAuthor'
  | 'portfolio.listingPage.seo.opengraphDescription'
  | 'portfolio.listingPage.seo.opengraphModifiedTime'
  | 'portfolio.listingPage.seo.opengraphPublishedTime'
  | 'portfolio.listingPage.seo.opengraphPublisher'
  | 'portfolio.listingPage.seo.opengraphSiteName'
  | 'portfolio.listingPage.seo.opengraphTitle'
  | 'portfolio.listingPage.seo.opengraphType'
  | 'portfolio.listingPage.seo.opengraphUrl'
  | 'portfolio.listingPage.seo.readingTime'
  | 'portfolio.listingPage.seo.title'
  | 'portfolio.listingPage.seo.twitterDescription'
  | 'portfolio.listingPage.seo.twitterTitle'
  | 'portfolio.listingPage.sizes'
  | 'portfolio.listingPage.slug'
  | 'portfolio.listingPage.sourceUrl'
  | 'portfolio.listingPage.srcSet'
  | 'portfolio.listingPage.status'
  | 'portfolio.listingPage.template.templateName'
  | 'portfolio.listingPage.title'
  | 'portfolio.listingPage.uri'
  | 'portfolio.listingPage.width'
  | 'portfolio.listingPage.wpChildren.nodes'
  | 'portfolio.portfolio.androidLink'
  | 'portfolio.portfolio.fieldGroupName'
  | 'portfolio.portfolio.iosLink'
  | 'portfolio.portfolio.webLink'
  | 'portfolio.startupTemplateImage.altText'
  | 'portfolio.startupTemplateImage.ancestors.nodes'
  | 'portfolio.startupTemplateImage.authorDatabaseId'
  | 'portfolio.startupTemplateImage.authorId'
  | 'portfolio.startupTemplateImage.caption'
  | 'portfolio.startupTemplateImage.children'
  | 'portfolio.startupTemplateImage.children.children'
  | 'portfolio.startupTemplateImage.children.id'
  | 'portfolio.startupTemplateImage.commentCount'
  | 'portfolio.startupTemplateImage.commentStatus'
  | 'portfolio.startupTemplateImage.comments.nodes'
  | 'portfolio.startupTemplateImage.contentTypeName'
  | 'portfolio.startupTemplateImage.databaseId'
  | 'portfolio.startupTemplateImage.date'
  | 'portfolio.startupTemplateImage.dateGmt'
  | 'portfolio.startupTemplateImage.description'
  | 'portfolio.startupTemplateImage.desiredSlug'
  | 'portfolio.startupTemplateImage.enclosure'
  | 'portfolio.startupTemplateImage.fileSize'
  | 'portfolio.startupTemplateImage.filename'
  | 'portfolio.startupTemplateImage.filesize'
  | 'portfolio.startupTemplateImage.gatsbyImage'
  | 'portfolio.startupTemplateImage.guid'
  | 'portfolio.startupTemplateImage.height'
  | 'portfolio.startupTemplateImage.id'
  | 'portfolio.startupTemplateImage.internal.content'
  | 'portfolio.startupTemplateImage.internal.contentDigest'
  | 'portfolio.startupTemplateImage.internal.contentFilePath'
  | 'portfolio.startupTemplateImage.internal.description'
  | 'portfolio.startupTemplateImage.internal.fieldOwners'
  | 'portfolio.startupTemplateImage.internal.ignoreType'
  | 'portfolio.startupTemplateImage.internal.mediaType'
  | 'portfolio.startupTemplateImage.internal.owner'
  | 'portfolio.startupTemplateImage.internal.type'
  | 'portfolio.startupTemplateImage.isContentNode'
  | 'portfolio.startupTemplateImage.isTermNode'
  | 'portfolio.startupTemplateImage.link'
  | 'portfolio.startupTemplateImage.localFile.absolutePath'
  | 'portfolio.startupTemplateImage.localFile.accessTime'
  | 'portfolio.startupTemplateImage.localFile.atime'
  | 'portfolio.startupTemplateImage.localFile.atimeMs'
  | 'portfolio.startupTemplateImage.localFile.base'
  | 'portfolio.startupTemplateImage.localFile.birthTime'
  | 'portfolio.startupTemplateImage.localFile.birthtime'
  | 'portfolio.startupTemplateImage.localFile.birthtimeMs'
  | 'portfolio.startupTemplateImage.localFile.blksize'
  | 'portfolio.startupTemplateImage.localFile.blocks'
  | 'portfolio.startupTemplateImage.localFile.changeTime'
  | 'portfolio.startupTemplateImage.localFile.children'
  | 'portfolio.startupTemplateImage.localFile.childrenImageSharp'
  | 'portfolio.startupTemplateImage.localFile.ctime'
  | 'portfolio.startupTemplateImage.localFile.ctimeMs'
  | 'portfolio.startupTemplateImage.localFile.dev'
  | 'portfolio.startupTemplateImage.localFile.dir'
  | 'portfolio.startupTemplateImage.localFile.ext'
  | 'portfolio.startupTemplateImage.localFile.extension'
  | 'portfolio.startupTemplateImage.localFile.gid'
  | 'portfolio.startupTemplateImage.localFile.hash'
  | 'portfolio.startupTemplateImage.localFile.id'
  | 'portfolio.startupTemplateImage.localFile.ino'
  | 'portfolio.startupTemplateImage.localFile.mode'
  | 'portfolio.startupTemplateImage.localFile.modifiedTime'
  | 'portfolio.startupTemplateImage.localFile.mtime'
  | 'portfolio.startupTemplateImage.localFile.mtimeMs'
  | 'portfolio.startupTemplateImage.localFile.name'
  | 'portfolio.startupTemplateImage.localFile.nlink'
  | 'portfolio.startupTemplateImage.localFile.prettySize'
  | 'portfolio.startupTemplateImage.localFile.publicURL'
  | 'portfolio.startupTemplateImage.localFile.rdev'
  | 'portfolio.startupTemplateImage.localFile.relativeDirectory'
  | 'portfolio.startupTemplateImage.localFile.relativePath'
  | 'portfolio.startupTemplateImage.localFile.root'
  | 'portfolio.startupTemplateImage.localFile.size'
  | 'portfolio.startupTemplateImage.localFile.sourceInstanceName'
  | 'portfolio.startupTemplateImage.localFile.uid'
  | 'portfolio.startupTemplateImage.mediaDetails.file'
  | 'portfolio.startupTemplateImage.mediaDetails.height'
  | 'portfolio.startupTemplateImage.mediaDetails.sizes'
  | 'portfolio.startupTemplateImage.mediaDetails.width'
  | 'portfolio.startupTemplateImage.mediaItemUrl'
  | 'portfolio.startupTemplateImage.mediaType'
  | 'portfolio.startupTemplateImage.mimeType'
  | 'portfolio.startupTemplateImage.modified'
  | 'portfolio.startupTemplateImage.modifiedGmt'
  | 'portfolio.startupTemplateImage.nodeType'
  | 'portfolio.startupTemplateImage.parentDatabaseId'
  | 'portfolio.startupTemplateImage.parentId'
  | 'portfolio.startupTemplateImage.parent.children'
  | 'portfolio.startupTemplateImage.parent.id'
  | 'portfolio.startupTemplateImage.publicUrl'
  | 'portfolio.startupTemplateImage.remoteFile.absolutePath'
  | 'portfolio.startupTemplateImage.remoteFile.accessTime'
  | 'portfolio.startupTemplateImage.remoteFile.atime'
  | 'portfolio.startupTemplateImage.remoteFile.atimeMs'
  | 'portfolio.startupTemplateImage.remoteFile.base'
  | 'portfolio.startupTemplateImage.remoteFile.birthTime'
  | 'portfolio.startupTemplateImage.remoteFile.birthtime'
  | 'portfolio.startupTemplateImage.remoteFile.birthtimeMs'
  | 'portfolio.startupTemplateImage.remoteFile.blksize'
  | 'portfolio.startupTemplateImage.remoteFile.blocks'
  | 'portfolio.startupTemplateImage.remoteFile.changeTime'
  | 'portfolio.startupTemplateImage.remoteFile.children'
  | 'portfolio.startupTemplateImage.remoteFile.childrenImageSharp'
  | 'portfolio.startupTemplateImage.remoteFile.ctime'
  | 'portfolio.startupTemplateImage.remoteFile.ctimeMs'
  | 'portfolio.startupTemplateImage.remoteFile.dev'
  | 'portfolio.startupTemplateImage.remoteFile.dir'
  | 'portfolio.startupTemplateImage.remoteFile.ext'
  | 'portfolio.startupTemplateImage.remoteFile.extension'
  | 'portfolio.startupTemplateImage.remoteFile.gid'
  | 'portfolio.startupTemplateImage.remoteFile.hash'
  | 'portfolio.startupTemplateImage.remoteFile.id'
  | 'portfolio.startupTemplateImage.remoteFile.ino'
  | 'portfolio.startupTemplateImage.remoteFile.mode'
  | 'portfolio.startupTemplateImage.remoteFile.modifiedTime'
  | 'portfolio.startupTemplateImage.remoteFile.mtime'
  | 'portfolio.startupTemplateImage.remoteFile.mtimeMs'
  | 'portfolio.startupTemplateImage.remoteFile.name'
  | 'portfolio.startupTemplateImage.remoteFile.nlink'
  | 'portfolio.startupTemplateImage.remoteFile.prettySize'
  | 'portfolio.startupTemplateImage.remoteFile.publicURL'
  | 'portfolio.startupTemplateImage.remoteFile.rdev'
  | 'portfolio.startupTemplateImage.remoteFile.relativeDirectory'
  | 'portfolio.startupTemplateImage.remoteFile.relativePath'
  | 'portfolio.startupTemplateImage.remoteFile.root'
  | 'portfolio.startupTemplateImage.remoteFile.size'
  | 'portfolio.startupTemplateImage.remoteFile.sourceInstanceName'
  | 'portfolio.startupTemplateImage.remoteFile.uid'
  | 'portfolio.startupTemplateImage.resize.height'
  | 'portfolio.startupTemplateImage.resize.src'
  | 'portfolio.startupTemplateImage.resize.width'
  | 'portfolio.startupTemplateImage.seo.breadcrumbs'
  | 'portfolio.startupTemplateImage.seo.canonical'
  | 'portfolio.startupTemplateImage.seo.cornerstone'
  | 'portfolio.startupTemplateImage.seo.focuskw'
  | 'portfolio.startupTemplateImage.seo.fullHead'
  | 'portfolio.startupTemplateImage.seo.metaDesc'
  | 'portfolio.startupTemplateImage.seo.metaKeywords'
  | 'portfolio.startupTemplateImage.seo.metaRobotsNofollow'
  | 'portfolio.startupTemplateImage.seo.metaRobotsNoindex'
  | 'portfolio.startupTemplateImage.seo.opengraphAuthor'
  | 'portfolio.startupTemplateImage.seo.opengraphDescription'
  | 'portfolio.startupTemplateImage.seo.opengraphModifiedTime'
  | 'portfolio.startupTemplateImage.seo.opengraphPublishedTime'
  | 'portfolio.startupTemplateImage.seo.opengraphPublisher'
  | 'portfolio.startupTemplateImage.seo.opengraphSiteName'
  | 'portfolio.startupTemplateImage.seo.opengraphTitle'
  | 'portfolio.startupTemplateImage.seo.opengraphType'
  | 'portfolio.startupTemplateImage.seo.opengraphUrl'
  | 'portfolio.startupTemplateImage.seo.readingTime'
  | 'portfolio.startupTemplateImage.seo.title'
  | 'portfolio.startupTemplateImage.seo.twitterDescription'
  | 'portfolio.startupTemplateImage.seo.twitterTitle'
  | 'portfolio.startupTemplateImage.sizes'
  | 'portfolio.startupTemplateImage.slug'
  | 'portfolio.startupTemplateImage.sourceUrl'
  | 'portfolio.startupTemplateImage.srcSet'
  | 'portfolio.startupTemplateImage.status'
  | 'portfolio.startupTemplateImage.template.templateName'
  | 'portfolio.startupTemplateImage.title'
  | 'portfolio.startupTemplateImage.uri'
  | 'portfolio.startupTemplateImage.width'
  | 'portfolio.startupTemplateImage.wpChildren.nodes'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.readingTime'
  | 'seo.schema.articleType'
  | 'seo.schema.pageType'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'status'
  | 'template.templateName'
  | 'terms.nodes'
  | 'terms.nodes.children'
  | 'terms.nodes.children.children'
  | 'terms.nodes.children.id'
  | 'terms.nodes.count'
  | 'terms.nodes.databaseId'
  | 'terms.nodes.description'
  | 'terms.nodes.id'
  | 'terms.nodes.internal.content'
  | 'terms.nodes.internal.contentDigest'
  | 'terms.nodes.internal.contentFilePath'
  | 'terms.nodes.internal.description'
  | 'terms.nodes.internal.fieldOwners'
  | 'terms.nodes.internal.ignoreType'
  | 'terms.nodes.internal.mediaType'
  | 'terms.nodes.internal.owner'
  | 'terms.nodes.internal.type'
  | 'terms.nodes.isContentNode'
  | 'terms.nodes.isTermNode'
  | 'terms.nodes.link'
  | 'terms.nodes.name'
  | 'terms.nodes.nodeType'
  | 'terms.nodes.parent.children'
  | 'terms.nodes.parent.id'
  | 'terms.nodes.slug'
  | 'terms.nodes.taxonomyName'
  | 'terms.nodes.termGroupId'
  | 'terms.nodes.termTaxonomyId'
  | 'terms.nodes.uri'
  | 'title'
  | 'uri';

type tsCaseStudyFilterInput = {
  readonly camberRoadmapCaseStudy: InputMaybe<tsCaseStudy_CamberroadmapcasestudyFilterInput>;
  readonly caseStudy: InputMaybe<tsCaseStudy_CasestudyFilterInput>;
  readonly caseStudyCategory: InputMaybe<tsCaseStudyToCaseStudyCategoryConnectionFilterInput>;
  readonly caseStudyDetailsPage: InputMaybe<tsCaseStudy_CasestudydetailspageFilterInput>;
  readonly caseStudyType: InputMaybe<tsCaseStudyToCaseStudyTypeConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
  readonly enclosure: InputMaybe<StringQueryOperatorInput>;
  readonly featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  readonly featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly featuredImageId: InputMaybe<IDQueryOperatorInput>;
  readonly guid: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  readonly newCaseStudy: InputMaybe<tsCaseStudy_NewcasestudyFilterInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly portfolio: InputMaybe<tsCaseStudy_PortfolioFilterInput>;
  readonly seo: InputMaybe<tsPostTypeSEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly template: InputMaybe<tsContentTemplateFilterInput>;
  readonly terms: InputMaybe<tsCaseStudyToTermNodeConnectionFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type tsCaseStudyFilterListInput = {
  readonly elemMatch: InputMaybe<tsCaseStudyFilterInput>;
};

type tsCaseStudyGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCaseStudyEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsCaseStudyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCaseStudy>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCaseStudyGroupConnection_distinctArgs = {
  field: tsCaseStudyFieldsEnum;
};


type tsCaseStudyGroupConnection_groupArgs = {
  field: tsCaseStudyFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCaseStudyGroupConnection_maxArgs = {
  field: tsCaseStudyFieldsEnum;
};


type tsCaseStudyGroupConnection_minArgs = {
  field: tsCaseStudyFieldsEnum;
};


type tsCaseStudyGroupConnection_sumArgs = {
  field: tsCaseStudyFieldsEnum;
};

type tsCaseStudySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsCaseStudyFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the CaseStudy type and the CaseStudyCategory type */
type tsCaseStudyToCaseStudyCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCaseStudyCategory>>>;
};

type tsCaseStudyToCaseStudyCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCaseStudyCategoryFilterListInput>;
};

/** Connection between the CaseStudy type and the CaseStudyType type */
type tsCaseStudyToCaseStudyTypeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCaseStudyType>>>;
};

type tsCaseStudyToCaseStudyTypeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCaseStudyTypeFilterListInput>;
};

/** Connection between the CaseStudy type and the TermNode type */
type tsCaseStudyToTermNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsTermNode>>>;
};

type tsCaseStudyToTermNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsTermNodeFilterListInput>;
};

/** The CaseStudyType type */
type tsCaseStudyType = Node & tsDatabaseIdentifier & tsHierarchicalTermNode & tsMenuItemLinkable & tsNode & tsTermNode & tsUniformResourceIdentifiable & {
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsCaseStudyTypeToAncestorsCaseStudyTypeConnection>;
  /** Connection between the CaseStudyType type and the CaseStudy type */
  readonly caseStudies: Maybe<tsCaseStudyTypeToCaseStudyConnection>;
  readonly children: ReadonlyArray<Node>;
  /** Connection between the CaseStudyType type and the ContentNode type */
  readonly contentNodes: Maybe<tsCaseStudyTypeToContentNodeConnection>;
  /** The number of objects connected to the object */
  readonly count: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** The description of the object */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The link to the term */
  readonly link: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** The Yoast SEO data of the Case Study Type taxonomy. */
  readonly seo: Maybe<tsTaxonomySEO>;
  /** An alphanumeric identifier for the object unique to its type. */
  readonly slug: Maybe<Scalars['String']>;
  /** Connection between the CaseStudyType type and the Taxonomy type */
  readonly taxonomy: Maybe<tsCaseStudyTypeToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  readonly taxonomyName: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  readonly termGroupId: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  readonly termTaxonomyId: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** Connection between the CaseStudyType type and the CaseStudyType type */
  readonly wpChildren: Maybe<tsCaseStudyTypeToCaseStudyTypeConnection>;
  /** Connection between the CaseStudyType type and the CaseStudyType type */
  readonly wpParent: Maybe<tsCaseStudyTypeToParentCaseStudyTypeConnectionEdge>;
};

type tsCaseStudyTypeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCaseStudyTypeEdge>;
  readonly group: ReadonlyArray<tsCaseStudyTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCaseStudyType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCaseStudyTypeConnection_distinctArgs = {
  field: tsCaseStudyTypeFieldsEnum;
};


type tsCaseStudyTypeConnection_groupArgs = {
  field: tsCaseStudyTypeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCaseStudyTypeConnection_maxArgs = {
  field: tsCaseStudyTypeFieldsEnum;
};


type tsCaseStudyTypeConnection_minArgs = {
  field: tsCaseStudyTypeFieldsEnum;
};


type tsCaseStudyTypeConnection_sumArgs = {
  field: tsCaseStudyTypeFieldsEnum;
};

type tsCaseStudyTypeEdge = {
  readonly next: Maybe<tsCaseStudyType>;
  readonly node: tsCaseStudyType;
  readonly previous: Maybe<tsCaseStudyType>;
};

type tsCaseStudyTypeFieldsEnum =
  | 'ancestors.nodes'
  | 'ancestors.nodes.ancestors.nodes'
  | 'ancestors.nodes.caseStudies.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentNodes.nodes'
  | 'ancestors.nodes.count'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.description'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.name'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parentDatabaseId'
  | 'ancestors.nodes.parentId'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.taxonomyName'
  | 'ancestors.nodes.termGroupId'
  | 'ancestors.nodes.termTaxonomyId'
  | 'ancestors.nodes.uri'
  | 'ancestors.nodes.wpChildren.nodes'
  | 'caseStudies.nodes'
  | 'caseStudies.nodes.camberRoadmapCaseStudy.camberRoadmapCaseStudy'
  | 'caseStudies.nodes.camberRoadmapCaseStudy.fieldGroupName'
  | 'caseStudies.nodes.camberRoadmapCaseStudy.mobileCaseStudyTitle'
  | 'caseStudies.nodes.caseStudyCategory.nodes'
  | 'caseStudies.nodes.caseStudyDetailsPage.clientSaysHeading'
  | 'caseStudies.nodes.caseStudyDetailsPage.content'
  | 'caseStudies.nodes.caseStudyDetailsPage.featureHeading'
  | 'caseStudies.nodes.caseStudyDetailsPage.featuresListsForApps'
  | 'caseStudies.nodes.caseStudyDetailsPage.featuresListsForWeb'
  | 'caseStudies.nodes.caseStudyDetailsPage.fieldGroupName'
  | 'caseStudies.nodes.caseStudyDetailsPage.heading'
  | 'caseStudies.nodes.caseStudyDetailsPage.problemChallengesResultLists'
  | 'caseStudies.nodes.caseStudyDetailsPage.specialFeaturesContent'
  | 'caseStudies.nodes.caseStudyDetailsPage.specialFeaturesHeading'
  | 'caseStudies.nodes.caseStudyType.nodes'
  | 'caseStudies.nodes.caseStudy.appGallery'
  | 'caseStudies.nodes.caseStudy.fieldGroupName'
  | 'caseStudies.nodes.caseStudy.gallery'
  | 'caseStudies.nodes.caseStudy.ourRole'
  | 'caseStudies.nodes.caseStudy.problem'
  | 'caseStudies.nodes.caseStudy.problemStrategyResultLayout'
  | 'caseStudies.nodes.caseStudy.result'
  | 'caseStudies.nodes.caseStudy.strategy'
  | 'caseStudies.nodes.caseStudy.technology'
  | 'caseStudies.nodes.caseStudy.type'
  | 'caseStudies.nodes.children'
  | 'caseStudies.nodes.children.children'
  | 'caseStudies.nodes.children.id'
  | 'caseStudies.nodes.content'
  | 'caseStudies.nodes.contentTypeName'
  | 'caseStudies.nodes.databaseId'
  | 'caseStudies.nodes.date'
  | 'caseStudies.nodes.dateGmt'
  | 'caseStudies.nodes.desiredSlug'
  | 'caseStudies.nodes.enclosure'
  | 'caseStudies.nodes.featuredImageDatabaseId'
  | 'caseStudies.nodes.featuredImageId'
  | 'caseStudies.nodes.guid'
  | 'caseStudies.nodes.id'
  | 'caseStudies.nodes.internal.content'
  | 'caseStudies.nodes.internal.contentDigest'
  | 'caseStudies.nodes.internal.contentFilePath'
  | 'caseStudies.nodes.internal.description'
  | 'caseStudies.nodes.internal.fieldOwners'
  | 'caseStudies.nodes.internal.ignoreType'
  | 'caseStudies.nodes.internal.mediaType'
  | 'caseStudies.nodes.internal.owner'
  | 'caseStudies.nodes.internal.type'
  | 'caseStudies.nodes.isContentNode'
  | 'caseStudies.nodes.isTermNode'
  | 'caseStudies.nodes.link'
  | 'caseStudies.nodes.modified'
  | 'caseStudies.nodes.modifiedGmt'
  | 'caseStudies.nodes.newCaseStudy.fieldGroupName'
  | 'caseStudies.nodes.newCaseStudy.newCaseStudy'
  | 'caseStudies.nodes.newCaseStudy.secondaryContent'
  | 'caseStudies.nodes.newCaseStudy.secondaryTitle'
  | 'caseStudies.nodes.newCaseStudy.sections'
  | 'caseStudies.nodes.newCaseStudy.shortContent'
  | 'caseStudies.nodes.nodeType'
  | 'caseStudies.nodes.parent.children'
  | 'caseStudies.nodes.parent.id'
  | 'caseStudies.nodes.portfolio.backgroundGradient'
  | 'caseStudies.nodes.portfolio.fieldGroupName'
  | 'caseStudies.nodes.seo.breadcrumbs'
  | 'caseStudies.nodes.seo.canonical'
  | 'caseStudies.nodes.seo.cornerstone'
  | 'caseStudies.nodes.seo.focuskw'
  | 'caseStudies.nodes.seo.fullHead'
  | 'caseStudies.nodes.seo.metaDesc'
  | 'caseStudies.nodes.seo.metaKeywords'
  | 'caseStudies.nodes.seo.metaRobotsNofollow'
  | 'caseStudies.nodes.seo.metaRobotsNoindex'
  | 'caseStudies.nodes.seo.opengraphAuthor'
  | 'caseStudies.nodes.seo.opengraphDescription'
  | 'caseStudies.nodes.seo.opengraphModifiedTime'
  | 'caseStudies.nodes.seo.opengraphPublishedTime'
  | 'caseStudies.nodes.seo.opengraphPublisher'
  | 'caseStudies.nodes.seo.opengraphSiteName'
  | 'caseStudies.nodes.seo.opengraphTitle'
  | 'caseStudies.nodes.seo.opengraphType'
  | 'caseStudies.nodes.seo.opengraphUrl'
  | 'caseStudies.nodes.seo.readingTime'
  | 'caseStudies.nodes.seo.title'
  | 'caseStudies.nodes.seo.twitterDescription'
  | 'caseStudies.nodes.seo.twitterTitle'
  | 'caseStudies.nodes.slug'
  | 'caseStudies.nodes.status'
  | 'caseStudies.nodes.template.templateName'
  | 'caseStudies.nodes.terms.nodes'
  | 'caseStudies.nodes.title'
  | 'caseStudies.nodes.uri'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentNodes.nodes'
  | 'contentNodes.nodes.children'
  | 'contentNodes.nodes.children.children'
  | 'contentNodes.nodes.children.id'
  | 'contentNodes.nodes.contentTypeName'
  | 'contentNodes.nodes.databaseId'
  | 'contentNodes.nodes.date'
  | 'contentNodes.nodes.dateGmt'
  | 'contentNodes.nodes.desiredSlug'
  | 'contentNodes.nodes.enclosure'
  | 'contentNodes.nodes.guid'
  | 'contentNodes.nodes.id'
  | 'contentNodes.nodes.internal.content'
  | 'contentNodes.nodes.internal.contentDigest'
  | 'contentNodes.nodes.internal.contentFilePath'
  | 'contentNodes.nodes.internal.description'
  | 'contentNodes.nodes.internal.fieldOwners'
  | 'contentNodes.nodes.internal.ignoreType'
  | 'contentNodes.nodes.internal.mediaType'
  | 'contentNodes.nodes.internal.owner'
  | 'contentNodes.nodes.internal.type'
  | 'contentNodes.nodes.isContentNode'
  | 'contentNodes.nodes.isTermNode'
  | 'contentNodes.nodes.link'
  | 'contentNodes.nodes.modified'
  | 'contentNodes.nodes.modifiedGmt'
  | 'contentNodes.nodes.nodeType'
  | 'contentNodes.nodes.parent.children'
  | 'contentNodes.nodes.parent.id'
  | 'contentNodes.nodes.seo.breadcrumbs'
  | 'contentNodes.nodes.seo.canonical'
  | 'contentNodes.nodes.seo.cornerstone'
  | 'contentNodes.nodes.seo.focuskw'
  | 'contentNodes.nodes.seo.fullHead'
  | 'contentNodes.nodes.seo.metaDesc'
  | 'contentNodes.nodes.seo.metaKeywords'
  | 'contentNodes.nodes.seo.metaRobotsNofollow'
  | 'contentNodes.nodes.seo.metaRobotsNoindex'
  | 'contentNodes.nodes.seo.opengraphAuthor'
  | 'contentNodes.nodes.seo.opengraphDescription'
  | 'contentNodes.nodes.seo.opengraphModifiedTime'
  | 'contentNodes.nodes.seo.opengraphPublishedTime'
  | 'contentNodes.nodes.seo.opengraphPublisher'
  | 'contentNodes.nodes.seo.opengraphSiteName'
  | 'contentNodes.nodes.seo.opengraphTitle'
  | 'contentNodes.nodes.seo.opengraphType'
  | 'contentNodes.nodes.seo.opengraphUrl'
  | 'contentNodes.nodes.seo.readingTime'
  | 'contentNodes.nodes.seo.title'
  | 'contentNodes.nodes.seo.twitterDescription'
  | 'contentNodes.nodes.seo.twitterTitle'
  | 'contentNodes.nodes.slug'
  | 'contentNodes.nodes.status'
  | 'contentNodes.nodes.template.templateName'
  | 'contentNodes.nodes.uri'
  | 'count'
  | 'databaseId'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'link'
  | 'name'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'taxonomyName'
  | 'taxonomy.node.archivePath'
  | 'taxonomy.node.children'
  | 'taxonomy.node.children.children'
  | 'taxonomy.node.children.id'
  | 'taxonomy.node.connectedContentTypes.nodes'
  | 'taxonomy.node.description'
  | 'taxonomy.node.graphqlPluralName'
  | 'taxonomy.node.graphqlSingleName'
  | 'taxonomy.node.hierarchical'
  | 'taxonomy.node.id'
  | 'taxonomy.node.internal.content'
  | 'taxonomy.node.internal.contentDigest'
  | 'taxonomy.node.internal.contentFilePath'
  | 'taxonomy.node.internal.description'
  | 'taxonomy.node.internal.fieldOwners'
  | 'taxonomy.node.internal.ignoreType'
  | 'taxonomy.node.internal.mediaType'
  | 'taxonomy.node.internal.owner'
  | 'taxonomy.node.internal.type'
  | 'taxonomy.node.label'
  | 'taxonomy.node.name'
  | 'taxonomy.node.nodeType'
  | 'taxonomy.node.parent.children'
  | 'taxonomy.node.parent.id'
  | 'taxonomy.node.public'
  | 'taxonomy.node.restBase'
  | 'taxonomy.node.restControllerClass'
  | 'taxonomy.node.showCloud'
  | 'taxonomy.node.showInAdminColumn'
  | 'taxonomy.node.showInGraphql'
  | 'taxonomy.node.showInMenu'
  | 'taxonomy.node.showInNavMenus'
  | 'taxonomy.node.showInQuickEdit'
  | 'taxonomy.node.showInRest'
  | 'taxonomy.node.showUi'
  | 'termGroupId'
  | 'termTaxonomyId'
  | 'uri'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.ancestors.nodes'
  | 'wpChildren.nodes.caseStudies.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentNodes.nodes'
  | 'wpChildren.nodes.count'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.description'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.name'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parentDatabaseId'
  | 'wpChildren.nodes.parentId'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.taxonomyName'
  | 'wpChildren.nodes.termGroupId'
  | 'wpChildren.nodes.termTaxonomyId'
  | 'wpChildren.nodes.uri'
  | 'wpChildren.nodes.wpChildren.nodes'
  | 'wpParent.node.ancestors.nodes'
  | 'wpParent.node.caseStudies.nodes'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentNodes.nodes'
  | 'wpParent.node.count'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.description'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.name'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parentDatabaseId'
  | 'wpParent.node.parentId'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.taxonomyName'
  | 'wpParent.node.termGroupId'
  | 'wpParent.node.termTaxonomyId'
  | 'wpParent.node.uri'
  | 'wpParent.node.wpChildren.nodes';

type tsCaseStudyTypeFilterInput = {
  readonly ancestors: InputMaybe<tsCaseStudyTypeToAncestorsCaseStudyTypeConnectionFilterInput>;
  readonly caseStudies: InputMaybe<tsCaseStudyTypeToCaseStudyConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentNodes: InputMaybe<tsCaseStudyTypeToContentNodeConnectionFilterInput>;
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly seo: InputMaybe<tsTaxonomySEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly taxonomy: InputMaybe<tsCaseStudyTypeToTaxonomyConnectionEdgeFilterInput>;
  readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
  readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
  readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsCaseStudyTypeToCaseStudyTypeConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsCaseStudyTypeToParentCaseStudyTypeConnectionEdgeFilterInput>;
};

type tsCaseStudyTypeFilterListInput = {
  readonly elemMatch: InputMaybe<tsCaseStudyTypeFilterInput>;
};

type tsCaseStudyTypeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCaseStudyTypeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsCaseStudyTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCaseStudyType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCaseStudyTypeGroupConnection_distinctArgs = {
  field: tsCaseStudyTypeFieldsEnum;
};


type tsCaseStudyTypeGroupConnection_groupArgs = {
  field: tsCaseStudyTypeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCaseStudyTypeGroupConnection_maxArgs = {
  field: tsCaseStudyTypeFieldsEnum;
};


type tsCaseStudyTypeGroupConnection_minArgs = {
  field: tsCaseStudyTypeFieldsEnum;
};


type tsCaseStudyTypeGroupConnection_sumArgs = {
  field: tsCaseStudyTypeFieldsEnum;
};

type tsCaseStudyTypeSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsCaseStudyTypeFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the CaseStudyType type and the CaseStudyType type */
type tsCaseStudyTypeToAncestorsCaseStudyTypeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCaseStudyType>>>;
};

type tsCaseStudyTypeToAncestorsCaseStudyTypeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCaseStudyTypeFilterListInput>;
};

/** Connection between the CaseStudyType type and the CaseStudy type */
type tsCaseStudyTypeToCaseStudyConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCaseStudy>>>;
};

type tsCaseStudyTypeToCaseStudyConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCaseStudyFilterListInput>;
};

/** Connection between the CaseStudyType type and the CaseStudyType type */
type tsCaseStudyTypeToCaseStudyTypeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCaseStudyType>>>;
};

type tsCaseStudyTypeToCaseStudyTypeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCaseStudyTypeFilterListInput>;
};

/** Connection between the CaseStudyType type and the ContentNode type */
type tsCaseStudyTypeToContentNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsCaseStudyTypeToContentNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the CaseStudyType type and the CaseStudyType type */
type tsCaseStudyTypeToParentCaseStudyTypeConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsCaseStudyType>;
};

type tsCaseStudyTypeToParentCaseStudyTypeConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsCaseStudyTypeFilterInput>;
};

/** Connection between the CaseStudyType type and the Taxonomy type */
type tsCaseStudyTypeToTaxonomyConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsTaxonomy>;
};

type tsCaseStudyTypeToTaxonomyConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsTaxonomyFilterInput>;
};

/** Field Group */
type tsCaseStudy_Camberroadmapcasestudy = tsAcfFieldGroup & {
  readonly camberRoadmapCaseStudy: Maybe<ReadonlyArray<Maybe<tsCaseStudy_Camberroadmapcasestudy_camberRoadmapCaseStudy>>>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly mobileCaseStudyTitle: Maybe<Scalars['String']>;
};

type tsCaseStudy_CamberroadmapcasestudyFilterInput = {
  readonly camberRoadmapCaseStudy: InputMaybe<tsCaseStudy_Camberroadmapcasestudy_camberRoadmapCaseStudyFilterListInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly mobileCaseStudyTitle: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsCaseStudy_Camberroadmapcasestudy_camberRoadmapCaseStudy = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
  readonly listContent: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type tsCaseStudy_Camberroadmapcasestudy_camberRoadmapCaseStudyFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<tsMediaItemFilterInput>;
  readonly listContent: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type tsCaseStudy_Camberroadmapcasestudy_camberRoadmapCaseStudyFilterListInput = {
  readonly elemMatch: InputMaybe<tsCaseStudy_Camberroadmapcasestudy_camberRoadmapCaseStudyFilterInput>;
};

/** Field Group */
type tsCaseStudy_Casestudy = tsAcfFieldGroup & {
  readonly appGallery: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
  readonly detailPageImage: Maybe<tsMediaItem>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly gallery: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
  readonly ourRole: Maybe<Scalars['String']>;
  readonly problem: Maybe<Scalars['String']>;
  readonly problemStrategyResultLayout: Maybe<Scalars['String']>;
  readonly result: Maybe<Scalars['String']>;
  readonly secondoryImage: Maybe<tsMediaItem>;
  readonly strategy: Maybe<Scalars['String']>;
  readonly technology: Maybe<ReadonlyArray<Maybe<tsCaseStudy_Casestudy_technology>>>;
  readonly type: Maybe<Scalars['String']>;
};

type tsCaseStudy_CasestudyFilterInput = {
  readonly appGallery: InputMaybe<tsMediaItemFilterListInput>;
  readonly detailPageImage: InputMaybe<tsMediaItemFilterInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly gallery: InputMaybe<tsMediaItemFilterListInput>;
  readonly ourRole: InputMaybe<StringQueryOperatorInput>;
  readonly problem: InputMaybe<StringQueryOperatorInput>;
  readonly problemStrategyResultLayout: InputMaybe<StringQueryOperatorInput>;
  readonly result: InputMaybe<StringQueryOperatorInput>;
  readonly secondoryImage: InputMaybe<tsMediaItemFilterInput>;
  readonly strategy: InputMaybe<StringQueryOperatorInput>;
  readonly technology: InputMaybe<tsCaseStudy_Casestudy_technologyFilterListInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsCaseStudy_Casestudy_technology = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly svgIcon: Maybe<Scalars['String']>;
};

type tsCaseStudy_Casestudy_technologyFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly svgIcon: InputMaybe<StringQueryOperatorInput>;
};

type tsCaseStudy_Casestudy_technologyFilterListInput = {
  readonly elemMatch: InputMaybe<tsCaseStudy_Casestudy_technologyFilterInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage = tsAcfFieldGroup & {
  readonly clientSaysHeading: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  readonly detailsPageImage: Maybe<tsMediaItem>;
  readonly featureHeading: Maybe<Scalars['String']>;
  readonly featuresListsForApps: Maybe<ReadonlyArray<Maybe<tsCaseStudy_Casestudydetailspage_featuresListsForApps>>>;
  readonly featuresListsForWeb: Maybe<ReadonlyArray<Maybe<tsCaseStudy_Casestudydetailspage_featuresListsForWeb>>>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly ourProcess: Maybe<tsCaseStudy_Casestudydetailspage_OurProcess>;
  readonly ourRoleSection: Maybe<tsCaseStudy_Casestudydetailspage_OurRoleSection>;
  readonly portfolioLinks: Maybe<tsCaseStudy_Casestudydetailspage_PortfolioLinks>;
  readonly problemChallengesResultLists: Maybe<ReadonlyArray<Maybe<tsCaseStudy_Casestudydetailspage_problemChallengesResultLists>>>;
  readonly services: Maybe<tsCaseStudy_Casestudydetailspage_Services>;
  readonly specialFeaturesContent: Maybe<Scalars['String']>;
  readonly specialFeaturesHeading: Maybe<Scalars['String']>;
  readonly tools: Maybe<tsCaseStudy_Casestudydetailspage_Tools>;
  readonly weFollowAgile: Maybe<tsCaseStudy_Casestudydetailspage_WeFollowAgile>;
};

type tsCaseStudy_CasestudydetailspageFilterInput = {
  readonly clientSaysHeading: InputMaybe<StringQueryOperatorInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly detailsPageImage: InputMaybe<tsMediaItemFilterInput>;
  readonly featureHeading: InputMaybe<StringQueryOperatorInput>;
  readonly featuresListsForApps: InputMaybe<tsCaseStudy_Casestudydetailspage_featuresListsForAppsFilterListInput>;
  readonly featuresListsForWeb: InputMaybe<tsCaseStudy_Casestudydetailspage_featuresListsForWebFilterListInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly ourProcess: InputMaybe<tsCaseStudy_Casestudydetailspage_OurProcessFilterInput>;
  readonly ourRoleSection: InputMaybe<tsCaseStudy_Casestudydetailspage_OurRoleSectionFilterInput>;
  readonly portfolioLinks: InputMaybe<tsCaseStudy_Casestudydetailspage_PortfolioLinksFilterInput>;
  readonly problemChallengesResultLists: InputMaybe<tsCaseStudy_Casestudydetailspage_problemChallengesResultListsFilterListInput>;
  readonly services: InputMaybe<tsCaseStudy_Casestudydetailspage_ServicesFilterInput>;
  readonly specialFeaturesContent: InputMaybe<StringQueryOperatorInput>;
  readonly specialFeaturesHeading: InputMaybe<StringQueryOperatorInput>;
  readonly tools: InputMaybe<tsCaseStudy_Casestudydetailspage_ToolsFilterInput>;
  readonly weFollowAgile: InputMaybe<tsCaseStudy_Casestudydetailspage_WeFollowAgileFilterInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage_OurProcess = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
};

type tsCaseStudy_Casestudydetailspage_OurProcessFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly cta: InputMaybe<tsAcfLinkFilterInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage_OurRoleSection = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly roleContent: Maybe<Scalars['String']>;
  readonly roleHeading: Maybe<Scalars['String']>;
};

type tsCaseStudy_Casestudydetailspage_OurRoleSectionFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly roleContent: InputMaybe<StringQueryOperatorInput>;
  readonly roleHeading: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage_PortfolioLinks = tsAcfFieldGroup & {
  readonly androidLink: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly iosLink: Maybe<Scalars['String']>;
  readonly webLink: Maybe<Scalars['String']>;
};

type tsCaseStudy_Casestudydetailspage_PortfolioLinksFilterInput = {
  readonly androidLink: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly iosLink: InputMaybe<StringQueryOperatorInput>;
  readonly webLink: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage_Services = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
};

type tsCaseStudy_Casestudydetailspage_ServicesFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage_Tools = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
};

type tsCaseStudy_Casestudydetailspage_ToolsFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage_WeFollowAgile = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
};

type tsCaseStudy_Casestudydetailspage_WeFollowAgileFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly cta: InputMaybe<tsAcfLinkFilterInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage_featuresListsForApps = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
};

type tsCaseStudy_Casestudydetailspage_featuresListsForAppsFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<tsMediaItemFilterInput>;
};

type tsCaseStudy_Casestudydetailspage_featuresListsForAppsFilterListInput = {
  readonly elemMatch: InputMaybe<tsCaseStudy_Casestudydetailspage_featuresListsForAppsFilterInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage_featuresListsForWeb = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
};

type tsCaseStudy_Casestudydetailspage_featuresListsForWebFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<tsMediaItemFilterInput>;
};

type tsCaseStudy_Casestudydetailspage_featuresListsForWebFilterListInput = {
  readonly elemMatch: InputMaybe<tsCaseStudy_Casestudydetailspage_featuresListsForWebFilterInput>;
};

/** Field Group */
type tsCaseStudy_Casestudydetailspage_problemChallengesResultLists = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
};

type tsCaseStudy_Casestudydetailspage_problemChallengesResultListsFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
};

type tsCaseStudy_Casestudydetailspage_problemChallengesResultListsFilterListInput = {
  readonly elemMatch: InputMaybe<tsCaseStudy_Casestudydetailspage_problemChallengesResultListsFilterInput>;
};

/** Field Group */
type tsCaseStudy_Newcasestudy = tsAcfFieldGroup & {
  readonly detailPageImage: Maybe<tsMediaItem>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly newCaseStudy: Maybe<Scalars['String']>;
  readonly ppcPage: Maybe<tsMediaItem>;
  readonly secondaryContent: Maybe<Scalars['String']>;
  readonly secondaryTitle: Maybe<Scalars['String']>;
  readonly sections: Maybe<ReadonlyArray<Maybe<tsCaseStudy_Newcasestudy_sections>>>;
  readonly shortContent: Maybe<Scalars['String']>;
  readonly toolsSection: Maybe<tsCaseStudy_Newcasestudy_ToolsSection>;
};

type tsCaseStudy_NewcasestudyFilterInput = {
  readonly detailPageImage: InputMaybe<tsMediaItemFilterInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly newCaseStudy: InputMaybe<StringQueryOperatorInput>;
  readonly ppcPage: InputMaybe<tsMediaItemFilterInput>;
  readonly secondaryContent: InputMaybe<StringQueryOperatorInput>;
  readonly secondaryTitle: InputMaybe<StringQueryOperatorInput>;
  readonly sections: InputMaybe<tsCaseStudy_Newcasestudy_sectionsFilterListInput>;
  readonly shortContent: InputMaybe<StringQueryOperatorInput>;
  readonly toolsSection: InputMaybe<tsCaseStudy_Newcasestudy_ToolsSectionFilterInput>;
};

/** Field Group */
type tsCaseStudy_Newcasestudy_ToolsSection = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly processContent: Maybe<Scalars['String']>;
  readonly processCta: Maybe<tsAcfLink>;
  readonly processHeading: Maybe<Scalars['String']>;
  readonly toolsContent: Maybe<Scalars['String']>;
  readonly toolsHeading: Maybe<Scalars['String']>;
};

type tsCaseStudy_Newcasestudy_ToolsSectionFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly processContent: InputMaybe<StringQueryOperatorInput>;
  readonly processCta: InputMaybe<tsAcfLinkFilterInput>;
  readonly processHeading: InputMaybe<StringQueryOperatorInput>;
  readonly toolsContent: InputMaybe<StringQueryOperatorInput>;
  readonly toolsHeading: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsCaseStudy_Newcasestudy_sections = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
  readonly secondImage: Maybe<tsMediaItem>;
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type tsCaseStudy_Newcasestudy_sectionsFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<tsMediaItemFilterInput>;
  readonly secondImage: InputMaybe<tsMediaItemFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type tsCaseStudy_Newcasestudy_sectionsFilterListInput = {
  readonly elemMatch: InputMaybe<tsCaseStudy_Newcasestudy_sectionsFilterInput>;
};

/** Field Group */
type tsCaseStudy_Portfolio = tsAcfFieldGroup & {
  readonly backgroundGradient: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly listingPage: Maybe<tsMediaItem>;
  readonly portfolio: Maybe<tsCaseStudy_Portfolio_Portfolio>;
  readonly startupTemplateImage: Maybe<tsMediaItem>;
};

type tsCaseStudy_PortfolioFilterInput = {
  readonly backgroundGradient: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly listingPage: InputMaybe<tsMediaItemFilterInput>;
  readonly portfolio: InputMaybe<tsCaseStudy_Portfolio_PortfolioFilterInput>;
  readonly startupTemplateImage: InputMaybe<tsMediaItemFilterInput>;
};

/** Field Group */
type tsCaseStudy_Portfolio_Portfolio = tsAcfFieldGroup & {
  readonly androidLink: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly iosLink: Maybe<Scalars['String']>;
  readonly webLink: Maybe<Scalars['String']>;
};

type tsCaseStudy_Portfolio_PortfolioFilterInput = {
  readonly androidLink: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly iosLink: InputMaybe<StringQueryOperatorInput>;
  readonly webLink: InputMaybe<StringQueryOperatorInput>;
};

/** The category type */
type tsCategory = Node & tsDatabaseIdentifier & tsHierarchicalTermNode & tsMenuItemLinkable & tsNode & tsTermNode & tsUniformResourceIdentifiable & {
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsCategoryToAncestorsCategoryConnection>;
  readonly children: ReadonlyArray<Node>;
  /** Connection between the category type and the ContentNode type */
  readonly contentNodes: Maybe<tsCategoryToContentNodeConnection>;
  /** The number of objects connected to the object */
  readonly count: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** The description of the object */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The link to the term */
  readonly link: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** Connection between the category type and the post type */
  readonly posts: Maybe<tsCategoryToPostConnection>;
  /** The Yoast SEO data of the Categories taxonomy. */
  readonly seo: Maybe<tsTaxonomySEO>;
  /** An alphanumeric identifier for the object unique to its type. */
  readonly slug: Maybe<Scalars['String']>;
  /** Connection between the category type and the Taxonomy type */
  readonly taxonomy: Maybe<tsCategoryToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  readonly taxonomyName: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  readonly termGroupId: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  readonly termTaxonomyId: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** Connection between the category type and the category type */
  readonly wpChildren: Maybe<tsCategoryToCategoryConnection>;
  /** Connection between the category type and the category type */
  readonly wpParent: Maybe<tsCategoryToParentCategoryConnectionEdge>;
};

type tsCategoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCategoryEdge>;
  readonly group: ReadonlyArray<tsCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCategoryConnection_distinctArgs = {
  field: tsCategoryFieldsEnum;
};


type tsCategoryConnection_groupArgs = {
  field: tsCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCategoryConnection_maxArgs = {
  field: tsCategoryFieldsEnum;
};


type tsCategoryConnection_minArgs = {
  field: tsCategoryFieldsEnum;
};


type tsCategoryConnection_sumArgs = {
  field: tsCategoryFieldsEnum;
};

type tsCategoryEdge = {
  readonly next: Maybe<tsCategory>;
  readonly node: tsCategory;
  readonly previous: Maybe<tsCategory>;
};

type tsCategoryFieldsEnum =
  | 'ancestors.nodes'
  | 'ancestors.nodes.ancestors.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentNodes.nodes'
  | 'ancestors.nodes.count'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.description'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.name'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parentDatabaseId'
  | 'ancestors.nodes.parentId'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.posts.nodes'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.taxonomyName'
  | 'ancestors.nodes.termGroupId'
  | 'ancestors.nodes.termTaxonomyId'
  | 'ancestors.nodes.uri'
  | 'ancestors.nodes.wpChildren.nodes'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentNodes.nodes'
  | 'contentNodes.nodes.children'
  | 'contentNodes.nodes.children.children'
  | 'contentNodes.nodes.children.id'
  | 'contentNodes.nodes.contentTypeName'
  | 'contentNodes.nodes.databaseId'
  | 'contentNodes.nodes.date'
  | 'contentNodes.nodes.dateGmt'
  | 'contentNodes.nodes.desiredSlug'
  | 'contentNodes.nodes.enclosure'
  | 'contentNodes.nodes.guid'
  | 'contentNodes.nodes.id'
  | 'contentNodes.nodes.internal.content'
  | 'contentNodes.nodes.internal.contentDigest'
  | 'contentNodes.nodes.internal.contentFilePath'
  | 'contentNodes.nodes.internal.description'
  | 'contentNodes.nodes.internal.fieldOwners'
  | 'contentNodes.nodes.internal.ignoreType'
  | 'contentNodes.nodes.internal.mediaType'
  | 'contentNodes.nodes.internal.owner'
  | 'contentNodes.nodes.internal.type'
  | 'contentNodes.nodes.isContentNode'
  | 'contentNodes.nodes.isTermNode'
  | 'contentNodes.nodes.link'
  | 'contentNodes.nodes.modified'
  | 'contentNodes.nodes.modifiedGmt'
  | 'contentNodes.nodes.nodeType'
  | 'contentNodes.nodes.parent.children'
  | 'contentNodes.nodes.parent.id'
  | 'contentNodes.nodes.seo.breadcrumbs'
  | 'contentNodes.nodes.seo.canonical'
  | 'contentNodes.nodes.seo.cornerstone'
  | 'contentNodes.nodes.seo.focuskw'
  | 'contentNodes.nodes.seo.fullHead'
  | 'contentNodes.nodes.seo.metaDesc'
  | 'contentNodes.nodes.seo.metaKeywords'
  | 'contentNodes.nodes.seo.metaRobotsNofollow'
  | 'contentNodes.nodes.seo.metaRobotsNoindex'
  | 'contentNodes.nodes.seo.opengraphAuthor'
  | 'contentNodes.nodes.seo.opengraphDescription'
  | 'contentNodes.nodes.seo.opengraphModifiedTime'
  | 'contentNodes.nodes.seo.opengraphPublishedTime'
  | 'contentNodes.nodes.seo.opengraphPublisher'
  | 'contentNodes.nodes.seo.opengraphSiteName'
  | 'contentNodes.nodes.seo.opengraphTitle'
  | 'contentNodes.nodes.seo.opengraphType'
  | 'contentNodes.nodes.seo.opengraphUrl'
  | 'contentNodes.nodes.seo.readingTime'
  | 'contentNodes.nodes.seo.title'
  | 'contentNodes.nodes.seo.twitterDescription'
  | 'contentNodes.nodes.seo.twitterTitle'
  | 'contentNodes.nodes.slug'
  | 'contentNodes.nodes.status'
  | 'contentNodes.nodes.template.templateName'
  | 'contentNodes.nodes.uri'
  | 'count'
  | 'databaseId'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'link'
  | 'name'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'posts.nodes'
  | 'posts.nodes.authorDatabaseId'
  | 'posts.nodes.authorId'
  | 'posts.nodes.caseStudy.appGallery'
  | 'posts.nodes.caseStudy.fieldGroupName'
  | 'posts.nodes.caseStudy.gallery'
  | 'posts.nodes.caseStudy.ourRole'
  | 'posts.nodes.caseStudy.problem'
  | 'posts.nodes.caseStudy.problemStrategyResultLayout'
  | 'posts.nodes.caseStudy.result'
  | 'posts.nodes.caseStudy.strategy'
  | 'posts.nodes.caseStudy.technology'
  | 'posts.nodes.caseStudy.type'
  | 'posts.nodes.categories.nodes'
  | 'posts.nodes.children'
  | 'posts.nodes.children.children'
  | 'posts.nodes.children.id'
  | 'posts.nodes.commentCount'
  | 'posts.nodes.commentStatus'
  | 'posts.nodes.comments.nodes'
  | 'posts.nodes.content'
  | 'posts.nodes.contentTypeName'
  | 'posts.nodes.databaseId'
  | 'posts.nodes.date'
  | 'posts.nodes.dateGmt'
  | 'posts.nodes.desiredSlug'
  | 'posts.nodes.enclosure'
  | 'posts.nodes.excerpt'
  | 'posts.nodes.featuredImageDatabaseId'
  | 'posts.nodes.featuredImageId'
  | 'posts.nodes.guid'
  | 'posts.nodes.id'
  | 'posts.nodes.internal.content'
  | 'posts.nodes.internal.contentDigest'
  | 'posts.nodes.internal.contentFilePath'
  | 'posts.nodes.internal.description'
  | 'posts.nodes.internal.fieldOwners'
  | 'posts.nodes.internal.ignoreType'
  | 'posts.nodes.internal.mediaType'
  | 'posts.nodes.internal.owner'
  | 'posts.nodes.internal.type'
  | 'posts.nodes.isContentNode'
  | 'posts.nodes.isRevision'
  | 'posts.nodes.isSticky'
  | 'posts.nodes.isTermNode'
  | 'posts.nodes.link'
  | 'posts.nodes.modified'
  | 'posts.nodes.modifiedGmt'
  | 'posts.nodes.next.authorDatabaseId'
  | 'posts.nodes.next.authorId'
  | 'posts.nodes.next.children'
  | 'posts.nodes.next.commentCount'
  | 'posts.nodes.next.commentStatus'
  | 'posts.nodes.next.content'
  | 'posts.nodes.next.contentTypeName'
  | 'posts.nodes.next.databaseId'
  | 'posts.nodes.next.date'
  | 'posts.nodes.next.dateGmt'
  | 'posts.nodes.next.desiredSlug'
  | 'posts.nodes.next.enclosure'
  | 'posts.nodes.next.excerpt'
  | 'posts.nodes.next.featuredImageDatabaseId'
  | 'posts.nodes.next.featuredImageId'
  | 'posts.nodes.next.guid'
  | 'posts.nodes.next.id'
  | 'posts.nodes.next.isContentNode'
  | 'posts.nodes.next.isRevision'
  | 'posts.nodes.next.isSticky'
  | 'posts.nodes.next.isTermNode'
  | 'posts.nodes.next.link'
  | 'posts.nodes.next.modified'
  | 'posts.nodes.next.modifiedGmt'
  | 'posts.nodes.next.nodeType'
  | 'posts.nodes.next.pingStatus'
  | 'posts.nodes.next.pinged'
  | 'posts.nodes.next.slug'
  | 'posts.nodes.next.status'
  | 'posts.nodes.next.title'
  | 'posts.nodes.next.toPing'
  | 'posts.nodes.next.uri'
  | 'posts.nodes.nodeType'
  | 'posts.nodes.parent.children'
  | 'posts.nodes.parent.id'
  | 'posts.nodes.pingStatus'
  | 'posts.nodes.pinged'
  | 'posts.nodes.postFormats.nodes'
  | 'posts.nodes.previous.authorDatabaseId'
  | 'posts.nodes.previous.authorId'
  | 'posts.nodes.previous.children'
  | 'posts.nodes.previous.commentCount'
  | 'posts.nodes.previous.commentStatus'
  | 'posts.nodes.previous.content'
  | 'posts.nodes.previous.contentTypeName'
  | 'posts.nodes.previous.databaseId'
  | 'posts.nodes.previous.date'
  | 'posts.nodes.previous.dateGmt'
  | 'posts.nodes.previous.desiredSlug'
  | 'posts.nodes.previous.enclosure'
  | 'posts.nodes.previous.excerpt'
  | 'posts.nodes.previous.featuredImageDatabaseId'
  | 'posts.nodes.previous.featuredImageId'
  | 'posts.nodes.previous.guid'
  | 'posts.nodes.previous.id'
  | 'posts.nodes.previous.isContentNode'
  | 'posts.nodes.previous.isRevision'
  | 'posts.nodes.previous.isSticky'
  | 'posts.nodes.previous.isTermNode'
  | 'posts.nodes.previous.link'
  | 'posts.nodes.previous.modified'
  | 'posts.nodes.previous.modifiedGmt'
  | 'posts.nodes.previous.nodeType'
  | 'posts.nodes.previous.pingStatus'
  | 'posts.nodes.previous.pinged'
  | 'posts.nodes.previous.slug'
  | 'posts.nodes.previous.status'
  | 'posts.nodes.previous.title'
  | 'posts.nodes.previous.toPing'
  | 'posts.nodes.previous.uri'
  | 'posts.nodes.selectCaseStudy.fieldGroupName'
  | 'posts.nodes.seo.breadcrumbs'
  | 'posts.nodes.seo.canonical'
  | 'posts.nodes.seo.cornerstone'
  | 'posts.nodes.seo.focuskw'
  | 'posts.nodes.seo.fullHead'
  | 'posts.nodes.seo.metaDesc'
  | 'posts.nodes.seo.metaKeywords'
  | 'posts.nodes.seo.metaRobotsNofollow'
  | 'posts.nodes.seo.metaRobotsNoindex'
  | 'posts.nodes.seo.opengraphAuthor'
  | 'posts.nodes.seo.opengraphDescription'
  | 'posts.nodes.seo.opengraphModifiedTime'
  | 'posts.nodes.seo.opengraphPublishedTime'
  | 'posts.nodes.seo.opengraphPublisher'
  | 'posts.nodes.seo.opengraphSiteName'
  | 'posts.nodes.seo.opengraphTitle'
  | 'posts.nodes.seo.opengraphType'
  | 'posts.nodes.seo.opengraphUrl'
  | 'posts.nodes.seo.readingTime'
  | 'posts.nodes.seo.title'
  | 'posts.nodes.seo.twitterDescription'
  | 'posts.nodes.seo.twitterTitle'
  | 'posts.nodes.slug'
  | 'posts.nodes.status'
  | 'posts.nodes.tags.nodes'
  | 'posts.nodes.template.templateName'
  | 'posts.nodes.terms.nodes'
  | 'posts.nodes.title'
  | 'posts.nodes.toPing'
  | 'posts.nodes.uri'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'taxonomyName'
  | 'taxonomy.node.archivePath'
  | 'taxonomy.node.children'
  | 'taxonomy.node.children.children'
  | 'taxonomy.node.children.id'
  | 'taxonomy.node.connectedContentTypes.nodes'
  | 'taxonomy.node.description'
  | 'taxonomy.node.graphqlPluralName'
  | 'taxonomy.node.graphqlSingleName'
  | 'taxonomy.node.hierarchical'
  | 'taxonomy.node.id'
  | 'taxonomy.node.internal.content'
  | 'taxonomy.node.internal.contentDigest'
  | 'taxonomy.node.internal.contentFilePath'
  | 'taxonomy.node.internal.description'
  | 'taxonomy.node.internal.fieldOwners'
  | 'taxonomy.node.internal.ignoreType'
  | 'taxonomy.node.internal.mediaType'
  | 'taxonomy.node.internal.owner'
  | 'taxonomy.node.internal.type'
  | 'taxonomy.node.label'
  | 'taxonomy.node.name'
  | 'taxonomy.node.nodeType'
  | 'taxonomy.node.parent.children'
  | 'taxonomy.node.parent.id'
  | 'taxonomy.node.public'
  | 'taxonomy.node.restBase'
  | 'taxonomy.node.restControllerClass'
  | 'taxonomy.node.showCloud'
  | 'taxonomy.node.showInAdminColumn'
  | 'taxonomy.node.showInGraphql'
  | 'taxonomy.node.showInMenu'
  | 'taxonomy.node.showInNavMenus'
  | 'taxonomy.node.showInQuickEdit'
  | 'taxonomy.node.showInRest'
  | 'taxonomy.node.showUi'
  | 'termGroupId'
  | 'termTaxonomyId'
  | 'uri'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.ancestors.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentNodes.nodes'
  | 'wpChildren.nodes.count'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.description'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.name'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parentDatabaseId'
  | 'wpChildren.nodes.parentId'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.posts.nodes'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.taxonomyName'
  | 'wpChildren.nodes.termGroupId'
  | 'wpChildren.nodes.termTaxonomyId'
  | 'wpChildren.nodes.uri'
  | 'wpChildren.nodes.wpChildren.nodes'
  | 'wpParent.node.ancestors.nodes'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentNodes.nodes'
  | 'wpParent.node.count'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.description'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.name'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parentDatabaseId'
  | 'wpParent.node.parentId'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.posts.nodes'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.taxonomyName'
  | 'wpParent.node.termGroupId'
  | 'wpParent.node.termTaxonomyId'
  | 'wpParent.node.uri'
  | 'wpParent.node.wpChildren.nodes';

type tsCategoryFilterInput = {
  readonly ancestors: InputMaybe<tsCategoryToAncestorsCategoryConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentNodes: InputMaybe<tsCategoryToContentNodeConnectionFilterInput>;
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly posts: InputMaybe<tsCategoryToPostConnectionFilterInput>;
  readonly seo: InputMaybe<tsTaxonomySEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly taxonomy: InputMaybe<tsCategoryToTaxonomyConnectionEdgeFilterInput>;
  readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
  readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
  readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsCategoryToCategoryConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsCategoryToParentCategoryConnectionEdgeFilterInput>;
};

type tsCategoryFilterListInput = {
  readonly elemMatch: InputMaybe<tsCategoryFilterInput>;
};

type tsCategoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCategoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCategoryGroupConnection_distinctArgs = {
  field: tsCategoryFieldsEnum;
};


type tsCategoryGroupConnection_groupArgs = {
  field: tsCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCategoryGroupConnection_maxArgs = {
  field: tsCategoryFieldsEnum;
};


type tsCategoryGroupConnection_minArgs = {
  field: tsCategoryFieldsEnum;
};


type tsCategoryGroupConnection_sumArgs = {
  field: tsCategoryFieldsEnum;
};

type tsCategorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsCategoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the category type and the category type */
type tsCategoryToAncestorsCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCategory>>>;
};

type tsCategoryToAncestorsCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCategoryFilterListInput>;
};

/** Connection between the category type and the category type */
type tsCategoryToCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCategory>>>;
};

type tsCategoryToCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCategoryFilterListInput>;
};

/** Connection between the category type and the ContentNode type */
type tsCategoryToContentNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsCategoryToContentNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the category type and the category type */
type tsCategoryToParentCategoryConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsCategory>;
};

type tsCategoryToParentCategoryConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsCategoryFilterInput>;
};

/** Connection between the category type and the post type */
type tsCategoryToPostConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsPost>>>;
};

type tsCategoryToPostConnectionFilterInput = {
  readonly nodes: InputMaybe<tsPostFilterListInput>;
};

/** Connection between the category type and the Taxonomy type */
type tsCategoryToTaxonomyConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsTaxonomy>;
};

type tsCategoryToTaxonomyConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsTaxonomyFilterInput>;
};

/** A Gravity Forms checkbox field. */
type tsCheckboxField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSelectAllChoices & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Checkbox field value. */
  readonly checkboxValues: Maybe<ReadonlyArray<Maybe<tsCheckboxFieldValue>>>;
  /** The available choices for the checkbox field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsCheckboxFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Whether the \&quot;select all\&quot; choice should be displayed. */
  readonly hasSelectAll: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the checkbox field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsCheckboxInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** CheckboxFieldChoice choice values. */
type tsCheckboxFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** The individual properties for each element of the Checkbox value field. */
type tsCheckboxFieldValue = {
  /** Input ID. */
  readonly inputId: Maybe<Scalars['Float']>;
  /** Input text. */
  readonly text: Maybe<Scalars['String']>;
  /** Input value. */
  readonly value: Maybe<Scalars['String']>;
};

/** CheckboxInputProperty input values. */
type tsCheckboxInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithSelectAllChoices & {
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
};

/** A Comment object */
type tsComment = Node & tsDatabaseIdentifier & tsNode & {
  /** User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL. */
  readonly agent: Maybe<Scalars['String']>;
  /** The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL. */
  readonly approved: Maybe<Scalars['Boolean']>;
  /** The author of the comment */
  readonly author: Maybe<tsCommentToCommenterConnectionEdge>;
  /** IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL. */
  readonly authorIp: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  /** Connection between the Comment type and the ContentNode type */
  readonly commentedOn: Maybe<tsCommentToContentNodeConnectionEdge>;
  /** Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL. */
  readonly content: Maybe<Scalars['String']>;
  /** The unique identifier stored in the database */
  readonly databaseId: Scalars['Int'];
  /** Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL. */
  readonly date: Maybe<Scalars['Date']>;
  /** Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL. */
  readonly karma: Maybe<Scalars['Int']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** The database id of the parent comment node or null if it is the root comment */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent comment node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** Connection between the Comment type and the Comment type */
  readonly replies: Maybe<tsCommentToCommentConnection>;
  /** Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL. */
  readonly type: Maybe<Scalars['String']>;
  /** Connection between the Comment type and the Comment type */
  readonly wpParent: Maybe<tsCommentToParentCommentConnectionEdge>;
};


/** A Comment object */
type tsComment_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


/** A Comment object */
type tsComment_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

/** A Comment Author object */
type tsCommentAuthor = Node & tsCommenter & tsNode & {
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  readonly avatar: Maybe<tsAvatar>;
  readonly children: ReadonlyArray<Node>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Scalars['Int'];
  /** The email for the comment author */
  readonly email: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** The name for the comment author. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** The url the comment author. */
  readonly url: Maybe<Scalars['String']>;
};

type tsCommentAuthorConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCommentAuthorEdge>;
  readonly group: ReadonlyArray<tsCommentAuthorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCommentAuthor>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCommentAuthorConnection_distinctArgs = {
  field: tsCommentAuthorFieldsEnum;
};


type tsCommentAuthorConnection_groupArgs = {
  field: tsCommentAuthorFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCommentAuthorConnection_maxArgs = {
  field: tsCommentAuthorFieldsEnum;
};


type tsCommentAuthorConnection_minArgs = {
  field: tsCommentAuthorFieldsEnum;
};


type tsCommentAuthorConnection_sumArgs = {
  field: tsCommentAuthorFieldsEnum;
};

type tsCommentAuthorEdge = {
  readonly next: Maybe<tsCommentAuthor>;
  readonly node: tsCommentAuthor;
  readonly previous: Maybe<tsCommentAuthor>;
};

type tsCommentAuthorFieldsEnum =
  | 'avatar.default'
  | 'avatar.extraAttr'
  | 'avatar.forceDefault'
  | 'avatar.foundAvatar'
  | 'avatar.height'
  | 'avatar.rating'
  | 'avatar.scheme'
  | 'avatar.size'
  | 'avatar.url'
  | 'avatar.width'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'databaseId'
  | 'email'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'url';

type tsCommentAuthorFilterInput = {
  readonly avatar: InputMaybe<tsAvatarFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsCommentAuthorGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCommentAuthorEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsCommentAuthorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsCommentAuthor>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCommentAuthorGroupConnection_distinctArgs = {
  field: tsCommentAuthorFieldsEnum;
};


type tsCommentAuthorGroupConnection_groupArgs = {
  field: tsCommentAuthorFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCommentAuthorGroupConnection_maxArgs = {
  field: tsCommentAuthorFieldsEnum;
};


type tsCommentAuthorGroupConnection_minArgs = {
  field: tsCommentAuthorFieldsEnum;
};


type tsCommentAuthorGroupConnection_sumArgs = {
  field: tsCommentAuthorFieldsEnum;
};

type tsCommentAuthorSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsCommentAuthorFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type tsCommentConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCommentEdge>;
  readonly group: ReadonlyArray<tsCommentGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsComment>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCommentConnection_distinctArgs = {
  field: tsCommentFieldsEnum;
};


type tsCommentConnection_groupArgs = {
  field: tsCommentFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCommentConnection_maxArgs = {
  field: tsCommentFieldsEnum;
};


type tsCommentConnection_minArgs = {
  field: tsCommentFieldsEnum;
};


type tsCommentConnection_sumArgs = {
  field: tsCommentFieldsEnum;
};

type tsCommentEdge = {
  readonly next: Maybe<tsComment>;
  readonly node: tsComment;
  readonly previous: Maybe<tsComment>;
};

type tsCommentFieldsEnum =
  | 'agent'
  | 'approved'
  | 'authorIp'
  | 'author.node.avatar.default'
  | 'author.node.avatar.extraAttr'
  | 'author.node.avatar.forceDefault'
  | 'author.node.avatar.foundAvatar'
  | 'author.node.avatar.height'
  | 'author.node.avatar.rating'
  | 'author.node.avatar.scheme'
  | 'author.node.avatar.size'
  | 'author.node.avatar.url'
  | 'author.node.avatar.width'
  | 'author.node.databaseId'
  | 'author.node.email'
  | 'author.node.id'
  | 'author.node.name'
  | 'author.node.url'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'commentedOn.node.children'
  | 'commentedOn.node.children.children'
  | 'commentedOn.node.children.id'
  | 'commentedOn.node.contentTypeName'
  | 'commentedOn.node.databaseId'
  | 'commentedOn.node.date'
  | 'commentedOn.node.dateGmt'
  | 'commentedOn.node.desiredSlug'
  | 'commentedOn.node.enclosure'
  | 'commentedOn.node.guid'
  | 'commentedOn.node.id'
  | 'commentedOn.node.internal.content'
  | 'commentedOn.node.internal.contentDigest'
  | 'commentedOn.node.internal.contentFilePath'
  | 'commentedOn.node.internal.description'
  | 'commentedOn.node.internal.fieldOwners'
  | 'commentedOn.node.internal.ignoreType'
  | 'commentedOn.node.internal.mediaType'
  | 'commentedOn.node.internal.owner'
  | 'commentedOn.node.internal.type'
  | 'commentedOn.node.isContentNode'
  | 'commentedOn.node.isTermNode'
  | 'commentedOn.node.link'
  | 'commentedOn.node.modified'
  | 'commentedOn.node.modifiedGmt'
  | 'commentedOn.node.nodeType'
  | 'commentedOn.node.parent.children'
  | 'commentedOn.node.parent.id'
  | 'commentedOn.node.seo.breadcrumbs'
  | 'commentedOn.node.seo.canonical'
  | 'commentedOn.node.seo.cornerstone'
  | 'commentedOn.node.seo.focuskw'
  | 'commentedOn.node.seo.fullHead'
  | 'commentedOn.node.seo.metaDesc'
  | 'commentedOn.node.seo.metaKeywords'
  | 'commentedOn.node.seo.metaRobotsNofollow'
  | 'commentedOn.node.seo.metaRobotsNoindex'
  | 'commentedOn.node.seo.opengraphAuthor'
  | 'commentedOn.node.seo.opengraphDescription'
  | 'commentedOn.node.seo.opengraphModifiedTime'
  | 'commentedOn.node.seo.opengraphPublishedTime'
  | 'commentedOn.node.seo.opengraphPublisher'
  | 'commentedOn.node.seo.opengraphSiteName'
  | 'commentedOn.node.seo.opengraphTitle'
  | 'commentedOn.node.seo.opengraphType'
  | 'commentedOn.node.seo.opengraphUrl'
  | 'commentedOn.node.seo.readingTime'
  | 'commentedOn.node.seo.title'
  | 'commentedOn.node.seo.twitterDescription'
  | 'commentedOn.node.seo.twitterTitle'
  | 'commentedOn.node.slug'
  | 'commentedOn.node.status'
  | 'commentedOn.node.template.templateName'
  | 'commentedOn.node.uri'
  | 'content'
  | 'databaseId'
  | 'date'
  | 'dateGmt'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'karma'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'replies.nodes'
  | 'replies.nodes.agent'
  | 'replies.nodes.approved'
  | 'replies.nodes.authorIp'
  | 'replies.nodes.children'
  | 'replies.nodes.children.children'
  | 'replies.nodes.children.id'
  | 'replies.nodes.content'
  | 'replies.nodes.databaseId'
  | 'replies.nodes.date'
  | 'replies.nodes.dateGmt'
  | 'replies.nodes.id'
  | 'replies.nodes.internal.content'
  | 'replies.nodes.internal.contentDigest'
  | 'replies.nodes.internal.contentFilePath'
  | 'replies.nodes.internal.description'
  | 'replies.nodes.internal.fieldOwners'
  | 'replies.nodes.internal.ignoreType'
  | 'replies.nodes.internal.mediaType'
  | 'replies.nodes.internal.owner'
  | 'replies.nodes.internal.type'
  | 'replies.nodes.karma'
  | 'replies.nodes.nodeType'
  | 'replies.nodes.parentDatabaseId'
  | 'replies.nodes.parentId'
  | 'replies.nodes.parent.children'
  | 'replies.nodes.parent.id'
  | 'replies.nodes.replies.nodes'
  | 'replies.nodes.type'
  | 'type'
  | 'wpParent.node.agent'
  | 'wpParent.node.approved'
  | 'wpParent.node.authorIp'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.content'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.date'
  | 'wpParent.node.dateGmt'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.karma'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parentDatabaseId'
  | 'wpParent.node.parentId'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.replies.nodes'
  | 'wpParent.node.type';

type tsCommentFilterInput = {
  readonly agent: InputMaybe<StringQueryOperatorInput>;
  readonly approved: InputMaybe<BooleanQueryOperatorInput>;
  readonly author: InputMaybe<tsCommentToCommenterConnectionEdgeFilterInput>;
  readonly authorIp: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly commentedOn: InputMaybe<tsCommentToContentNodeConnectionEdgeFilterInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly karma: InputMaybe<IntQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly replies: InputMaybe<tsCommentToCommentConnectionFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly wpParent: InputMaybe<tsCommentToParentCommentConnectionEdgeFilterInput>;
};

type tsCommentFilterListInput = {
  readonly elemMatch: InputMaybe<tsCommentFilterInput>;
};

type tsCommentGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsCommentEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsCommentGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsComment>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsCommentGroupConnection_distinctArgs = {
  field: tsCommentFieldsEnum;
};


type tsCommentGroupConnection_groupArgs = {
  field: tsCommentFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsCommentGroupConnection_maxArgs = {
  field: tsCommentFieldsEnum;
};


type tsCommentGroupConnection_minArgs = {
  field: tsCommentFieldsEnum;
};


type tsCommentGroupConnection_sumArgs = {
  field: tsCommentFieldsEnum;
};

type tsCommentSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsCommentFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the Comment type and the Comment type */
type tsCommentToCommentConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsComment>>>;
};

type tsCommentToCommentConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCommentFilterListInput>;
};

/** Connection between the Comment type and the Commenter type */
type tsCommentToCommenterConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsCommenter>;
};

type tsCommentToCommenterConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsCommenterFilterInput>;
};

/** Connection between the Comment type and the ContentNode type */
type tsCommentToContentNodeConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsContentNode>;
};

type tsCommentToContentNodeConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsContentNodeFilterInput>;
};

/** Connection between the Comment type and the Comment type */
type tsCommentToParentCommentConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsComment>;
};

type tsCommentToParentCommentConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsCommentFilterInput>;
};

type tsCommenter = {
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  readonly avatar: Maybe<tsAvatar>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Scalars['Int'];
  /** The email address of the author of a comment. */
  readonly email: Maybe<Scalars['String']>;
  /** The globally unique identifier for the comment author. */
  readonly id: Scalars['ID'];
  /** The name of the author of a comment. */
  readonly name: Maybe<Scalars['String']>;
  /** The url of the author of a comment. */
  readonly url: Maybe<Scalars['String']>;
};

type tsCommenterFilterInput = {
  readonly avatar: InputMaybe<tsAvatarFilterInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<IDQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

/** Gravity Forms conditional logic. */
type tsConditionalLogic = {
  /** The type of action the conditional logic will perform. */
  readonly actionType: Maybe<tsConditionalLogicActionTypeEnum>;
  /** Determines how to the rules should be evaluated. */
  readonly logicType: Maybe<tsConditionalLogicLogicTypeEnum>;
  /** Conditional logic rules. */
  readonly rules: Maybe<ReadonlyArray<Maybe<tsConditionalLogicRule>>>;
};

/** The type of action the conditional logic will perform. */
type tsConditionalLogicActionTypeEnum =
  | 'HIDE'
  | 'SHOW';

type tsConditionalLogicActionTypeEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsConditionalLogicActionTypeEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsConditionalLogicActionTypeEnum>>>;
  readonly ne: InputMaybe<tsConditionalLogicActionTypeEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsConditionalLogicActionTypeEnum>>>;
};

type tsConditionalLogicFilterInput = {
  readonly actionType: InputMaybe<tsConditionalLogicActionTypeEnumQueryOperatorInput>;
  readonly logicType: InputMaybe<tsConditionalLogicLogicTypeEnumQueryOperatorInput>;
  readonly rules: InputMaybe<tsConditionalLogicRuleFilterListInput>;
};

/** Determines how to the rules should be evaluated. */
type tsConditionalLogicLogicTypeEnum =
  | 'ALL'
  | 'ANY';

type tsConditionalLogicLogicTypeEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsConditionalLogicLogicTypeEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsConditionalLogicLogicTypeEnum>>>;
  readonly ne: InputMaybe<tsConditionalLogicLogicTypeEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsConditionalLogicLogicTypeEnum>>>;
};

/** Gravity Forms conditional logic rule. */
type tsConditionalLogicRule = {
  /** Target field Id. Field that will have it’s value compared with the value property to determine if this rule is a match. */
  readonly fieldId: Maybe<Scalars['Float']>;
  /** Operator to be used when evaluating this rule. */
  readonly operator: Maybe<tsFormRuleOperatorEnum>;
  /** The value to compare with field specified by fieldId. */
  readonly value: Maybe<Scalars['String']>;
};

type tsConditionalLogicRuleFilterInput = {
  readonly fieldId: InputMaybe<FloatQueryOperatorInput>;
  readonly operator: InputMaybe<tsFormRuleOperatorEnumQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type tsConditionalLogicRuleFilterListInput = {
  readonly elemMatch: InputMaybe<tsConditionalLogicRuleFilterInput>;
};

type tsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsEdge>;
  readonly group: ReadonlyArray<tsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ts>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsConnection_distinctArgs = {
  field: tsFieldsEnum;
};


type tsConnection_groupArgs = {
  field: tsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsConnection_maxArgs = {
  field: tsFieldsEnum;
};


type tsConnection_minArgs = {
  field: tsFieldsEnum;
};


type tsConnection_sumArgs = {
  field: tsFieldsEnum;
};

/** A Gravity Forms consent field. */
type tsConsentField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithCheckboxLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithRules & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Text of the consent checkbox. */
  readonly checkboxLabel: Maybe<Scalars['String']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** Consent field value. This is `true` when consent is given, `false` when it is not. */
  readonly consentValue: Maybe<Scalars['Boolean']>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

type tsContentNode = {
  readonly children: ReadonlyArray<Node>;
  /** Connection between the ContentNode type and the ContentType type */
  readonly contentType: Maybe<tsContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  readonly contentTypeName: Scalars['String'];
  /** The ID of the node in the database. */
  readonly databaseId: Scalars['Int'];
  /** Post publishing date. */
  readonly date: Maybe<Scalars['Date']>;
  /** The publishing date set in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** The desired slug of the post */
  readonly desiredSlug: Maybe<Scalars['String']>;
  /** The RSS enclosure for the object */
  readonly enclosure: Maybe<Scalars['String']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  readonly guid: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  readonly lastEditedBy: Maybe<tsContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  readonly link: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  readonly modified: Maybe<Scalars['Date']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  readonly modifiedGmt: Maybe<Scalars['Date']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  readonly slug: Maybe<Scalars['String']>;
  /** The current status of the object */
  readonly status: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  readonly template: Maybe<tsContentTemplate>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};


type tsContentNode_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsContentNode_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsContentNode_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsContentNode_modifiedGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type tsContentNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsContentNodeEdge>;
  readonly group: ReadonlyArray<tsContentNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsContentNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsContentNodeConnection_distinctArgs = {
  field: tsContentNodeFieldsEnum;
};


type tsContentNodeConnection_groupArgs = {
  field: tsContentNodeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsContentNodeConnection_maxArgs = {
  field: tsContentNodeFieldsEnum;
};


type tsContentNodeConnection_minArgs = {
  field: tsContentNodeFieldsEnum;
};


type tsContentNodeConnection_sumArgs = {
  field: tsContentNodeFieldsEnum;
};

type tsContentNodeEdge = {
  readonly next: Maybe<tsContentNode>;
  readonly node: tsContentNode;
  readonly previous: Maybe<tsContentNode>;
};

type tsContentNodeFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentTypeName'
  | 'contentType.node.archivePath'
  | 'contentType.node.canExport'
  | 'contentType.node.children'
  | 'contentType.node.children.children'
  | 'contentType.node.children.id'
  | 'contentType.node.connectedTaxonomies.nodes'
  | 'contentType.node.contentNodes.nodes'
  | 'contentType.node.deleteWithUser'
  | 'contentType.node.description'
  | 'contentType.node.excludeFromSearch'
  | 'contentType.node.graphqlPluralName'
  | 'contentType.node.graphqlSingleName'
  | 'contentType.node.hasArchive'
  | 'contentType.node.hierarchical'
  | 'contentType.node.id'
  | 'contentType.node.internal.content'
  | 'contentType.node.internal.contentDigest'
  | 'contentType.node.internal.contentFilePath'
  | 'contentType.node.internal.description'
  | 'contentType.node.internal.fieldOwners'
  | 'contentType.node.internal.ignoreType'
  | 'contentType.node.internal.mediaType'
  | 'contentType.node.internal.owner'
  | 'contentType.node.internal.type'
  | 'contentType.node.isContentNode'
  | 'contentType.node.isFrontPage'
  | 'contentType.node.isPostsPage'
  | 'contentType.node.isTermNode'
  | 'contentType.node.label'
  | 'contentType.node.labels.addNew'
  | 'contentType.node.labels.addNewItem'
  | 'contentType.node.labels.allItems'
  | 'contentType.node.labels.archives'
  | 'contentType.node.labels.attributes'
  | 'contentType.node.labels.editItem'
  | 'contentType.node.labels.featuredImage'
  | 'contentType.node.labels.filterItemsList'
  | 'contentType.node.labels.insertIntoItem'
  | 'contentType.node.labels.itemsList'
  | 'contentType.node.labels.itemsListNavigation'
  | 'contentType.node.labels.menuName'
  | 'contentType.node.labels.name'
  | 'contentType.node.labels.newItem'
  | 'contentType.node.labels.notFound'
  | 'contentType.node.labels.notFoundInTrash'
  | 'contentType.node.labels.parentItemColon'
  | 'contentType.node.labels.removeFeaturedImage'
  | 'contentType.node.labels.searchItems'
  | 'contentType.node.labels.setFeaturedImage'
  | 'contentType.node.labels.singularName'
  | 'contentType.node.labels.uploadedToThisItem'
  | 'contentType.node.labels.useFeaturedImage'
  | 'contentType.node.labels.viewItem'
  | 'contentType.node.labels.viewItems'
  | 'contentType.node.menuIcon'
  | 'contentType.node.menuPosition'
  | 'contentType.node.name'
  | 'contentType.node.nodeType'
  | 'contentType.node.parent.children'
  | 'contentType.node.parent.id'
  | 'contentType.node.public'
  | 'contentType.node.publiclyQueryable'
  | 'contentType.node.restBase'
  | 'contentType.node.restControllerClass'
  | 'contentType.node.showInAdminBar'
  | 'contentType.node.showInGraphql'
  | 'contentType.node.showInMenu'
  | 'contentType.node.showInNavMenus'
  | 'contentType.node.showInRest'
  | 'contentType.node.showUi'
  | 'contentType.node.uri'
  | 'databaseId'
  | 'date'
  | 'dateGmt'
  | 'desiredSlug'
  | 'enclosure'
  | 'guid'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'lastEditedBy.node.authorProfile.fieldGroupName'
  | 'lastEditedBy.node.avatar.default'
  | 'lastEditedBy.node.avatar.extraAttr'
  | 'lastEditedBy.node.avatar.forceDefault'
  | 'lastEditedBy.node.avatar.foundAvatar'
  | 'lastEditedBy.node.avatar.height'
  | 'lastEditedBy.node.avatar.rating'
  | 'lastEditedBy.node.avatar.scheme'
  | 'lastEditedBy.node.avatar.size'
  | 'lastEditedBy.node.avatar.url'
  | 'lastEditedBy.node.avatar.width'
  | 'lastEditedBy.node.capKey'
  | 'lastEditedBy.node.capabilities'
  | 'lastEditedBy.node.children'
  | 'lastEditedBy.node.children.children'
  | 'lastEditedBy.node.children.id'
  | 'lastEditedBy.node.comments.nodes'
  | 'lastEditedBy.node.databaseId'
  | 'lastEditedBy.node.description'
  | 'lastEditedBy.node.email'
  | 'lastEditedBy.node.extraCapabilities'
  | 'lastEditedBy.node.firstName'
  | 'lastEditedBy.node.id'
  | 'lastEditedBy.node.internal.content'
  | 'lastEditedBy.node.internal.contentDigest'
  | 'lastEditedBy.node.internal.contentFilePath'
  | 'lastEditedBy.node.internal.description'
  | 'lastEditedBy.node.internal.fieldOwners'
  | 'lastEditedBy.node.internal.ignoreType'
  | 'lastEditedBy.node.internal.mediaType'
  | 'lastEditedBy.node.internal.owner'
  | 'lastEditedBy.node.internal.type'
  | 'lastEditedBy.node.isContentNode'
  | 'lastEditedBy.node.isTermNode'
  | 'lastEditedBy.node.lastName'
  | 'lastEditedBy.node.locale'
  | 'lastEditedBy.node.name'
  | 'lastEditedBy.node.nicename'
  | 'lastEditedBy.node.nickname'
  | 'lastEditedBy.node.nodeType'
  | 'lastEditedBy.node.pages.nodes'
  | 'lastEditedBy.node.parent.children'
  | 'lastEditedBy.node.parent.id'
  | 'lastEditedBy.node.posts.nodes'
  | 'lastEditedBy.node.registeredDate'
  | 'lastEditedBy.node.roles.nodes'
  | 'lastEditedBy.node.seo.breadcrumbTitle'
  | 'lastEditedBy.node.seo.canonical'
  | 'lastEditedBy.node.seo.fullHead'
  | 'lastEditedBy.node.seo.language'
  | 'lastEditedBy.node.seo.metaDesc'
  | 'lastEditedBy.node.seo.metaRobotsNofollow'
  | 'lastEditedBy.node.seo.metaRobotsNoindex'
  | 'lastEditedBy.node.seo.opengraphDescription'
  | 'lastEditedBy.node.seo.opengraphTitle'
  | 'lastEditedBy.node.seo.region'
  | 'lastEditedBy.node.seo.title'
  | 'lastEditedBy.node.seo.twitterDescription'
  | 'lastEditedBy.node.seo.twitterTitle'
  | 'lastEditedBy.node.slug'
  | 'lastEditedBy.node.uri'
  | 'lastEditedBy.node.url'
  | 'lastEditedBy.node.username'
  | 'link'
  | 'modified'
  | 'modifiedGmt'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.readingTime'
  | 'seo.schema.articleType'
  | 'seo.schema.pageType'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'status'
  | 'template.templateName'
  | 'uri';

type tsContentNodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
  readonly enclosure: InputMaybe<StringQueryOperatorInput>;
  readonly guid: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly seo: InputMaybe<tsPostTypeSEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly template: InputMaybe<tsContentTemplateFilterInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type tsContentNodeFilterListInput = {
  readonly elemMatch: InputMaybe<tsContentNodeFilterInput>;
};

type tsContentNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsContentNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsContentNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsContentNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsContentNodeGroupConnection_distinctArgs = {
  field: tsContentNodeFieldsEnum;
};


type tsContentNodeGroupConnection_groupArgs = {
  field: tsContentNodeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsContentNodeGroupConnection_maxArgs = {
  field: tsContentNodeFieldsEnum;
};


type tsContentNodeGroupConnection_minArgs = {
  field: tsContentNodeFieldsEnum;
};


type tsContentNodeGroupConnection_sumArgs = {
  field: tsContentNodeFieldsEnum;
};

type tsContentNodeSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsContentNodeFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the ContentNode type and the ContentType type */
type tsContentNodeToContentTypeConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsContentType>;
};

type tsContentNodeToContentTypeConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsContentTypeFilterInput>;
};

/** Connection between the ContentNode type and the User type */
type tsContentNodeToEditLastConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsUser>;
};

type tsContentNodeToEditLastConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsUserFilterInput>;
};

/** Connection between the ContentNode type and the User type */
type tsContentNodeToEditLockConnectionEdge = {
  /** The timestamp for when the node was last edited */
  readonly lockTimestamp: Maybe<Scalars['String']>;
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsUser>;
};

type tsContentTemplate = {
  /** The name of the template */
  readonly templateName: Maybe<Scalars['String']>;
};

type tsContentTemplateFilterInput = {
  readonly templateName: InputMaybe<StringQueryOperatorInput>;
};

/** An Post Type object */
type tsContentType = Node & tsNode & tsUniformResourceIdentifiable & {
  /** The url path of the first page of the archive page for this content type. */
  readonly archivePath: Maybe<Scalars['String']>;
  /** Whether this content type should can be exported. */
  readonly canExport: Maybe<Scalars['Boolean']>;
  readonly children: ReadonlyArray<Node>;
  /** Connection between the ContentType type and the Taxonomy type */
  readonly connectedTaxonomies: Maybe<tsContentTypeToTaxonomyConnection>;
  /** Connection between the ContentType type and the ContentNode type */
  readonly contentNodes: Maybe<tsContentTypeToContentNodeConnection>;
  /** Whether content of this type should be deleted when the author of it is deleted from the system. */
  readonly deleteWithUser: Maybe<Scalars['Boolean']>;
  /** Description of the content type. */
  readonly description: Maybe<Scalars['String']>;
  /** Whether to exclude nodes of this content type from front end search results. */
  readonly excludeFromSearch: Maybe<Scalars['Boolean']>;
  /** The plural name of the content type within the GraphQL Schema. */
  readonly graphqlPluralName: Maybe<Scalars['String']>;
  /** The singular name of the content type within the GraphQL Schema. */
  readonly graphqlSingleName: Maybe<Scalars['String']>;
  /** Whether this content type should have archives. Content archives are generated by type and by date. */
  readonly hasArchive: Maybe<Scalars['Boolean']>;
  /** Whether the content type is hierarchical, for example pages. */
  readonly hierarchical: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether this page is set to the static front page. */
  readonly isFrontPage: Scalars['Boolean'];
  /** Whether this page is set to the blog posts page. */
  readonly isPostsPage: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** Display name of the content type. */
  readonly label: Maybe<Scalars['String']>;
  /** Details about the content type labels. */
  readonly labels: Maybe<tsPostTypeLabelDetails>;
  /** The name of the icon file to display as a menu icon. */
  readonly menuIcon: Maybe<Scalars['String']>;
  /** The position of this post type in the menu. Only applies if show_in_menu is true. */
  readonly menuPosition: Maybe<Scalars['Int']>;
  /** The internal name of the post type. This should not be used for display purposes. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. */
  readonly public: Maybe<Scalars['Boolean']>;
  /** Whether queries can be performed on the front end for the content type as part of parse_request(). */
  readonly publiclyQueryable: Maybe<Scalars['Boolean']>;
  /** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */
  readonly restBase: Maybe<Scalars['String']>;
  /** The REST Controller class assigned to handling this content type. */
  readonly restControllerClass: Maybe<Scalars['String']>;
  /** Makes this content type available via the admin bar. */
  readonly showInAdminBar: Maybe<Scalars['Boolean']>;
  /** Whether to add the content type to the GraphQL Schema. */
  readonly showInGraphql: Maybe<Scalars['Boolean']>;
  /** Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that. */
  readonly showInMenu: Maybe<Scalars['Boolean']>;
  /** Makes this content type available for selection in navigation menus. */
  readonly showInNavMenus: Maybe<Scalars['Boolean']>;
  /** Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace. */
  readonly showInRest: Maybe<Scalars['Boolean']>;
  /** Whether to generate and allow a UI for managing this content type in the admin. */
  readonly showUi: Maybe<Scalars['Boolean']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};

type tsContentTypeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsContentTypeEdge>;
  readonly group: ReadonlyArray<tsContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsContentTypeConnection_distinctArgs = {
  field: tsContentTypeFieldsEnum;
};


type tsContentTypeConnection_groupArgs = {
  field: tsContentTypeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsContentTypeConnection_maxArgs = {
  field: tsContentTypeFieldsEnum;
};


type tsContentTypeConnection_minArgs = {
  field: tsContentTypeFieldsEnum;
};


type tsContentTypeConnection_sumArgs = {
  field: tsContentTypeFieldsEnum;
};

type tsContentTypeEdge = {
  readonly next: Maybe<tsContentType>;
  readonly node: tsContentType;
  readonly previous: Maybe<tsContentType>;
};

type tsContentTypeFieldsEnum =
  | 'archivePath'
  | 'canExport'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'connectedTaxonomies.nodes'
  | 'connectedTaxonomies.nodes.archivePath'
  | 'connectedTaxonomies.nodes.children'
  | 'connectedTaxonomies.nodes.children.children'
  | 'connectedTaxonomies.nodes.children.id'
  | 'connectedTaxonomies.nodes.connectedContentTypes.nodes'
  | 'connectedTaxonomies.nodes.description'
  | 'connectedTaxonomies.nodes.graphqlPluralName'
  | 'connectedTaxonomies.nodes.graphqlSingleName'
  | 'connectedTaxonomies.nodes.hierarchical'
  | 'connectedTaxonomies.nodes.id'
  | 'connectedTaxonomies.nodes.internal.content'
  | 'connectedTaxonomies.nodes.internal.contentDigest'
  | 'connectedTaxonomies.nodes.internal.contentFilePath'
  | 'connectedTaxonomies.nodes.internal.description'
  | 'connectedTaxonomies.nodes.internal.fieldOwners'
  | 'connectedTaxonomies.nodes.internal.ignoreType'
  | 'connectedTaxonomies.nodes.internal.mediaType'
  | 'connectedTaxonomies.nodes.internal.owner'
  | 'connectedTaxonomies.nodes.internal.type'
  | 'connectedTaxonomies.nodes.label'
  | 'connectedTaxonomies.nodes.name'
  | 'connectedTaxonomies.nodes.nodeType'
  | 'connectedTaxonomies.nodes.parent.children'
  | 'connectedTaxonomies.nodes.parent.id'
  | 'connectedTaxonomies.nodes.public'
  | 'connectedTaxonomies.nodes.restBase'
  | 'connectedTaxonomies.nodes.restControllerClass'
  | 'connectedTaxonomies.nodes.showCloud'
  | 'connectedTaxonomies.nodes.showInAdminColumn'
  | 'connectedTaxonomies.nodes.showInGraphql'
  | 'connectedTaxonomies.nodes.showInMenu'
  | 'connectedTaxonomies.nodes.showInNavMenus'
  | 'connectedTaxonomies.nodes.showInQuickEdit'
  | 'connectedTaxonomies.nodes.showInRest'
  | 'connectedTaxonomies.nodes.showUi'
  | 'contentNodes.nodes'
  | 'contentNodes.nodes.children'
  | 'contentNodes.nodes.children.children'
  | 'contentNodes.nodes.children.id'
  | 'contentNodes.nodes.contentTypeName'
  | 'contentNodes.nodes.databaseId'
  | 'contentNodes.nodes.date'
  | 'contentNodes.nodes.dateGmt'
  | 'contentNodes.nodes.desiredSlug'
  | 'contentNodes.nodes.enclosure'
  | 'contentNodes.nodes.guid'
  | 'contentNodes.nodes.id'
  | 'contentNodes.nodes.internal.content'
  | 'contentNodes.nodes.internal.contentDigest'
  | 'contentNodes.nodes.internal.contentFilePath'
  | 'contentNodes.nodes.internal.description'
  | 'contentNodes.nodes.internal.fieldOwners'
  | 'contentNodes.nodes.internal.ignoreType'
  | 'contentNodes.nodes.internal.mediaType'
  | 'contentNodes.nodes.internal.owner'
  | 'contentNodes.nodes.internal.type'
  | 'contentNodes.nodes.isContentNode'
  | 'contentNodes.nodes.isTermNode'
  | 'contentNodes.nodes.link'
  | 'contentNodes.nodes.modified'
  | 'contentNodes.nodes.modifiedGmt'
  | 'contentNodes.nodes.nodeType'
  | 'contentNodes.nodes.parent.children'
  | 'contentNodes.nodes.parent.id'
  | 'contentNodes.nodes.seo.breadcrumbs'
  | 'contentNodes.nodes.seo.canonical'
  | 'contentNodes.nodes.seo.cornerstone'
  | 'contentNodes.nodes.seo.focuskw'
  | 'contentNodes.nodes.seo.fullHead'
  | 'contentNodes.nodes.seo.metaDesc'
  | 'contentNodes.nodes.seo.metaKeywords'
  | 'contentNodes.nodes.seo.metaRobotsNofollow'
  | 'contentNodes.nodes.seo.metaRobotsNoindex'
  | 'contentNodes.nodes.seo.opengraphAuthor'
  | 'contentNodes.nodes.seo.opengraphDescription'
  | 'contentNodes.nodes.seo.opengraphModifiedTime'
  | 'contentNodes.nodes.seo.opengraphPublishedTime'
  | 'contentNodes.nodes.seo.opengraphPublisher'
  | 'contentNodes.nodes.seo.opengraphSiteName'
  | 'contentNodes.nodes.seo.opengraphTitle'
  | 'contentNodes.nodes.seo.opengraphType'
  | 'contentNodes.nodes.seo.opengraphUrl'
  | 'contentNodes.nodes.seo.readingTime'
  | 'contentNodes.nodes.seo.title'
  | 'contentNodes.nodes.seo.twitterDescription'
  | 'contentNodes.nodes.seo.twitterTitle'
  | 'contentNodes.nodes.slug'
  | 'contentNodes.nodes.status'
  | 'contentNodes.nodes.template.templateName'
  | 'contentNodes.nodes.uri'
  | 'deleteWithUser'
  | 'description'
  | 'excludeFromSearch'
  | 'graphqlPluralName'
  | 'graphqlSingleName'
  | 'hasArchive'
  | 'hierarchical'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isFrontPage'
  | 'isPostsPage'
  | 'isTermNode'
  | 'label'
  | 'labels.addNew'
  | 'labels.addNewItem'
  | 'labels.allItems'
  | 'labels.archives'
  | 'labels.attributes'
  | 'labels.editItem'
  | 'labels.featuredImage'
  | 'labels.filterItemsList'
  | 'labels.insertIntoItem'
  | 'labels.itemsList'
  | 'labels.itemsListNavigation'
  | 'labels.menuName'
  | 'labels.name'
  | 'labels.newItem'
  | 'labels.notFound'
  | 'labels.notFoundInTrash'
  | 'labels.parentItemColon'
  | 'labels.removeFeaturedImage'
  | 'labels.searchItems'
  | 'labels.setFeaturedImage'
  | 'labels.singularName'
  | 'labels.uploadedToThisItem'
  | 'labels.useFeaturedImage'
  | 'labels.viewItem'
  | 'labels.viewItems'
  | 'menuIcon'
  | 'menuPosition'
  | 'name'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'public'
  | 'publiclyQueryable'
  | 'restBase'
  | 'restControllerClass'
  | 'showInAdminBar'
  | 'showInGraphql'
  | 'showInMenu'
  | 'showInNavMenus'
  | 'showInRest'
  | 'showUi'
  | 'uri';

type tsContentTypeFilterInput = {
  readonly archivePath: InputMaybe<StringQueryOperatorInput>;
  readonly canExport: InputMaybe<BooleanQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly connectedTaxonomies: InputMaybe<tsContentTypeToTaxonomyConnectionFilterInput>;
  readonly contentNodes: InputMaybe<tsContentTypeToContentNodeConnectionFilterInput>;
  readonly deleteWithUser: InputMaybe<BooleanQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly excludeFromSearch: InputMaybe<BooleanQueryOperatorInput>;
  readonly graphqlPluralName: InputMaybe<StringQueryOperatorInput>;
  readonly graphqlSingleName: InputMaybe<StringQueryOperatorInput>;
  readonly hasArchive: InputMaybe<BooleanQueryOperatorInput>;
  readonly hierarchical: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isFrontPage: InputMaybe<BooleanQueryOperatorInput>;
  readonly isPostsPage: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly labels: InputMaybe<tsPostTypeLabelDetailsFilterInput>;
  readonly menuIcon: InputMaybe<StringQueryOperatorInput>;
  readonly menuPosition: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly public: InputMaybe<BooleanQueryOperatorInput>;
  readonly publiclyQueryable: InputMaybe<BooleanQueryOperatorInput>;
  readonly restBase: InputMaybe<StringQueryOperatorInput>;
  readonly restControllerClass: InputMaybe<StringQueryOperatorInput>;
  readonly showInAdminBar: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInGraphql: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInMenu: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInNavMenus: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInRest: InputMaybe<BooleanQueryOperatorInput>;
  readonly showUi: InputMaybe<BooleanQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type tsContentTypeFilterListInput = {
  readonly elemMatch: InputMaybe<tsContentTypeFilterInput>;
};

type tsContentTypeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsContentTypeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsContentTypeGroupConnection_distinctArgs = {
  field: tsContentTypeFieldsEnum;
};


type tsContentTypeGroupConnection_groupArgs = {
  field: tsContentTypeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsContentTypeGroupConnection_maxArgs = {
  field: tsContentTypeFieldsEnum;
};


type tsContentTypeGroupConnection_minArgs = {
  field: tsContentTypeFieldsEnum;
};


type tsContentTypeGroupConnection_sumArgs = {
  field: tsContentTypeFieldsEnum;
};

type tsContentTypeSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsContentTypeFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the ContentType type and the ContentNode type */
type tsContentTypeToContentNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsContentTypeToContentNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the ContentType type and the Taxonomy type */
type tsContentTypeToTaxonomyConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsTaxonomy>>>;
};

type tsContentTypeToTaxonomyConnectionFilterInput = {
  readonly nodes: InputMaybe<tsTaxonomyFilterListInput>;
};

type tsDatabaseIdentifier = {
  /** The unique identifier stored in the database */
  readonly databaseId: Scalars['Int'];
};

/** A Gravity Forms date field. */
type tsDateField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDateFormat & tsGfFieldWithDateInputType & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSubLabelPlacement & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines how the date field displays it’s calendar icon. */
  readonly calendarIconType: Maybe<tsFormFieldCalendarIconTypeEnum>;
  /** Contains the URL to the custom calendar icon. Only applicable when calendarIconType is set to custom. */
  readonly calendarIconUrl: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Determines how the date is displayed. */
  readonly dateFormat: Maybe<tsDateFieldFormatEnum>;
  /** The type of date field to display. */
  readonly dateType: Maybe<tsDateFieldTypeEnum>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the date field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsDateInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** How the DateField date is displayed. */
type tsDateFieldFormatEnum =
  | 'DMY'
  | 'DMY_DASH'
  | 'DMY_DOT'
  | 'MDY'
  | 'YMD_DASH'
  | 'YMD_DOT'
  | 'YMD_SLASH';

/** Type of date field to display. */
type tsDateFieldTypeEnum =
  | 'DROPDOWN'
  | 'FIELD'
  | 'PICKER';

/** DateInputProperty input values. */
type tsDateInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithDateFormat & {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

/** The template assigned to the node */
type tsDefaultTemplate = tsContentTemplate & {
  /** The name of the template */
  readonly templateName: Maybe<Scalars['String']>;
};

/** The discussion setting type */
type tsDiscussionSettings = {
  /** Allow people to submit comments on new posts. */
  readonly defaultCommentStatus: Maybe<Scalars['String']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  readonly defaultPingStatus: Maybe<Scalars['String']>;
};

type tsDiscussionSettingsFilterInput = {
  readonly defaultCommentStatus: InputMaybe<StringQueryOperatorInput>;
  readonly defaultPingStatus: InputMaybe<StringQueryOperatorInput>;
};

type tsEdge = {
  readonly next: Maybe<ts>;
  readonly node: ts;
  readonly previous: Maybe<ts>;
};

/** A Gravity Forms email field. */
type tsEmailField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithEmailConfirm & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsGfFieldWithSubLabelPlacement & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Determines whether the Confirm Email field is active. */
  readonly hasEmailConfirmation: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the email field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsEmailInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** EmailInputProperty input values. */
type tsEmailInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithEmailConfirm & {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

/** Status of entries to get. Default is ACTIVE. */
type tsEntryStatusEnum =
  | 'ACTIVE'
  | 'ALL'
  | 'SPAM'
  | 'TRASH';

type tsEntryStatusEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsEntryStatusEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsEntryStatusEnum>>>;
  readonly ne: InputMaybe<tsEntryStatusEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsEntryStatusEnum>>>;
};

type tsFieldsEnum =
  | 'acfOptionsFooterOptions.footerOption.connectWithUs.content'
  | 'acfOptionsFooterOptions.footerOption.connectWithUs.email'
  | 'acfOptionsFooterOptions.footerOption.connectWithUs.fieldGroupName'
  | 'acfOptionsFooterOptions.footerOption.connectWithUs.heading'
  | 'acfOptionsFooterOptions.footerOption.content'
  | 'acfOptionsFooterOptions.footerOption.explore.fieldGroupName'
  | 'acfOptionsFooterOptions.footerOption.explore.heading'
  | 'acfOptionsFooterOptions.footerOption.fieldGroupName'
  | 'acfOptionsFooterOptions.footerOption.getOurNewsletter.content'
  | 'acfOptionsFooterOptions.footerOption.getOurNewsletter.fieldGroupName'
  | 'acfOptionsFooterOptions.footerOption.getOurNewsletter.heading'
  | 'acfOptionsFooterOptions.footerOption.getOurNewsletter.newsletterForm'
  | 'acfOptionsFooterOptions.footerOption.letSTalkCta.target'
  | 'acfOptionsFooterOptions.footerOption.letSTalkCta.title'
  | 'acfOptionsFooterOptions.footerOption.letSTalkCta.url'
  | 'acfOptionsFooterOptions.footerOption.socialHeading'
  | 'acfOptionsFooterOptions.footerOption.socialMediaLists'
  | 'acfOptionsFooterOptions.footerOption.socialMediaLists.fieldGroupName'
  | 'acfOptionsFooterOptions.footerOption.socialMediaLists.socialMediaLinks'
  | 'acfOptionsFooterOptions.footerOption.socialMediaLists.socialMediaName'
  | 'acfOptionsFooterOptions.pageSlug'
  | 'acfOptionsFooterOptions.pageTitle'
  | 'acfOptionsHeaderOptions.headerOption.fieldGroupName'
  | 'acfOptionsHeaderOptions.headerOption.letSTalkCta.target'
  | 'acfOptionsHeaderOptions.headerOption.letSTalkCta.title'
  | 'acfOptionsHeaderOptions.headerOption.letSTalkCta.url'
  | 'acfOptionsHeaderOptions.headerOption.logo.altText'
  | 'acfOptionsHeaderOptions.headerOption.logo.authorDatabaseId'
  | 'acfOptionsHeaderOptions.headerOption.logo.authorId'
  | 'acfOptionsHeaderOptions.headerOption.logo.caption'
  | 'acfOptionsHeaderOptions.headerOption.logo.children'
  | 'acfOptionsHeaderOptions.headerOption.logo.commentCount'
  | 'acfOptionsHeaderOptions.headerOption.logo.commentStatus'
  | 'acfOptionsHeaderOptions.headerOption.logo.contentTypeName'
  | 'acfOptionsHeaderOptions.headerOption.logo.databaseId'
  | 'acfOptionsHeaderOptions.headerOption.logo.date'
  | 'acfOptionsHeaderOptions.headerOption.logo.dateGmt'
  | 'acfOptionsHeaderOptions.headerOption.logo.description'
  | 'acfOptionsHeaderOptions.headerOption.logo.desiredSlug'
  | 'acfOptionsHeaderOptions.headerOption.logo.enclosure'
  | 'acfOptionsHeaderOptions.headerOption.logo.fileSize'
  | 'acfOptionsHeaderOptions.headerOption.logo.filename'
  | 'acfOptionsHeaderOptions.headerOption.logo.filesize'
  | 'acfOptionsHeaderOptions.headerOption.logo.gatsbyImage'
  | 'acfOptionsHeaderOptions.headerOption.logo.guid'
  | 'acfOptionsHeaderOptions.headerOption.logo.height'
  | 'acfOptionsHeaderOptions.headerOption.logo.id'
  | 'acfOptionsHeaderOptions.headerOption.logo.isContentNode'
  | 'acfOptionsHeaderOptions.headerOption.logo.isTermNode'
  | 'acfOptionsHeaderOptions.headerOption.logo.link'
  | 'acfOptionsHeaderOptions.headerOption.logo.mediaItemUrl'
  | 'acfOptionsHeaderOptions.headerOption.logo.mediaType'
  | 'acfOptionsHeaderOptions.headerOption.logo.mimeType'
  | 'acfOptionsHeaderOptions.headerOption.logo.modified'
  | 'acfOptionsHeaderOptions.headerOption.logo.modifiedGmt'
  | 'acfOptionsHeaderOptions.headerOption.logo.nodeType'
  | 'acfOptionsHeaderOptions.headerOption.logo.parentDatabaseId'
  | 'acfOptionsHeaderOptions.headerOption.logo.parentId'
  | 'acfOptionsHeaderOptions.headerOption.logo.publicUrl'
  | 'acfOptionsHeaderOptions.headerOption.logo.sizes'
  | 'acfOptionsHeaderOptions.headerOption.logo.slug'
  | 'acfOptionsHeaderOptions.headerOption.logo.sourceUrl'
  | 'acfOptionsHeaderOptions.headerOption.logo.srcSet'
  | 'acfOptionsHeaderOptions.headerOption.logo.status'
  | 'acfOptionsHeaderOptions.headerOption.logo.title'
  | 'acfOptionsHeaderOptions.headerOption.logo.uri'
  | 'acfOptionsHeaderOptions.headerOption.logo.width'
  | 'acfOptionsHeaderOptions.pageSlug'
  | 'acfOptionsHeaderOptions.pageTitle'
  | 'allSettings.discussionSettingsDefaultCommentStatus'
  | 'allSettings.discussionSettingsDefaultPingStatus'
  | 'allSettings.generalSettingsDateFormat'
  | 'allSettings.generalSettingsDescription'
  | 'allSettings.generalSettingsEmail'
  | 'allSettings.generalSettingsLanguage'
  | 'allSettings.generalSettingsStartOfWeek'
  | 'allSettings.generalSettingsTimeFormat'
  | 'allSettings.generalSettingsTimezone'
  | 'allSettings.generalSettingsTitle'
  | 'allSettings.generalSettingsUrl'
  | 'allSettings.readingSettingsPageForPosts'
  | 'allSettings.readingSettingsPageOnFront'
  | 'allSettings.readingSettingsPostsPerPage'
  | 'allSettings.readingSettingsShowOnFront'
  | 'allSettings.writingSettingsDefaultCategory'
  | 'allSettings.writingSettingsDefaultPostFormat'
  | 'allSettings.writingSettingsUseSmilies'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'discussionSettings.defaultCommentStatus'
  | 'discussionSettings.defaultPingStatus'
  | 'generalSettings.dateFormat'
  | 'generalSettings.description'
  | 'generalSettings.email'
  | 'generalSettings.language'
  | 'generalSettings.startOfWeek'
  | 'generalSettings.timeFormat'
  | 'generalSettings.timezone'
  | 'generalSettings.title'
  | 'generalSettings.url'
  | 'gfSettings.currency'
  | 'gfSettings.hasBackgroundUpdates'
  | 'gfSettings.hasDefaultCss'
  | 'gfSettings.hasToolbar'
  | 'gfSettings.isHtml5Enabled'
  | 'gfSettings.isNoConflictModeEnabled'
  | 'gfSettings.logging.isLoggingEnabled'
  | 'gfSettings.logging.loggers'
  | 'gfSettings.logging.loggers.isEnabled'
  | 'gfSettings.logging.loggers.name'
  | 'gfSettings.recaptcha.publicKey'
  | 'gfSettings.recaptcha.type'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'readingSettings.pageForPosts'
  | 'readingSettings.pageOnFront'
  | 'readingSettings.postsPerPage'
  | 'readingSettings.showOnFront'
  | 'schemaMd5'
  | 'seo.breadcrumbs.archivePrefix'
  | 'seo.breadcrumbs.boldLast'
  | 'seo.breadcrumbs.enabled'
  | 'seo.breadcrumbs.homeText'
  | 'seo.breadcrumbs.notFoundText'
  | 'seo.breadcrumbs.prefix'
  | 'seo.breadcrumbs.searchPrefix'
  | 'seo.breadcrumbs.separator'
  | 'seo.breadcrumbs.showBlogPage'
  | 'seo.contentTypes.actionMonitorAction.metaDesc'
  | 'seo.contentTypes.actionMonitorAction.metaRobotsNoindex'
  | 'seo.contentTypes.actionMonitorAction.schemaType'
  | 'seo.contentTypes.actionMonitorAction.title'
  | 'seo.contentTypes.careers.metaDesc'
  | 'seo.contentTypes.careers.metaRobotsNoindex'
  | 'seo.contentTypes.careers.schemaType'
  | 'seo.contentTypes.careers.title'
  | 'seo.contentTypes.caseStudy.metaDesc'
  | 'seo.contentTypes.caseStudy.metaRobotsNoindex'
  | 'seo.contentTypes.caseStudy.schemaType'
  | 'seo.contentTypes.caseStudy.title'
  | 'seo.contentTypes.mediaItem.metaDesc'
  | 'seo.contentTypes.mediaItem.metaRobotsNoindex'
  | 'seo.contentTypes.mediaItem.schemaType'
  | 'seo.contentTypes.mediaItem.title'
  | 'seo.contentTypes.page.metaDesc'
  | 'seo.contentTypes.page.metaRobotsNoindex'
  | 'seo.contentTypes.page.schemaType'
  | 'seo.contentTypes.page.title'
  | 'seo.contentTypes.post.metaDesc'
  | 'seo.contentTypes.post.metaRobotsNoindex'
  | 'seo.contentTypes.post.schemaType'
  | 'seo.contentTypes.post.title'
  | 'seo.contentTypes.team.metaDesc'
  | 'seo.contentTypes.team.metaRobotsNoindex'
  | 'seo.contentTypes.team.schemaType'
  | 'seo.contentTypes.team.title'
  | 'seo.contentTypes.testimonial.metaDesc'
  | 'seo.contentTypes.testimonial.metaRobotsNoindex'
  | 'seo.contentTypes.testimonial.schemaType'
  | 'seo.contentTypes.testimonial.title'
  | 'seo.openGraph.defaultImage.altText'
  | 'seo.openGraph.defaultImage.authorDatabaseId'
  | 'seo.openGraph.defaultImage.authorId'
  | 'seo.openGraph.defaultImage.caption'
  | 'seo.openGraph.defaultImage.children'
  | 'seo.openGraph.defaultImage.commentCount'
  | 'seo.openGraph.defaultImage.commentStatus'
  | 'seo.openGraph.defaultImage.contentTypeName'
  | 'seo.openGraph.defaultImage.databaseId'
  | 'seo.openGraph.defaultImage.date'
  | 'seo.openGraph.defaultImage.dateGmt'
  | 'seo.openGraph.defaultImage.description'
  | 'seo.openGraph.defaultImage.desiredSlug'
  | 'seo.openGraph.defaultImage.enclosure'
  | 'seo.openGraph.defaultImage.fileSize'
  | 'seo.openGraph.defaultImage.filename'
  | 'seo.openGraph.defaultImage.filesize'
  | 'seo.openGraph.defaultImage.gatsbyImage'
  | 'seo.openGraph.defaultImage.guid'
  | 'seo.openGraph.defaultImage.height'
  | 'seo.openGraph.defaultImage.id'
  | 'seo.openGraph.defaultImage.isContentNode'
  | 'seo.openGraph.defaultImage.isTermNode'
  | 'seo.openGraph.defaultImage.link'
  | 'seo.openGraph.defaultImage.mediaItemUrl'
  | 'seo.openGraph.defaultImage.mediaType'
  | 'seo.openGraph.defaultImage.mimeType'
  | 'seo.openGraph.defaultImage.modified'
  | 'seo.openGraph.defaultImage.modifiedGmt'
  | 'seo.openGraph.defaultImage.nodeType'
  | 'seo.openGraph.defaultImage.parentDatabaseId'
  | 'seo.openGraph.defaultImage.parentId'
  | 'seo.openGraph.defaultImage.publicUrl'
  | 'seo.openGraph.defaultImage.sizes'
  | 'seo.openGraph.defaultImage.slug'
  | 'seo.openGraph.defaultImage.sourceUrl'
  | 'seo.openGraph.defaultImage.srcSet'
  | 'seo.openGraph.defaultImage.status'
  | 'seo.openGraph.defaultImage.title'
  | 'seo.openGraph.defaultImage.uri'
  | 'seo.openGraph.defaultImage.width'
  | 'seo.openGraph.frontPage.description'
  | 'seo.openGraph.frontPage.title'
  | 'seo.redirects'
  | 'seo.redirects.format'
  | 'seo.redirects.origin'
  | 'seo.redirects.target'
  | 'seo.redirects.type'
  | 'seo.schema.companyLogo.altText'
  | 'seo.schema.companyLogo.authorDatabaseId'
  | 'seo.schema.companyLogo.authorId'
  | 'seo.schema.companyLogo.caption'
  | 'seo.schema.companyLogo.children'
  | 'seo.schema.companyLogo.commentCount'
  | 'seo.schema.companyLogo.commentStatus'
  | 'seo.schema.companyLogo.contentTypeName'
  | 'seo.schema.companyLogo.databaseId'
  | 'seo.schema.companyLogo.date'
  | 'seo.schema.companyLogo.dateGmt'
  | 'seo.schema.companyLogo.description'
  | 'seo.schema.companyLogo.desiredSlug'
  | 'seo.schema.companyLogo.enclosure'
  | 'seo.schema.companyLogo.fileSize'
  | 'seo.schema.companyLogo.filename'
  | 'seo.schema.companyLogo.filesize'
  | 'seo.schema.companyLogo.gatsbyImage'
  | 'seo.schema.companyLogo.guid'
  | 'seo.schema.companyLogo.height'
  | 'seo.schema.companyLogo.id'
  | 'seo.schema.companyLogo.isContentNode'
  | 'seo.schema.companyLogo.isTermNode'
  | 'seo.schema.companyLogo.link'
  | 'seo.schema.companyLogo.mediaItemUrl'
  | 'seo.schema.companyLogo.mediaType'
  | 'seo.schema.companyLogo.mimeType'
  | 'seo.schema.companyLogo.modified'
  | 'seo.schema.companyLogo.modifiedGmt'
  | 'seo.schema.companyLogo.nodeType'
  | 'seo.schema.companyLogo.parentDatabaseId'
  | 'seo.schema.companyLogo.parentId'
  | 'seo.schema.companyLogo.publicUrl'
  | 'seo.schema.companyLogo.sizes'
  | 'seo.schema.companyLogo.slug'
  | 'seo.schema.companyLogo.sourceUrl'
  | 'seo.schema.companyLogo.srcSet'
  | 'seo.schema.companyLogo.status'
  | 'seo.schema.companyLogo.title'
  | 'seo.schema.companyLogo.uri'
  | 'seo.schema.companyLogo.width'
  | 'seo.schema.companyName'
  | 'seo.schema.companyOrPerson'
  | 'seo.schema.homeUrl'
  | 'seo.schema.inLanguage'
  | 'seo.schema.logo.altText'
  | 'seo.schema.logo.authorDatabaseId'
  | 'seo.schema.logo.authorId'
  | 'seo.schema.logo.caption'
  | 'seo.schema.logo.children'
  | 'seo.schema.logo.commentCount'
  | 'seo.schema.logo.commentStatus'
  | 'seo.schema.logo.contentTypeName'
  | 'seo.schema.logo.databaseId'
  | 'seo.schema.logo.date'
  | 'seo.schema.logo.dateGmt'
  | 'seo.schema.logo.description'
  | 'seo.schema.logo.desiredSlug'
  | 'seo.schema.logo.enclosure'
  | 'seo.schema.logo.fileSize'
  | 'seo.schema.logo.filename'
  | 'seo.schema.logo.filesize'
  | 'seo.schema.logo.gatsbyImage'
  | 'seo.schema.logo.guid'
  | 'seo.schema.logo.height'
  | 'seo.schema.logo.id'
  | 'seo.schema.logo.isContentNode'
  | 'seo.schema.logo.isTermNode'
  | 'seo.schema.logo.link'
  | 'seo.schema.logo.mediaItemUrl'
  | 'seo.schema.logo.mediaType'
  | 'seo.schema.logo.mimeType'
  | 'seo.schema.logo.modified'
  | 'seo.schema.logo.modifiedGmt'
  | 'seo.schema.logo.nodeType'
  | 'seo.schema.logo.parentDatabaseId'
  | 'seo.schema.logo.parentId'
  | 'seo.schema.logo.publicUrl'
  | 'seo.schema.logo.sizes'
  | 'seo.schema.logo.slug'
  | 'seo.schema.logo.sourceUrl'
  | 'seo.schema.logo.srcSet'
  | 'seo.schema.logo.status'
  | 'seo.schema.logo.title'
  | 'seo.schema.logo.uri'
  | 'seo.schema.logo.width'
  | 'seo.schema.personLogo.altText'
  | 'seo.schema.personLogo.authorDatabaseId'
  | 'seo.schema.personLogo.authorId'
  | 'seo.schema.personLogo.caption'
  | 'seo.schema.personLogo.children'
  | 'seo.schema.personLogo.commentCount'
  | 'seo.schema.personLogo.commentStatus'
  | 'seo.schema.personLogo.contentTypeName'
  | 'seo.schema.personLogo.databaseId'
  | 'seo.schema.personLogo.date'
  | 'seo.schema.personLogo.dateGmt'
  | 'seo.schema.personLogo.description'
  | 'seo.schema.personLogo.desiredSlug'
  | 'seo.schema.personLogo.enclosure'
  | 'seo.schema.personLogo.fileSize'
  | 'seo.schema.personLogo.filename'
  | 'seo.schema.personLogo.filesize'
  | 'seo.schema.personLogo.gatsbyImage'
  | 'seo.schema.personLogo.guid'
  | 'seo.schema.personLogo.height'
  | 'seo.schema.personLogo.id'
  | 'seo.schema.personLogo.isContentNode'
  | 'seo.schema.personLogo.isTermNode'
  | 'seo.schema.personLogo.link'
  | 'seo.schema.personLogo.mediaItemUrl'
  | 'seo.schema.personLogo.mediaType'
  | 'seo.schema.personLogo.mimeType'
  | 'seo.schema.personLogo.modified'
  | 'seo.schema.personLogo.modifiedGmt'
  | 'seo.schema.personLogo.nodeType'
  | 'seo.schema.personLogo.parentDatabaseId'
  | 'seo.schema.personLogo.parentId'
  | 'seo.schema.personLogo.publicUrl'
  | 'seo.schema.personLogo.sizes'
  | 'seo.schema.personLogo.slug'
  | 'seo.schema.personLogo.sourceUrl'
  | 'seo.schema.personLogo.srcSet'
  | 'seo.schema.personLogo.status'
  | 'seo.schema.personLogo.title'
  | 'seo.schema.personLogo.uri'
  | 'seo.schema.personLogo.width'
  | 'seo.schema.personName'
  | 'seo.schema.siteName'
  | 'seo.schema.siteUrl'
  | 'seo.schema.wordpressSiteName'
  | 'seo.social.facebook.url'
  | 'seo.social.instagram.url'
  | 'seo.social.linkedIn.url'
  | 'seo.social.mySpace.url'
  | 'seo.social.pinterest.metaTag'
  | 'seo.social.pinterest.url'
  | 'seo.social.twitter.cardType'
  | 'seo.social.twitter.username'
  | 'seo.social.wikipedia.url'
  | 'seo.social.youTube.url'
  | 'seo.webmaster.baiduVerify'
  | 'seo.webmaster.googleVerify'
  | 'seo.webmaster.msVerify'
  | 'seo.webmaster.yandexVerify'
  | 'tsOptions.generaloptions.enquireLists'
  | 'tsOptions.generaloptions.enquireLists.content'
  | 'tsOptions.generaloptions.enquireLists.fieldGroupName'
  | 'tsOptions.generaloptions.enquireLists.title'
  | 'tsOptions.generaloptions.fieldGroupName'
  | 'tsOptions.generaloptions.officeAddresses'
  | 'tsOptions.generaloptions.officeAddresses.content'
  | 'tsOptions.generaloptions.officeAddresses.fieldGroupName'
  | 'tsOptions.generaloptions.officeAddresses.title'
  | 'tsOptions.generaloptions.recognition'
  | 'tsOptions.generaloptions.recognition.fieldGroupName'
  | 'tsOptions.generaloptions.trustedBy'
  | 'tsOptions.generaloptions.trustedBy.fieldGroupName'
  | 'tsOptions.pageSlug'
  | 'tsOptions.pageTitle'
  | 'viewer.authorProfile.fieldGroupName'
  | 'viewer.authorProfile.profile.altText'
  | 'viewer.authorProfile.profile.authorDatabaseId'
  | 'viewer.authorProfile.profile.authorId'
  | 'viewer.authorProfile.profile.caption'
  | 'viewer.authorProfile.profile.children'
  | 'viewer.authorProfile.profile.commentCount'
  | 'viewer.authorProfile.profile.commentStatus'
  | 'viewer.authorProfile.profile.contentTypeName'
  | 'viewer.authorProfile.profile.databaseId'
  | 'viewer.authorProfile.profile.date'
  | 'viewer.authorProfile.profile.dateGmt'
  | 'viewer.authorProfile.profile.description'
  | 'viewer.authorProfile.profile.desiredSlug'
  | 'viewer.authorProfile.profile.enclosure'
  | 'viewer.authorProfile.profile.fileSize'
  | 'viewer.authorProfile.profile.filename'
  | 'viewer.authorProfile.profile.filesize'
  | 'viewer.authorProfile.profile.gatsbyImage'
  | 'viewer.authorProfile.profile.guid'
  | 'viewer.authorProfile.profile.height'
  | 'viewer.authorProfile.profile.id'
  | 'viewer.authorProfile.profile.isContentNode'
  | 'viewer.authorProfile.profile.isTermNode'
  | 'viewer.authorProfile.profile.link'
  | 'viewer.authorProfile.profile.mediaItemUrl'
  | 'viewer.authorProfile.profile.mediaType'
  | 'viewer.authorProfile.profile.mimeType'
  | 'viewer.authorProfile.profile.modified'
  | 'viewer.authorProfile.profile.modifiedGmt'
  | 'viewer.authorProfile.profile.nodeType'
  | 'viewer.authorProfile.profile.parentDatabaseId'
  | 'viewer.authorProfile.profile.parentId'
  | 'viewer.authorProfile.profile.publicUrl'
  | 'viewer.authorProfile.profile.sizes'
  | 'viewer.authorProfile.profile.slug'
  | 'viewer.authorProfile.profile.sourceUrl'
  | 'viewer.authorProfile.profile.srcSet'
  | 'viewer.authorProfile.profile.status'
  | 'viewer.authorProfile.profile.title'
  | 'viewer.authorProfile.profile.uri'
  | 'viewer.authorProfile.profile.width'
  | 'viewer.avatar.default'
  | 'viewer.avatar.extraAttr'
  | 'viewer.avatar.forceDefault'
  | 'viewer.avatar.foundAvatar'
  | 'viewer.avatar.height'
  | 'viewer.avatar.rating'
  | 'viewer.avatar.scheme'
  | 'viewer.avatar.size'
  | 'viewer.avatar.url'
  | 'viewer.avatar.width'
  | 'viewer.capKey'
  | 'viewer.capabilities'
  | 'viewer.children'
  | 'viewer.children.children'
  | 'viewer.children.children.children'
  | 'viewer.children.children.id'
  | 'viewer.children.id'
  | 'viewer.children.internal.content'
  | 'viewer.children.internal.contentDigest'
  | 'viewer.children.internal.contentFilePath'
  | 'viewer.children.internal.description'
  | 'viewer.children.internal.fieldOwners'
  | 'viewer.children.internal.ignoreType'
  | 'viewer.children.internal.mediaType'
  | 'viewer.children.internal.owner'
  | 'viewer.children.internal.type'
  | 'viewer.children.parent.children'
  | 'viewer.children.parent.id'
  | 'viewer.comments.nodes'
  | 'viewer.comments.nodes.agent'
  | 'viewer.comments.nodes.approved'
  | 'viewer.comments.nodes.authorIp'
  | 'viewer.comments.nodes.children'
  | 'viewer.comments.nodes.content'
  | 'viewer.comments.nodes.databaseId'
  | 'viewer.comments.nodes.date'
  | 'viewer.comments.nodes.dateGmt'
  | 'viewer.comments.nodes.id'
  | 'viewer.comments.nodes.karma'
  | 'viewer.comments.nodes.nodeType'
  | 'viewer.comments.nodes.parentDatabaseId'
  | 'viewer.comments.nodes.parentId'
  | 'viewer.comments.nodes.type'
  | 'viewer.databaseId'
  | 'viewer.description'
  | 'viewer.email'
  | 'viewer.extraCapabilities'
  | 'viewer.firstName'
  | 'viewer.id'
  | 'viewer.internal.content'
  | 'viewer.internal.contentDigest'
  | 'viewer.internal.contentFilePath'
  | 'viewer.internal.description'
  | 'viewer.internal.fieldOwners'
  | 'viewer.internal.ignoreType'
  | 'viewer.internal.mediaType'
  | 'viewer.internal.owner'
  | 'viewer.internal.type'
  | 'viewer.isContentNode'
  | 'viewer.isTermNode'
  | 'viewer.lastName'
  | 'viewer.locale'
  | 'viewer.name'
  | 'viewer.nicename'
  | 'viewer.nickname'
  | 'viewer.nodeType'
  | 'viewer.pages.nodes'
  | 'viewer.pages.nodes.authorDatabaseId'
  | 'viewer.pages.nodes.authorId'
  | 'viewer.pages.nodes.children'
  | 'viewer.pages.nodes.commentCount'
  | 'viewer.pages.nodes.commentStatus'
  | 'viewer.pages.nodes.content'
  | 'viewer.pages.nodes.contentTypeName'
  | 'viewer.pages.nodes.databaseId'
  | 'viewer.pages.nodes.date'
  | 'viewer.pages.nodes.dateGmt'
  | 'viewer.pages.nodes.desiredSlug'
  | 'viewer.pages.nodes.enclosure'
  | 'viewer.pages.nodes.featuredImageDatabaseId'
  | 'viewer.pages.nodes.featuredImageId'
  | 'viewer.pages.nodes.guid'
  | 'viewer.pages.nodes.id'
  | 'viewer.pages.nodes.isContentNode'
  | 'viewer.pages.nodes.isFrontPage'
  | 'viewer.pages.nodes.isPostsPage'
  | 'viewer.pages.nodes.isPrivacyPage'
  | 'viewer.pages.nodes.isRevision'
  | 'viewer.pages.nodes.isTermNode'
  | 'viewer.pages.nodes.link'
  | 'viewer.pages.nodes.menuOrder'
  | 'viewer.pages.nodes.modified'
  | 'viewer.pages.nodes.modifiedGmt'
  | 'viewer.pages.nodes.nodeType'
  | 'viewer.pages.nodes.parentDatabaseId'
  | 'viewer.pages.nodes.parentId'
  | 'viewer.pages.nodes.slug'
  | 'viewer.pages.nodes.status'
  | 'viewer.pages.nodes.title'
  | 'viewer.pages.nodes.uri'
  | 'viewer.parent.children'
  | 'viewer.parent.children.children'
  | 'viewer.parent.children.id'
  | 'viewer.parent.id'
  | 'viewer.parent.internal.content'
  | 'viewer.parent.internal.contentDigest'
  | 'viewer.parent.internal.contentFilePath'
  | 'viewer.parent.internal.description'
  | 'viewer.parent.internal.fieldOwners'
  | 'viewer.parent.internal.ignoreType'
  | 'viewer.parent.internal.mediaType'
  | 'viewer.parent.internal.owner'
  | 'viewer.parent.internal.type'
  | 'viewer.parent.parent.children'
  | 'viewer.parent.parent.id'
  | 'viewer.posts.nodes'
  | 'viewer.posts.nodes.authorDatabaseId'
  | 'viewer.posts.nodes.authorId'
  | 'viewer.posts.nodes.children'
  | 'viewer.posts.nodes.commentCount'
  | 'viewer.posts.nodes.commentStatus'
  | 'viewer.posts.nodes.content'
  | 'viewer.posts.nodes.contentTypeName'
  | 'viewer.posts.nodes.databaseId'
  | 'viewer.posts.nodes.date'
  | 'viewer.posts.nodes.dateGmt'
  | 'viewer.posts.nodes.desiredSlug'
  | 'viewer.posts.nodes.enclosure'
  | 'viewer.posts.nodes.excerpt'
  | 'viewer.posts.nodes.featuredImageDatabaseId'
  | 'viewer.posts.nodes.featuredImageId'
  | 'viewer.posts.nodes.guid'
  | 'viewer.posts.nodes.id'
  | 'viewer.posts.nodes.isContentNode'
  | 'viewer.posts.nodes.isRevision'
  | 'viewer.posts.nodes.isSticky'
  | 'viewer.posts.nodes.isTermNode'
  | 'viewer.posts.nodes.link'
  | 'viewer.posts.nodes.modified'
  | 'viewer.posts.nodes.modifiedGmt'
  | 'viewer.posts.nodes.nodeType'
  | 'viewer.posts.nodes.pingStatus'
  | 'viewer.posts.nodes.pinged'
  | 'viewer.posts.nodes.slug'
  | 'viewer.posts.nodes.status'
  | 'viewer.posts.nodes.title'
  | 'viewer.posts.nodes.toPing'
  | 'viewer.posts.nodes.uri'
  | 'viewer.registeredDate'
  | 'viewer.roles.nodes'
  | 'viewer.roles.nodes.capabilities'
  | 'viewer.roles.nodes.children'
  | 'viewer.roles.nodes.displayName'
  | 'viewer.roles.nodes.id'
  | 'viewer.roles.nodes.name'
  | 'viewer.roles.nodes.nodeType'
  | 'viewer.seo.breadcrumbTitle'
  | 'viewer.seo.canonical'
  | 'viewer.seo.fullHead'
  | 'viewer.seo.language'
  | 'viewer.seo.metaDesc'
  | 'viewer.seo.metaRobotsNofollow'
  | 'viewer.seo.metaRobotsNoindex'
  | 'viewer.seo.opengraphDescription'
  | 'viewer.seo.opengraphImage.altText'
  | 'viewer.seo.opengraphImage.authorDatabaseId'
  | 'viewer.seo.opengraphImage.authorId'
  | 'viewer.seo.opengraphImage.caption'
  | 'viewer.seo.opengraphImage.children'
  | 'viewer.seo.opengraphImage.commentCount'
  | 'viewer.seo.opengraphImage.commentStatus'
  | 'viewer.seo.opengraphImage.contentTypeName'
  | 'viewer.seo.opengraphImage.databaseId'
  | 'viewer.seo.opengraphImage.date'
  | 'viewer.seo.opengraphImage.dateGmt'
  | 'viewer.seo.opengraphImage.description'
  | 'viewer.seo.opengraphImage.desiredSlug'
  | 'viewer.seo.opengraphImage.enclosure'
  | 'viewer.seo.opengraphImage.fileSize'
  | 'viewer.seo.opengraphImage.filename'
  | 'viewer.seo.opengraphImage.filesize'
  | 'viewer.seo.opengraphImage.gatsbyImage'
  | 'viewer.seo.opengraphImage.guid'
  | 'viewer.seo.opengraphImage.height'
  | 'viewer.seo.opengraphImage.id'
  | 'viewer.seo.opengraphImage.isContentNode'
  | 'viewer.seo.opengraphImage.isTermNode'
  | 'viewer.seo.opengraphImage.link'
  | 'viewer.seo.opengraphImage.mediaItemUrl'
  | 'viewer.seo.opengraphImage.mediaType'
  | 'viewer.seo.opengraphImage.mimeType'
  | 'viewer.seo.opengraphImage.modified'
  | 'viewer.seo.opengraphImage.modifiedGmt'
  | 'viewer.seo.opengraphImage.nodeType'
  | 'viewer.seo.opengraphImage.parentDatabaseId'
  | 'viewer.seo.opengraphImage.parentId'
  | 'viewer.seo.opengraphImage.publicUrl'
  | 'viewer.seo.opengraphImage.sizes'
  | 'viewer.seo.opengraphImage.slug'
  | 'viewer.seo.opengraphImage.sourceUrl'
  | 'viewer.seo.opengraphImage.srcSet'
  | 'viewer.seo.opengraphImage.status'
  | 'viewer.seo.opengraphImage.title'
  | 'viewer.seo.opengraphImage.uri'
  | 'viewer.seo.opengraphImage.width'
  | 'viewer.seo.opengraphTitle'
  | 'viewer.seo.region'
  | 'viewer.seo.schema.articleType'
  | 'viewer.seo.schema.pageType'
  | 'viewer.seo.schema.raw'
  | 'viewer.seo.social.facebook'
  | 'viewer.seo.social.instagram'
  | 'viewer.seo.social.linkedIn'
  | 'viewer.seo.social.mySpace'
  | 'viewer.seo.social.pinterest'
  | 'viewer.seo.social.soundCloud'
  | 'viewer.seo.social.twitter'
  | 'viewer.seo.social.wikipedia'
  | 'viewer.seo.social.youTube'
  | 'viewer.seo.title'
  | 'viewer.seo.twitterDescription'
  | 'viewer.seo.twitterImage.altText'
  | 'viewer.seo.twitterImage.authorDatabaseId'
  | 'viewer.seo.twitterImage.authorId'
  | 'viewer.seo.twitterImage.caption'
  | 'viewer.seo.twitterImage.children'
  | 'viewer.seo.twitterImage.commentCount'
  | 'viewer.seo.twitterImage.commentStatus'
  | 'viewer.seo.twitterImage.contentTypeName'
  | 'viewer.seo.twitterImage.databaseId'
  | 'viewer.seo.twitterImage.date'
  | 'viewer.seo.twitterImage.dateGmt'
  | 'viewer.seo.twitterImage.description'
  | 'viewer.seo.twitterImage.desiredSlug'
  | 'viewer.seo.twitterImage.enclosure'
  | 'viewer.seo.twitterImage.fileSize'
  | 'viewer.seo.twitterImage.filename'
  | 'viewer.seo.twitterImage.filesize'
  | 'viewer.seo.twitterImage.gatsbyImage'
  | 'viewer.seo.twitterImage.guid'
  | 'viewer.seo.twitterImage.height'
  | 'viewer.seo.twitterImage.id'
  | 'viewer.seo.twitterImage.isContentNode'
  | 'viewer.seo.twitterImage.isTermNode'
  | 'viewer.seo.twitterImage.link'
  | 'viewer.seo.twitterImage.mediaItemUrl'
  | 'viewer.seo.twitterImage.mediaType'
  | 'viewer.seo.twitterImage.mimeType'
  | 'viewer.seo.twitterImage.modified'
  | 'viewer.seo.twitterImage.modifiedGmt'
  | 'viewer.seo.twitterImage.nodeType'
  | 'viewer.seo.twitterImage.parentDatabaseId'
  | 'viewer.seo.twitterImage.parentId'
  | 'viewer.seo.twitterImage.publicUrl'
  | 'viewer.seo.twitterImage.sizes'
  | 'viewer.seo.twitterImage.slug'
  | 'viewer.seo.twitterImage.sourceUrl'
  | 'viewer.seo.twitterImage.srcSet'
  | 'viewer.seo.twitterImage.status'
  | 'viewer.seo.twitterImage.title'
  | 'viewer.seo.twitterImage.uri'
  | 'viewer.seo.twitterImage.width'
  | 'viewer.seo.twitterTitle'
  | 'viewer.slug'
  | 'viewer.uri'
  | 'viewer.url'
  | 'viewer.username'
  | 'wpGatsby.arePrettyPermalinksEnabled'
  | 'wpGatsby.isPreviewFrontendOnline'
  | 'writingSettings.defaultCategory'
  | 'writingSettings.defaultPostFormat'
  | 'writingSettings.useSmilies';

/** A Gravity Forms fileupload field. */
type tsFileUploadField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithFileExtensions & tsGfFieldWithFileSize & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMultipleFiles & tsGfFieldWithPersonalData & tsGfFieldWithRules & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** A comma-delimited list of the file extensions which may be uploaded. */
  readonly allowedExtensions: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Indicates whether multiple files may be uploaded. */
  readonly canAcceptMultipleFiles: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** File upload value */
  readonly fileUploadValues: Maybe<ReadonlyArray<Maybe<tsFileUploadFieldValue>>>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The maximum size (in MB) an uploaded file may be . */
  readonly maxFileSize: Maybe<Scalars['Int']>;
  /** When the field is set to allow multiple files to be uploaded, this property is available to set a limit on how many may be uploaded. */
  readonly maxFiles: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** The individual file properties from an uploaded file. */
type tsFileUploadFieldValue = {
  /** The path to the parent directory of the file. */
  readonly basePath: Maybe<Scalars['String']>;
  /** The base url to the parent directory of the file. */
  readonly baseUrl: Maybe<Scalars['String']>;
  /** The filename. */
  readonly filename: Maybe<Scalars['String']>;
  /** The url to the file. */
  readonly url: Maybe<Scalars['String']>;
};

type tsFilterInput = {
  readonly acfOptionsFooterOptions: InputMaybe<tsAcfOptionsFooterOptionsFilterInput>;
  readonly acfOptionsHeaderOptions: InputMaybe<tsAcfOptionsHeaderOptionsFilterInput>;
  readonly allSettings: InputMaybe<tsSettingsFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly discussionSettings: InputMaybe<tsDiscussionSettingsFilterInput>;
  readonly generalSettings: InputMaybe<tsGeneralSettingsFilterInput>;
  readonly gfSettings: InputMaybe<tsGfSettingsFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly readingSettings: InputMaybe<tsReadingSettingsFilterInput>;
  readonly schemaMd5: InputMaybe<StringQueryOperatorInput>;
  readonly seo: InputMaybe<tsSEOConfigFilterInput>;
  readonly tsOptions: InputMaybe<tsTsOptionsFilterInput>;
  readonly viewer: InputMaybe<tsUserFilterInput>;
  readonly wpGatsby: InputMaybe<tsWPGatsbyFilterInput>;
  readonly writingSettings: InputMaybe<tsWritingSettingsFilterInput>;
};

/** Gravity Forms button. */
type tsFormButton = {
  /** Controls when the form button should be visible based on values selected on the form. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** Contains the URL for the image button. Only applicable when type is set to image. */
  readonly imageUrl: Maybe<Scalars['String']>;
  /** Contains the button text. Only applicable when type is set to text. */
  readonly text: Maybe<Scalars['String']>;
  /** Specifies the type of button to be displayed. Defaults to TEXT. */
  readonly type: Maybe<tsFormButtonTypeEnum>;
};

/** Type of button to be displayed. Default is TEXT. */
type tsFormButtonTypeEnum =
  | 'IMAGE'
  | 'TEXT';

type tsFormButtonTypeEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormButtonTypeEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormButtonTypeEnum>>>;
  readonly ne: InputMaybe<tsFormButtonTypeEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormButtonTypeEnum>>>;
};

/** Properties for all the email notifications which exist for a form. */
type tsFormConfirmation = {
  /** Controls which form confirmation message should be displayed. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** ID. */
  readonly id: Maybe<Scalars['String']>;
  /** Whether the confirmation is active or inactive. The default confirmation is always active. */
  readonly isActive: Maybe<Scalars['Boolean']>;
  /** Whether the confirmation message should be formatted so that paragraphs are automatically added for new lines. */
  readonly isAutoformatted: Maybe<Scalars['Boolean']>;
  /** Whether this is the default confirmation. */
  readonly isDefault: Maybe<Scalars['Boolean']>;
  /** Contains the confirmation message that will be displayed. Only applicable when type is set to &quot;MESSAGE&quot;. */
  readonly message: Maybe<Scalars['String']>;
  /** The confirmation name. */
  readonly name: Maybe<Scalars['String']>;
  /** Connection between the FormConfirmation type and the Page type */
  readonly page: Maybe<tsFormConfirmationToPageConnectionEdge>;
  /** Contains the Id of the WordPress page that the browser will be redirected to. Only applicable when type is set to `PAGE`. */
  readonly pageId: Maybe<Scalars['Int']>;
  /** Contains the query string to be appended to the redirection url. Only applicable when type is set to `REDIRECT`. */
  readonly queryString: Maybe<Scalars['String']>;
  /** Determines the type of confirmation to be used. */
  readonly type: Maybe<tsFormConfirmationTypeEnum>;
  /** Contains the URL that the browser will be redirected to. Only applicable when type is set to `REDIRECT`. */
  readonly url: Maybe<Scalars['String']>;
};

type tsFormConfirmationFilterInput = {
  readonly conditionalLogic: InputMaybe<tsConditionalLogicFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly isActive: InputMaybe<BooleanQueryOperatorInput>;
  readonly isAutoformatted: InputMaybe<BooleanQueryOperatorInput>;
  readonly isDefault: InputMaybe<BooleanQueryOperatorInput>;
  readonly message: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<tsFormConfirmationToPageConnectionEdgeFilterInput>;
  readonly pageId: InputMaybe<IntQueryOperatorInput>;
  readonly queryString: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<tsFormConfirmationTypeEnumQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsFormConfirmationFilterListInput = {
  readonly elemMatch: InputMaybe<tsFormConfirmationFilterInput>;
};

/** Connection between the FormConfirmation type and the Page type */
type tsFormConfirmationToPageConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsPage>;
};

type tsFormConfirmationToPageConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsPageFilterInput>;
};

/** Type of form confirmation to be used. */
type tsFormConfirmationTypeEnum =
  | 'MESSAGE'
  | 'PAGE'
  | 'REDIRECT';

type tsFormConfirmationTypeEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormConfirmationTypeEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormConfirmationTypeEnum>>>;
  readonly ne: InputMaybe<tsFormConfirmationTypeEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormConfirmationTypeEnum>>>;
};

/** The policies governing which entry data to include when erasing and exporting personal data. */
type tsFormDataPolicies = {
  /** Whether entry data from this form is included when erasing and exporting personal data. */
  readonly canExportAndErase: Maybe<Scalars['Boolean']>;
  /** The individual entry data exporting and erasing policies. */
  readonly entryData: Maybe<ReadonlyArray<Maybe<tsFormEntryDataPolicy>>>;
  /** The database ID of the Gravity Forms field used to identify the user. */
  readonly identificationFieldDatabaseId: Maybe<Scalars['Int']>;
};

type tsFormDataPoliciesFilterInput = {
  readonly canExportAndErase: InputMaybe<BooleanQueryOperatorInput>;
  readonly entryData: InputMaybe<tsFormEntryDataPolicyFilterListInput>;
  readonly identificationFieldDatabaseId: InputMaybe<IntQueryOperatorInput>;
};

/** Determines where the field description is displayed relative to the field. */
type tsFormDescriptionPlacementEnum =
  | 'ABOVE'
  | 'BELOW';

type tsFormDescriptionPlacementEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormDescriptionPlacementEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormDescriptionPlacementEnum>>>;
  readonly ne: InputMaybe<tsFormDescriptionPlacementEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormDescriptionPlacementEnum>>>;
};

/** The individual entry data exporting and erasing policies. */
type tsFormEntryDataPolicy = {
  /** The array key for the Gravity Forms Entry. */
  readonly key: Maybe<Scalars['String']>;
  /** Whether this field should be included when erasing personal data. */
  readonly shouldErase: Maybe<Scalars['Boolean']>;
  /** Whether this field should be included when exporting personal data. */
  readonly shouldExport: Maybe<Scalars['Boolean']>;
};

type tsFormEntryDataPolicyFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly shouldErase: InputMaybe<BooleanQueryOperatorInput>;
  readonly shouldExport: InputMaybe<BooleanQueryOperatorInput>;
};

type tsFormEntryDataPolicyFilterListInput = {
  readonly elemMatch: InputMaybe<tsFormEntryDataPolicyFilterInput>;
};

/** Gravity Forms form entry limititation details. */
type tsFormEntryLimits = {
  /** Whether the form has a limit on the number of submissions. */
  readonly hasLimit: Maybe<Scalars['Boolean']>;
  /** Message that will be displayed when the maximum number of submissions have been reached. */
  readonly limitReachedMessage: Maybe<Scalars['String']>;
  /** The time period during which submissions are allowed. */
  readonly limitationPeriod: Maybe<tsFormLimitEntriesPeriodEnum>;
  /** The number of submissions allowed. */
  readonly maxEntries: Maybe<Scalars['Int']>;
};

type tsFormEntryLimitsFilterInput = {
  readonly hasLimit: InputMaybe<BooleanQueryOperatorInput>;
  readonly limitReachedMessage: InputMaybe<StringQueryOperatorInput>;
  readonly limitationPeriod: InputMaybe<tsFormLimitEntriesPeriodEnumQueryOperatorInput>;
  readonly maxEntries: InputMaybe<IntQueryOperatorInput>;
};

type tsFormField = {
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** How the date field displays its calendar icon. */
type tsFormFieldCalendarIconTypeEnum =
  | 'CALENDAR'
  | 'CUSTOM'
  | 'NONE';

/** The form field-specifc policies for exporting and erasing personal data. */
type tsFormFieldDataPolicy = {
  /** Whether this field is used to identify the user&#039;s personal data. */
  readonly isIdentificationField: Maybe<Scalars['Boolean']>;
  /** Whether this field should be included when erasing personal data. */
  readonly shouldErase: Maybe<Scalars['Boolean']>;
  /** Whether this field should be included when exporting personal data. */
  readonly shouldExport: Maybe<Scalars['Boolean']>;
};

/** Determines where the field description is displayed relative to the field. */
type tsFormFieldDescriptionPlacementEnum =
  | 'ABOVE'
  | 'BELOW'
  | 'INHERIT';

type tsFormFieldFilterInput = {
  readonly displayOnly: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
  readonly inputType: InputMaybe<tsFormFieldTypeEnumQueryOperatorInput>;
  readonly layoutGridColumnSpan: InputMaybe<IntQueryOperatorInput>;
  readonly layoutSpacerGridColumnSpan: InputMaybe<IntQueryOperatorInput>;
  readonly pageNumber: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<tsFormFieldTypeEnumQueryOperatorInput>;
  readonly visibility: InputMaybe<tsFormFieldVisibilityEnumQueryOperatorInput>;
};

type tsFormFieldFilterListInput = {
  readonly elemMatch: InputMaybe<tsFormFieldFilterInput>;
};

/** The field label position. Empty when using the form defaults or a value of "hidden_label". */
type tsFormFieldLabelPlacementEnum =
  | 'HIDDEN'
  | 'INHERIT'
  | 'LEFT'
  | 'RIGHT'
  | 'TOP';

/** Type of indicator to use when field is required. */
type tsFormFieldRequiredIndicatorEnum =
  | 'ASTERISK'
  | 'CUSTOM'
  | 'TEXT';

type tsFormFieldRequiredIndicatorEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormFieldRequiredIndicatorEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormFieldRequiredIndicatorEnum>>>;
  readonly ne: InputMaybe<tsFormFieldRequiredIndicatorEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormFieldRequiredIndicatorEnum>>>;
};

/** The size of the field when displayed on the page. */
type tsFormFieldSizeEnum =
  | 'LARGE'
  | 'MEDIUM'
  | 'SMALL';

/** Determines how sub-labels are aligned. */
type tsFormFieldSubLabelPlacementEnum =
  | 'ABOVE'
  | 'BELOW'
  | 'INHERIT';

/** Gravity Forms Field Type. */
type tsFormFieldTypeEnum =
  | 'ADDRESS'
  | 'CALCULATION'
  | 'CAPTCHA'
  | 'CHECKBOX'
  | 'CONSENT'
  | 'DATE'
  | 'EMAIL'
  | 'FILEUPLOAD'
  | 'HIDDEN'
  | 'HIDDENPRODUCT'
  | 'HTML'
  | 'LIST'
  | 'MULTISELECT'
  | 'NAME'
  | 'NUMBER'
  | 'PAGE'
  | 'PASSWORD'
  | 'PHONE'
  | 'POST_CATEGORY'
  | 'POST_CONTENT'
  | 'POST_CUSTOM_FIELD'
  | 'POST_EXCERPT'
  | 'POST_IMAGE'
  | 'POST_TAGS'
  | 'POST_TITLE'
  | 'RADIO'
  | 'SECTION'
  | 'SELECT'
  | 'SINGLEPRODUCT'
  | 'SINGLESHIPPING'
  | 'TEXT'
  | 'TEXTAREA'
  | 'TIME'
  | 'WEBSITE';

type tsFormFieldTypeEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormFieldTypeEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormFieldTypeEnum>>>;
  readonly ne: InputMaybe<tsFormFieldTypeEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormFieldTypeEnum>>>;
};

/** Field visibility. */
type tsFormFieldVisibilityEnum =
  | 'ADMINISTRATIVE'
  | 'HIDDEN'
  | 'VISIBLE';

type tsFormFieldVisibilityEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormFieldVisibilityEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormFieldVisibilityEnum>>>;
  readonly ne: InputMaybe<tsFormFieldVisibilityEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormFieldVisibilityEnum>>>;
};

/** Determines where the field labels should be placed in relation to the field. */
type tsFormLabelPlacementEnum =
  | 'LEFT'
  | 'RIGHT'
  | 'TOP';

type tsFormLabelPlacementEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormLabelPlacementEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormLabelPlacementEnum>>>;
  readonly ne: InputMaybe<tsFormLabelPlacementEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormLabelPlacementEnum>>>;
};

/** Gravity Forms button. */
type tsFormLastPageButton = {
  /** Contains the URL for the image button. Only applicable when type is set to image. */
  readonly imageUrl: Maybe<Scalars['String']>;
  /** Contains the button text. Only applicable when type is set to text. */
  readonly text: Maybe<Scalars['String']>;
  /** Specifies the type of button to be displayed. Defaults to TEXT. */
  readonly type: Maybe<tsFormButtonTypeEnum>;
};

type tsFormLastPageButtonFilterInput = {
  readonly imageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<tsFormButtonTypeEnumQueryOperatorInput>;
};

/** When limitEntries is set to 1, this property specifies the time period during which submissions are allowed. */
type tsFormLimitEntriesPeriodEnum =
  | 'DAY'
  | 'MONTH'
  | 'WEEK'
  | 'YEAR';

type tsFormLimitEntriesPeriodEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormLimitEntriesPeriodEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormLimitEntriesPeriodEnum>>>;
  readonly ne: InputMaybe<tsFormLimitEntriesPeriodEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormLimitEntriesPeriodEnum>>>;
};

/** Gravity Forms form login requirements data. */
type tsFormLogin = {
  /** Whether the form is configured to be displayed only to logged in users. */
  readonly isLoginRequired: Maybe<Scalars['Boolean']>;
  /** When `isLoginRequired` is set to true, this controls the message displayed when non-logged in user tries to access the form. */
  readonly loginRequiredMessage: Maybe<Scalars['String']>;
};

type tsFormLoginFilterInput = {
  readonly isLoginRequired: InputMaybe<BooleanQueryOperatorInput>;
  readonly loginRequiredMessage: InputMaybe<StringQueryOperatorInput>;
};

/** Properties for all the email notifications which exist for a form. */
type tsFormNotification = {
  /** The email or merge tags to be used as the email bcc address. */
  readonly bcc: Maybe<Scalars['String']>;
  /** An associative array containing the conditional logic rules. See the Conditional Logic Object for more details. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** The notification event. Default is form_submission. */
  readonly event: Maybe<Scalars['String']>;
  /** The email or merge tag to be used as the email from address. */
  readonly from: Maybe<Scalars['String']>;
  /** The text or merge tag to be used as the email from name. */
  readonly fromName: Maybe<Scalars['String']>;
  /** The notification ID. A 13 character unique ID. */
  readonly id: Maybe<Scalars['String']>;
  /** Is the notification active or inactive. The default is true (active). */
  readonly isActive: Maybe<Scalars['Boolean']>;
  /** Whether the email message should be formatted so that paragraphs are automatically added for new lines. */
  readonly isAutoformatted: Maybe<Scalars['Boolean']>;
  /** The email body/content. Merge tags supported. */
  readonly message: Maybe<Scalars['String']>;
  /** The notification name. */
  readonly name: Maybe<Scalars['String']>;
  /** The email or merge tags to be used as the email reply to address. */
  readonly replyTo: Maybe<Scalars['String']>;
  /** Routing rules. */
  readonly routing: Maybe<ReadonlyArray<Maybe<tsFormNotificationRouting>>>;
  /** The name of the service to be used when sending this notification. Default is wordpress. */
  readonly service: Maybe<Scalars['String']>;
  /** Determines if files uploaded on the form should be included when the notification is sent. */
  readonly shouldSendAttachments: Maybe<Scalars['Boolean']>;
  /** The email subject line. Merge tags supported. */
  readonly subject: Maybe<Scalars['String']>;
  /** The ID of an email field, an email address or merge tag to be used as the email to address. */
  readonly to: Maybe<Scalars['String']>;
  /** Identifies what to use for the notification &quot;to&quot;. */
  readonly toType: Maybe<tsFormNotificationToTypeEnum>;
};

type tsFormNotificationFilterInput = {
  readonly bcc: InputMaybe<StringQueryOperatorInput>;
  readonly conditionalLogic: InputMaybe<tsConditionalLogicFilterInput>;
  readonly event: InputMaybe<StringQueryOperatorInput>;
  readonly from: InputMaybe<StringQueryOperatorInput>;
  readonly fromName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly isActive: InputMaybe<BooleanQueryOperatorInput>;
  readonly isAutoformatted: InputMaybe<BooleanQueryOperatorInput>;
  readonly message: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly replyTo: InputMaybe<StringQueryOperatorInput>;
  readonly routing: InputMaybe<tsFormNotificationRoutingFilterListInput>;
  readonly service: InputMaybe<StringQueryOperatorInput>;
  readonly shouldSendAttachments: InputMaybe<BooleanQueryOperatorInput>;
  readonly subject: InputMaybe<StringQueryOperatorInput>;
  readonly to: InputMaybe<StringQueryOperatorInput>;
  readonly toType: InputMaybe<tsFormNotificationToTypeEnumQueryOperatorInput>;
};

type tsFormNotificationFilterListInput = {
  readonly elemMatch: InputMaybe<tsFormNotificationFilterInput>;
};

/** Properties for all the email notifications which exist for a form. */
type tsFormNotificationRouting = {
  /** The email or merge tag to be used as the email To address if this rule is a match. */
  readonly email: Maybe<Scalars['String']>;
  /** Target field ID. The field that will have it’s value compared with the value property to determine if this rule is a match. */
  readonly fieldId: Maybe<Scalars['Int']>;
  /** Operator to be used when evaluating this rule. */
  readonly operator: Maybe<tsFormRuleOperatorEnum>;
  /** The value to compare with the field specified by fieldId. */
  readonly value: Maybe<Scalars['String']>;
};

type tsFormNotificationRoutingFilterInput = {
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly fieldId: InputMaybe<IntQueryOperatorInput>;
  readonly operator: InputMaybe<tsFormRuleOperatorEnumQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type tsFormNotificationRoutingFilterListInput = {
  readonly elemMatch: InputMaybe<tsFormNotificationRoutingFilterInput>;
};

/** What to use for the notification "to". */
type tsFormNotificationToTypeEnum =
  | 'EMAIL'
  | 'FIELD'
  | 'HIDDEN'
  | 'ROUTING';

type tsFormNotificationToTypeEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormNotificationToTypeEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormNotificationToTypeEnum>>>;
  readonly ne: InputMaybe<tsFormNotificationToTypeEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormNotificationToTypeEnum>>>;
};

/** Style of progress bar. */
type tsFormPageProgressStyleEnum =
  | 'BLUE'
  | 'CUSTOM'
  | 'GREEN'
  | 'GREY'
  | 'ORANGE'
  | 'RED';

type tsFormPageProgressStyleEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormPageProgressStyleEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormPageProgressStyleEnum>>>;
  readonly ne: InputMaybe<tsFormPageProgressStyleEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormPageProgressStyleEnum>>>;
};

/** Type of page progress indicator to be displayed. */
type tsFormPageProgressTypeEnum =
  | 'NONE'
  | 'PERCENTAGE'
  | 'STEPS';

type tsFormPageProgressTypeEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormPageProgressTypeEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormPageProgressTypeEnum>>>;
  readonly ne: InputMaybe<tsFormPageProgressTypeEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormPageProgressTypeEnum>>>;
};

/** Gravity Forms form pagination data. */
type tsFormPagination = {
  /** Progress bar background color. Can be any CSS color value. Only applies when `style` is set to &quot;CUSTOM&quot;. */
  readonly backgroundColor: Maybe<Scalars['String']>;
  /** Progress bar text color. Can be any CSS color value. Only applies when `style` is set to &quot;CUSTOM&quot;. */
  readonly color: Maybe<Scalars['String']>;
  /** Whether the confirmation bar should be displayed with the confirmation text. */
  readonly hasProgressbarOnConfirmation: Maybe<Scalars['Boolean']>;
  /** Last page button data. */
  readonly lastPageButton: Maybe<tsFormLastPageButton>;
  /** Names of the form&#039;s pages. */
  readonly pageNames: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** The confirmation text to display once the end of the progress bar has been reached. Only applies when `hasProgressbarOnConfirmation` is set to true. */
  readonly progressbarCompletionText: Maybe<Scalars['String']>;
  /** Style of progress bar. */
  readonly style: Maybe<tsFormPageProgressStyleEnum>;
  /** Type of progress indicator. */
  readonly type: Maybe<tsFormPageProgressTypeEnum>;
};

type tsFormPaginationFilterInput = {
  readonly backgroundColor: InputMaybe<StringQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly hasProgressbarOnConfirmation: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastPageButton: InputMaybe<tsFormLastPageButtonFilterInput>;
  readonly pageNames: InputMaybe<StringQueryOperatorInput>;
  readonly progressbarCompletionText: InputMaybe<StringQueryOperatorInput>;
  readonly style: InputMaybe<tsFormPageProgressStyleEnumQueryOperatorInput>;
  readonly type: InputMaybe<tsFormPageProgressTypeEnumQueryOperatorInput>;
};

/** Gravity Forms form Personal Data settings. */
type tsFormPersonalData = {
  /** The policies governing which entry data to include when erasing and exporting personal data. */
  readonly dataPolicies: Maybe<tsFormDataPolicies>;
  /** The number of days to retain entries. `null` if `retentionPolicy` is set to `RETAIN` entries indefinitely. */
  readonly daysToRetain: Maybe<Scalars['Int']>;
  /** The policy for retaining old entry data. */
  readonly retentionPolicy: Maybe<tsFormRetentionPolicyEnum>;
  /** Whether the IP address should be saved to the form submission. */
  readonly shouldSaveIP: Maybe<Scalars['Boolean']>;
};

type tsFormPersonalDataFilterInput = {
  readonly dataPolicies: InputMaybe<tsFormDataPoliciesFilterInput>;
  readonly daysToRetain: InputMaybe<IntQueryOperatorInput>;
  readonly retentionPolicy: InputMaybe<tsFormRetentionPolicyEnumQueryOperatorInput>;
  readonly shouldSaveIP: InputMaybe<BooleanQueryOperatorInput>;
};

/** Gravity Forms form entry limititation details. */
type tsFormPostCreation = {
  /** When `useCurrentUserAsAuthor` is `false`, this contains the User object for the author. */
  readonly author: Maybe<tsUser>;
  /** When `useCurrentUserAsAuthor` is `false`, this property contains the user database that will be used as the Post author. */
  readonly authorDatabaseId: Maybe<Scalars['Int']>;
  /** When `useCurrentUserAsAuthor` is `false`, this property contains the user ID that will be used as the Post author. */
  readonly authorId: Maybe<Scalars['ID']>;
  /** Form forms with Post fields, but without a Post Category field, this property contains the default category database ID the post will be associated with when created. */
  readonly categoryDatabaseId: Maybe<Scalars['Int']>;
  /** Template to be used when creating the post content. Field variables (i.e. {Name:3} ) can be added to the template to insert user submitted values into the post content. Only applicable when `hasContentTemplate` is `true`. */
  readonly contentTemplate: Maybe<Scalars['String']>;
  /** Determines the format that the Post should be created with. */
  readonly format: Maybe<tsPostFormatTypeEnum>;
  /** Determines if the post template functionality is enabled. When enabled, the post content will be created based on the template specified by `contentTemplate`. */
  readonly hasContentTemplate: Maybe<Scalars['Boolean']>;
  /** Determines if the post title template functionality is enabled. When enabled, the post title will be created based on the template specified by `titleTemplate`. */
  readonly hasTitleTemplate: Maybe<Scalars['Boolean']>;
  /** For forms with Post fields, this determines if the post should be created using the current logged in user as the author. */
  readonly shouldUseCurrentUserAsAuthor: Maybe<Scalars['Boolean']>;
  /** For forms with Post fields, determines the status that the Post should be created with. */
  readonly status: Maybe<Scalars['String']>;
  /** Template to be used when creating the post title. Field variables (i.e. {Name:3} ) can be added to the template to insert user submitted values into the post title. Only applicable when `hasTitleTemplate` is `true`. */
  readonly titleTemplate: Maybe<Scalars['String']>;
};

type tsFormPostCreationFilterInput = {
  readonly author: InputMaybe<tsUserFilterInput>;
  readonly authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly authorId: InputMaybe<IDQueryOperatorInput>;
  readonly categoryDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly contentTemplate: InputMaybe<StringQueryOperatorInput>;
  readonly format: InputMaybe<tsPostFormatTypeEnumQueryOperatorInput>;
  readonly hasContentTemplate: InputMaybe<BooleanQueryOperatorInput>;
  readonly hasTitleTemplate: InputMaybe<BooleanQueryOperatorInput>;
  readonly shouldUseCurrentUserAsAuthor: InputMaybe<BooleanQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly titleTemplate: InputMaybe<StringQueryOperatorInput>;
};

/** The Personal Data retention policy. */
type tsFormRetentionPolicyEnum =
  | 'DELETE'
  | 'RETAIN'
  | 'TRASH';

type tsFormRetentionPolicyEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormRetentionPolicyEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormRetentionPolicyEnum>>>;
  readonly ne: InputMaybe<tsFormRetentionPolicyEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormRetentionPolicyEnum>>>;
};

/** Operator to be used when evaluating logic rules. */
type tsFormRuleOperatorEnum =
  | 'CONTAINS'
  | 'ENDS_WITH'
  | 'GREATER_THAN'
  | 'IS'
  | 'IS_NOT'
  | 'LESS_THAN'
  | 'STARTS_WITH';

type tsFormRuleOperatorEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormRuleOperatorEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormRuleOperatorEnum>>>;
  readonly ne: InputMaybe<tsFormRuleOperatorEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormRuleOperatorEnum>>>;
};

/** Gravity Forms form Save and Continue data. */
type tsFormSaveAndContinue = {
  /** Contains the save button text. */
  readonly buttonText: Maybe<Scalars['String']>;
  /** Whether the Save And Continue feature is enabled. */
  readonly hasSaveAndContinue: Maybe<Scalars['Boolean']>;
};

type tsFormSaveAndContinueFilterInput = {
  readonly buttonText: InputMaybe<StringQueryOperatorInput>;
  readonly hasSaveAndContinue: InputMaybe<BooleanQueryOperatorInput>;
};

/** Gravity Forms form scheduling data. */
type tsFormSchedule = {
  /** Message to be displayed when form is no longer available. */
  readonly closedMessage: Maybe<Scalars['String']>;
  /** The Date/time details when the form will become inactive. */
  readonly endDetails: Maybe<tsFormScheduleDetails>;
  /** Specifies if this form is scheduled to be displayed only during a certain configured date/time. */
  readonly hasSchedule: Maybe<Scalars['Boolean']>;
  /** Message to be displayed when form is not yet available. */
  readonly pendingMessage: Maybe<Scalars['String']>;
  /** The Date/time details when the form will become active/visible. */
  readonly startDetails: Maybe<tsFormScheduleDetails>;
};

/** Gravity Forms form scheduling data. */
type tsFormScheduleDetails = {
  /** Whether the date is in the AM or PM of a 12-hour clock. */
  readonly amPm: Maybe<tsAmPmEnum>;
  /** The schedule date in local time. */
  readonly date: Maybe<Scalars['Date']>;
  /** The schedule date in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** The hour (1-12). */
  readonly hour: Maybe<Scalars['Int']>;
  /** The minute. */
  readonly minute: Maybe<Scalars['Int']>;
};


/** Gravity Forms form scheduling data. */
type tsFormScheduleDetails_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


/** Gravity Forms form scheduling data. */
type tsFormScheduleDetails_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type tsFormScheduleDetailsFilterInput = {
  readonly amPm: InputMaybe<tsAmPmEnumQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly hour: InputMaybe<IntQueryOperatorInput>;
  readonly minute: InputMaybe<IntQueryOperatorInput>;
};

type tsFormScheduleFilterInput = {
  readonly closedMessage: InputMaybe<StringQueryOperatorInput>;
  readonly endDetails: InputMaybe<tsFormScheduleDetailsFilterInput>;
  readonly hasSchedule: InputMaybe<BooleanQueryOperatorInput>;
  readonly pendingMessage: InputMaybe<StringQueryOperatorInput>;
  readonly startDetails: InputMaybe<tsFormScheduleDetailsFilterInput>;
};

/** Determines how sub-labels are aligned. */
type tsFormSubLabelPlacementEnum =
  | 'ABOVE'
  | 'BELOW';

type tsFormSubLabelPlacementEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormSubLabelPlacementEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormSubLabelPlacementEnum>>>;
  readonly ne: InputMaybe<tsFormSubLabelPlacementEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormSubLabelPlacementEnum>>>;
};

/** Gravity Forms submit button. */
type tsFormSubmitButton = {
  /** Controls when the form button should be visible based on values selected on the form. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** Contains the URL for the image button. Only applicable when type is set to image. */
  readonly imageUrl: Maybe<Scalars['String']>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** Where the submit button should be located. */
  readonly location: Maybe<tsFormSubmitButtonLocationEnum>;
  /** Contains the button text. Only applicable when type is set to text. */
  readonly text: Maybe<Scalars['String']>;
  /** Specifies the type of button to be displayed. Defaults to TEXT. */
  readonly type: Maybe<tsFormButtonTypeEnum>;
  /** The width of the submit button element. */
  readonly width: Maybe<tsFormSubmitButtonWidthEnum>;
};

type tsFormSubmitButtonFilterInput = {
  readonly conditionalLogic: InputMaybe<tsConditionalLogicFilterInput>;
  readonly imageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly layoutGridColumnSpan: InputMaybe<IntQueryOperatorInput>;
  readonly location: InputMaybe<tsFormSubmitButtonLocationEnumQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<tsFormButtonTypeEnumQueryOperatorInput>;
  readonly width: InputMaybe<tsFormSubmitButtonWidthEnumQueryOperatorInput>;
};

/** Where the submit button should be located. */
type tsFormSubmitButtonLocationEnum =
  | 'BOTTOM'
  | 'INLINE';

type tsFormSubmitButtonLocationEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormSubmitButtonLocationEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormSubmitButtonLocationEnum>>>;
  readonly ne: InputMaybe<tsFormSubmitButtonLocationEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormSubmitButtonLocationEnum>>>;
};

/** Submit button width. */
type tsFormSubmitButtonWidthEnum =
  | 'AUTO'
  | 'FULL';

type tsFormSubmitButtonWidthEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsFormSubmitButtonWidthEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsFormSubmitButtonWidthEnum>>>;
  readonly ne: InputMaybe<tsFormSubmitButtonWidthEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsFormSubmitButtonWidthEnum>>>;
};

/** The template assigned to the node */
type tsFormTemplate = tsContentTemplate & {
  /** The name of the template */
  readonly templateName: Maybe<Scalars['String']>;
};

/** The general setting type */
type tsGeneralSettings = {
  /** A date format for all date strings. */
  readonly dateFormat: Maybe<Scalars['String']>;
  /** Site tagline. */
  readonly description: Maybe<Scalars['String']>;
  /** This address is used for admin purposes, like new user notification. */
  readonly email: Maybe<Scalars['String']>;
  /** WordPress locale code. */
  readonly language: Maybe<Scalars['String']>;
  /** A day number of the week that the week should start on. */
  readonly startOfWeek: Maybe<Scalars['Int']>;
  /** A time format for all time strings. */
  readonly timeFormat: Maybe<Scalars['String']>;
  /** A city in the same timezone as you. */
  readonly timezone: Maybe<Scalars['String']>;
  /** Site title. */
  readonly title: Maybe<Scalars['String']>;
  /** Site URL. */
  readonly url: Maybe<Scalars['String']>;
};

type tsGeneralSettingsFilterInput = {
  readonly dateFormat: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly startOfWeek: InputMaybe<IntQueryOperatorInput>;
  readonly timeFormat: InputMaybe<StringQueryOperatorInput>;
  readonly timezone: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

/** Currencies supported by Gravity Forms. */
type tsGfCurrencyEnum =
  | 'AUD'
  | 'BRL'
  | 'CAD'
  | 'CHF'
  | 'CZK'
  | 'DKK'
  | 'EUR'
  | 'GBP'
  | 'HKD'
  | 'HUF'
  | 'ILS'
  | 'JPY'
  | 'MXN'
  | 'MYR'
  | 'NOK'
  | 'NZD'
  | 'PHP'
  | 'PLN'
  | 'RUB'
  | 'SEK'
  | 'SGD'
  | 'THB'
  | 'TWD'
  | 'USD'
  | 'ZAR';

type tsGfCurrencyEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsGfCurrencyEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsGfCurrencyEnum>>>;
  readonly ne: InputMaybe<tsGfCurrencyEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsGfCurrencyEnum>>>;
};

/** A Gravity Forms draft entry. */
type tsGfDraftEntry = Node & tsGfEntry & tsNode & tsNodeWithForm & {
  readonly children: ReadonlyArray<Node>;
  /** The user who created the entry. */
  readonly createdBy: Maybe<tsUser>;
  /** Database ID of the user that submitted of the form if a logged in user submitted the form. */
  readonly createdByDatabaseId: Maybe<Scalars['Int']>;
  /** Global ID of the user that submitted of the form if a logged in user submitted the form. */
  readonly createdById: Maybe<Scalars['ID']>;
  /** The date and time that the entry was created in local time. */
  readonly dateCreated: Maybe<Scalars['String']>;
  /** The date and time that the entry was created in GMT. */
  readonly dateCreatedGmt: Maybe<Scalars['String']>;
  /** The date and time that the entry was created in local time. */
  readonly dateUpdated: Maybe<Scalars['String']>;
  /** The date and time that the entry was updated in GMT. */
  readonly dateUpdatedGmt: Maybe<Scalars['String']>;
  /** The form object of the node. */
  readonly form: Maybe<tsGfForm>;
  /** The database identifier of the form of the node. */
  readonly formDatabaseId: Maybe<Scalars['Int']>;
  /** Connection between the GfEntry type and the FormField type */
  readonly formFields: Maybe<tsGfEntryToFormFieldConnection>;
  /** The globally unique identifier of the form of the node. */
  readonly formId: Maybe<Scalars['ID']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Client IP of user who submitted the form. */
  readonly ip: Maybe<Scalars['String']>;
  /** Whether the entry is a draft. */
  readonly isDraft: Maybe<Scalars['Boolean']>;
  /** Whether the entry has been submitted. */
  readonly isSubmitted: Maybe<Scalars['Boolean']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** The resume token. Only applies to draft entries. */
  readonly resumeToken: Maybe<Scalars['String']>;
  /** Source URL of page that contained the form when it was submitted. */
  readonly sourceUrl: Maybe<Scalars['String']>;
  /** Provides the name and version of both the browser and operating system from which the entry was submitted. */
  readonly userAgent: Maybe<Scalars['String']>;
};

type tsGfDraftEntryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsGfDraftEntryEdge>;
  readonly group: ReadonlyArray<tsGfDraftEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsGfDraftEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsGfDraftEntryConnection_distinctArgs = {
  field: tsGfDraftEntryFieldsEnum;
};


type tsGfDraftEntryConnection_groupArgs = {
  field: tsGfDraftEntryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsGfDraftEntryConnection_maxArgs = {
  field: tsGfDraftEntryFieldsEnum;
};


type tsGfDraftEntryConnection_minArgs = {
  field: tsGfDraftEntryFieldsEnum;
};


type tsGfDraftEntryConnection_sumArgs = {
  field: tsGfDraftEntryFieldsEnum;
};

type tsGfDraftEntryEdge = {
  readonly next: Maybe<tsGfDraftEntry>;
  readonly node: tsGfDraftEntry;
  readonly previous: Maybe<tsGfDraftEntry>;
};

type tsGfDraftEntryFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdByDatabaseId'
  | 'createdById'
  | 'createdBy.authorProfile.fieldGroupName'
  | 'createdBy.authorProfile.profile.altText'
  | 'createdBy.authorProfile.profile.authorDatabaseId'
  | 'createdBy.authorProfile.profile.authorId'
  | 'createdBy.authorProfile.profile.caption'
  | 'createdBy.authorProfile.profile.children'
  | 'createdBy.authorProfile.profile.commentCount'
  | 'createdBy.authorProfile.profile.commentStatus'
  | 'createdBy.authorProfile.profile.contentTypeName'
  | 'createdBy.authorProfile.profile.databaseId'
  | 'createdBy.authorProfile.profile.date'
  | 'createdBy.authorProfile.profile.dateGmt'
  | 'createdBy.authorProfile.profile.description'
  | 'createdBy.authorProfile.profile.desiredSlug'
  | 'createdBy.authorProfile.profile.enclosure'
  | 'createdBy.authorProfile.profile.fileSize'
  | 'createdBy.authorProfile.profile.filename'
  | 'createdBy.authorProfile.profile.filesize'
  | 'createdBy.authorProfile.profile.gatsbyImage'
  | 'createdBy.authorProfile.profile.guid'
  | 'createdBy.authorProfile.profile.height'
  | 'createdBy.authorProfile.profile.id'
  | 'createdBy.authorProfile.profile.isContentNode'
  | 'createdBy.authorProfile.profile.isTermNode'
  | 'createdBy.authorProfile.profile.link'
  | 'createdBy.authorProfile.profile.mediaItemUrl'
  | 'createdBy.authorProfile.profile.mediaType'
  | 'createdBy.authorProfile.profile.mimeType'
  | 'createdBy.authorProfile.profile.modified'
  | 'createdBy.authorProfile.profile.modifiedGmt'
  | 'createdBy.authorProfile.profile.nodeType'
  | 'createdBy.authorProfile.profile.parentDatabaseId'
  | 'createdBy.authorProfile.profile.parentId'
  | 'createdBy.authorProfile.profile.publicUrl'
  | 'createdBy.authorProfile.profile.sizes'
  | 'createdBy.authorProfile.profile.slug'
  | 'createdBy.authorProfile.profile.sourceUrl'
  | 'createdBy.authorProfile.profile.srcSet'
  | 'createdBy.authorProfile.profile.status'
  | 'createdBy.authorProfile.profile.title'
  | 'createdBy.authorProfile.profile.uri'
  | 'createdBy.authorProfile.profile.width'
  | 'createdBy.avatar.default'
  | 'createdBy.avatar.extraAttr'
  | 'createdBy.avatar.forceDefault'
  | 'createdBy.avatar.foundAvatar'
  | 'createdBy.avatar.height'
  | 'createdBy.avatar.rating'
  | 'createdBy.avatar.scheme'
  | 'createdBy.avatar.size'
  | 'createdBy.avatar.url'
  | 'createdBy.avatar.width'
  | 'createdBy.capKey'
  | 'createdBy.capabilities'
  | 'createdBy.children'
  | 'createdBy.children.children'
  | 'createdBy.children.children.children'
  | 'createdBy.children.children.id'
  | 'createdBy.children.id'
  | 'createdBy.children.internal.content'
  | 'createdBy.children.internal.contentDigest'
  | 'createdBy.children.internal.contentFilePath'
  | 'createdBy.children.internal.description'
  | 'createdBy.children.internal.fieldOwners'
  | 'createdBy.children.internal.ignoreType'
  | 'createdBy.children.internal.mediaType'
  | 'createdBy.children.internal.owner'
  | 'createdBy.children.internal.type'
  | 'createdBy.children.parent.children'
  | 'createdBy.children.parent.id'
  | 'createdBy.comments.nodes'
  | 'createdBy.comments.nodes.agent'
  | 'createdBy.comments.nodes.approved'
  | 'createdBy.comments.nodes.authorIp'
  | 'createdBy.comments.nodes.children'
  | 'createdBy.comments.nodes.content'
  | 'createdBy.comments.nodes.databaseId'
  | 'createdBy.comments.nodes.date'
  | 'createdBy.comments.nodes.dateGmt'
  | 'createdBy.comments.nodes.id'
  | 'createdBy.comments.nodes.karma'
  | 'createdBy.comments.nodes.nodeType'
  | 'createdBy.comments.nodes.parentDatabaseId'
  | 'createdBy.comments.nodes.parentId'
  | 'createdBy.comments.nodes.type'
  | 'createdBy.databaseId'
  | 'createdBy.description'
  | 'createdBy.email'
  | 'createdBy.extraCapabilities'
  | 'createdBy.firstName'
  | 'createdBy.id'
  | 'createdBy.internal.content'
  | 'createdBy.internal.contentDigest'
  | 'createdBy.internal.contentFilePath'
  | 'createdBy.internal.description'
  | 'createdBy.internal.fieldOwners'
  | 'createdBy.internal.ignoreType'
  | 'createdBy.internal.mediaType'
  | 'createdBy.internal.owner'
  | 'createdBy.internal.type'
  | 'createdBy.isContentNode'
  | 'createdBy.isTermNode'
  | 'createdBy.lastName'
  | 'createdBy.locale'
  | 'createdBy.name'
  | 'createdBy.nicename'
  | 'createdBy.nickname'
  | 'createdBy.nodeType'
  | 'createdBy.pages.nodes'
  | 'createdBy.pages.nodes.authorDatabaseId'
  | 'createdBy.pages.nodes.authorId'
  | 'createdBy.pages.nodes.children'
  | 'createdBy.pages.nodes.commentCount'
  | 'createdBy.pages.nodes.commentStatus'
  | 'createdBy.pages.nodes.content'
  | 'createdBy.pages.nodes.contentTypeName'
  | 'createdBy.pages.nodes.databaseId'
  | 'createdBy.pages.nodes.date'
  | 'createdBy.pages.nodes.dateGmt'
  | 'createdBy.pages.nodes.desiredSlug'
  | 'createdBy.pages.nodes.enclosure'
  | 'createdBy.pages.nodes.featuredImageDatabaseId'
  | 'createdBy.pages.nodes.featuredImageId'
  | 'createdBy.pages.nodes.guid'
  | 'createdBy.pages.nodes.id'
  | 'createdBy.pages.nodes.isContentNode'
  | 'createdBy.pages.nodes.isFrontPage'
  | 'createdBy.pages.nodes.isPostsPage'
  | 'createdBy.pages.nodes.isPrivacyPage'
  | 'createdBy.pages.nodes.isRevision'
  | 'createdBy.pages.nodes.isTermNode'
  | 'createdBy.pages.nodes.link'
  | 'createdBy.pages.nodes.menuOrder'
  | 'createdBy.pages.nodes.modified'
  | 'createdBy.pages.nodes.modifiedGmt'
  | 'createdBy.pages.nodes.nodeType'
  | 'createdBy.pages.nodes.parentDatabaseId'
  | 'createdBy.pages.nodes.parentId'
  | 'createdBy.pages.nodes.slug'
  | 'createdBy.pages.nodes.status'
  | 'createdBy.pages.nodes.title'
  | 'createdBy.pages.nodes.uri'
  | 'createdBy.parent.children'
  | 'createdBy.parent.children.children'
  | 'createdBy.parent.children.id'
  | 'createdBy.parent.id'
  | 'createdBy.parent.internal.content'
  | 'createdBy.parent.internal.contentDigest'
  | 'createdBy.parent.internal.contentFilePath'
  | 'createdBy.parent.internal.description'
  | 'createdBy.parent.internal.fieldOwners'
  | 'createdBy.parent.internal.ignoreType'
  | 'createdBy.parent.internal.mediaType'
  | 'createdBy.parent.internal.owner'
  | 'createdBy.parent.internal.type'
  | 'createdBy.parent.parent.children'
  | 'createdBy.parent.parent.id'
  | 'createdBy.posts.nodes'
  | 'createdBy.posts.nodes.authorDatabaseId'
  | 'createdBy.posts.nodes.authorId'
  | 'createdBy.posts.nodes.children'
  | 'createdBy.posts.nodes.commentCount'
  | 'createdBy.posts.nodes.commentStatus'
  | 'createdBy.posts.nodes.content'
  | 'createdBy.posts.nodes.contentTypeName'
  | 'createdBy.posts.nodes.databaseId'
  | 'createdBy.posts.nodes.date'
  | 'createdBy.posts.nodes.dateGmt'
  | 'createdBy.posts.nodes.desiredSlug'
  | 'createdBy.posts.nodes.enclosure'
  | 'createdBy.posts.nodes.excerpt'
  | 'createdBy.posts.nodes.featuredImageDatabaseId'
  | 'createdBy.posts.nodes.featuredImageId'
  | 'createdBy.posts.nodes.guid'
  | 'createdBy.posts.nodes.id'
  | 'createdBy.posts.nodes.isContentNode'
  | 'createdBy.posts.nodes.isRevision'
  | 'createdBy.posts.nodes.isSticky'
  | 'createdBy.posts.nodes.isTermNode'
  | 'createdBy.posts.nodes.link'
  | 'createdBy.posts.nodes.modified'
  | 'createdBy.posts.nodes.modifiedGmt'
  | 'createdBy.posts.nodes.nodeType'
  | 'createdBy.posts.nodes.pingStatus'
  | 'createdBy.posts.nodes.pinged'
  | 'createdBy.posts.nodes.slug'
  | 'createdBy.posts.nodes.status'
  | 'createdBy.posts.nodes.title'
  | 'createdBy.posts.nodes.toPing'
  | 'createdBy.posts.nodes.uri'
  | 'createdBy.registeredDate'
  | 'createdBy.roles.nodes'
  | 'createdBy.roles.nodes.capabilities'
  | 'createdBy.roles.nodes.children'
  | 'createdBy.roles.nodes.displayName'
  | 'createdBy.roles.nodes.id'
  | 'createdBy.roles.nodes.name'
  | 'createdBy.roles.nodes.nodeType'
  | 'createdBy.seo.breadcrumbTitle'
  | 'createdBy.seo.canonical'
  | 'createdBy.seo.fullHead'
  | 'createdBy.seo.language'
  | 'createdBy.seo.metaDesc'
  | 'createdBy.seo.metaRobotsNofollow'
  | 'createdBy.seo.metaRobotsNoindex'
  | 'createdBy.seo.opengraphDescription'
  | 'createdBy.seo.opengraphImage.altText'
  | 'createdBy.seo.opengraphImage.authorDatabaseId'
  | 'createdBy.seo.opengraphImage.authorId'
  | 'createdBy.seo.opengraphImage.caption'
  | 'createdBy.seo.opengraphImage.children'
  | 'createdBy.seo.opengraphImage.commentCount'
  | 'createdBy.seo.opengraphImage.commentStatus'
  | 'createdBy.seo.opengraphImage.contentTypeName'
  | 'createdBy.seo.opengraphImage.databaseId'
  | 'createdBy.seo.opengraphImage.date'
  | 'createdBy.seo.opengraphImage.dateGmt'
  | 'createdBy.seo.opengraphImage.description'
  | 'createdBy.seo.opengraphImage.desiredSlug'
  | 'createdBy.seo.opengraphImage.enclosure'
  | 'createdBy.seo.opengraphImage.fileSize'
  | 'createdBy.seo.opengraphImage.filename'
  | 'createdBy.seo.opengraphImage.filesize'
  | 'createdBy.seo.opengraphImage.gatsbyImage'
  | 'createdBy.seo.opengraphImage.guid'
  | 'createdBy.seo.opengraphImage.height'
  | 'createdBy.seo.opengraphImage.id'
  | 'createdBy.seo.opengraphImage.isContentNode'
  | 'createdBy.seo.opengraphImage.isTermNode'
  | 'createdBy.seo.opengraphImage.link'
  | 'createdBy.seo.opengraphImage.mediaItemUrl'
  | 'createdBy.seo.opengraphImage.mediaType'
  | 'createdBy.seo.opengraphImage.mimeType'
  | 'createdBy.seo.opengraphImage.modified'
  | 'createdBy.seo.opengraphImage.modifiedGmt'
  | 'createdBy.seo.opengraphImage.nodeType'
  | 'createdBy.seo.opengraphImage.parentDatabaseId'
  | 'createdBy.seo.opengraphImage.parentId'
  | 'createdBy.seo.opengraphImage.publicUrl'
  | 'createdBy.seo.opengraphImage.sizes'
  | 'createdBy.seo.opengraphImage.slug'
  | 'createdBy.seo.opengraphImage.sourceUrl'
  | 'createdBy.seo.opengraphImage.srcSet'
  | 'createdBy.seo.opengraphImage.status'
  | 'createdBy.seo.opengraphImage.title'
  | 'createdBy.seo.opengraphImage.uri'
  | 'createdBy.seo.opengraphImage.width'
  | 'createdBy.seo.opengraphTitle'
  | 'createdBy.seo.region'
  | 'createdBy.seo.schema.articleType'
  | 'createdBy.seo.schema.pageType'
  | 'createdBy.seo.schema.raw'
  | 'createdBy.seo.social.facebook'
  | 'createdBy.seo.social.instagram'
  | 'createdBy.seo.social.linkedIn'
  | 'createdBy.seo.social.mySpace'
  | 'createdBy.seo.social.pinterest'
  | 'createdBy.seo.social.soundCloud'
  | 'createdBy.seo.social.twitter'
  | 'createdBy.seo.social.wikipedia'
  | 'createdBy.seo.social.youTube'
  | 'createdBy.seo.title'
  | 'createdBy.seo.twitterDescription'
  | 'createdBy.seo.twitterImage.altText'
  | 'createdBy.seo.twitterImage.authorDatabaseId'
  | 'createdBy.seo.twitterImage.authorId'
  | 'createdBy.seo.twitterImage.caption'
  | 'createdBy.seo.twitterImage.children'
  | 'createdBy.seo.twitterImage.commentCount'
  | 'createdBy.seo.twitterImage.commentStatus'
  | 'createdBy.seo.twitterImage.contentTypeName'
  | 'createdBy.seo.twitterImage.databaseId'
  | 'createdBy.seo.twitterImage.date'
  | 'createdBy.seo.twitterImage.dateGmt'
  | 'createdBy.seo.twitterImage.description'
  | 'createdBy.seo.twitterImage.desiredSlug'
  | 'createdBy.seo.twitterImage.enclosure'
  | 'createdBy.seo.twitterImage.fileSize'
  | 'createdBy.seo.twitterImage.filename'
  | 'createdBy.seo.twitterImage.filesize'
  | 'createdBy.seo.twitterImage.gatsbyImage'
  | 'createdBy.seo.twitterImage.guid'
  | 'createdBy.seo.twitterImage.height'
  | 'createdBy.seo.twitterImage.id'
  | 'createdBy.seo.twitterImage.isContentNode'
  | 'createdBy.seo.twitterImage.isTermNode'
  | 'createdBy.seo.twitterImage.link'
  | 'createdBy.seo.twitterImage.mediaItemUrl'
  | 'createdBy.seo.twitterImage.mediaType'
  | 'createdBy.seo.twitterImage.mimeType'
  | 'createdBy.seo.twitterImage.modified'
  | 'createdBy.seo.twitterImage.modifiedGmt'
  | 'createdBy.seo.twitterImage.nodeType'
  | 'createdBy.seo.twitterImage.parentDatabaseId'
  | 'createdBy.seo.twitterImage.parentId'
  | 'createdBy.seo.twitterImage.publicUrl'
  | 'createdBy.seo.twitterImage.sizes'
  | 'createdBy.seo.twitterImage.slug'
  | 'createdBy.seo.twitterImage.sourceUrl'
  | 'createdBy.seo.twitterImage.srcSet'
  | 'createdBy.seo.twitterImage.status'
  | 'createdBy.seo.twitterImage.title'
  | 'createdBy.seo.twitterImage.uri'
  | 'createdBy.seo.twitterImage.width'
  | 'createdBy.seo.twitterTitle'
  | 'createdBy.slug'
  | 'createdBy.uri'
  | 'createdBy.url'
  | 'createdBy.username'
  | 'dateCreated'
  | 'dateCreatedGmt'
  | 'dateUpdated'
  | 'dateUpdatedGmt'
  | 'formDatabaseId'
  | 'formFields.nodes'
  | 'formFields.nodes.displayOnly'
  | 'formFields.nodes.id'
  | 'formFields.nodes.inputType'
  | 'formFields.nodes.layoutGridColumnSpan'
  | 'formFields.nodes.layoutSpacerGridColumnSpan'
  | 'formFields.nodes.pageNumber'
  | 'formFields.nodes.type'
  | 'formFields.nodes.visibility'
  | 'formId'
  | 'form.children'
  | 'form.children.children'
  | 'form.children.children.children'
  | 'form.children.children.id'
  | 'form.children.id'
  | 'form.children.internal.content'
  | 'form.children.internal.contentDigest'
  | 'form.children.internal.contentFilePath'
  | 'form.children.internal.description'
  | 'form.children.internal.fieldOwners'
  | 'form.children.internal.ignoreType'
  | 'form.children.internal.mediaType'
  | 'form.children.internal.owner'
  | 'form.children.internal.type'
  | 'form.children.parent.children'
  | 'form.children.parent.id'
  | 'form.confirmations'
  | 'form.confirmations.conditionalLogic.actionType'
  | 'form.confirmations.conditionalLogic.logicType'
  | 'form.confirmations.conditionalLogic.rules'
  | 'form.confirmations.id'
  | 'form.confirmations.isActive'
  | 'form.confirmations.isAutoformatted'
  | 'form.confirmations.isDefault'
  | 'form.confirmations.message'
  | 'form.confirmations.name'
  | 'form.confirmations.pageId'
  | 'form.confirmations.queryString'
  | 'form.confirmations.type'
  | 'form.confirmations.url'
  | 'form.cssClass'
  | 'form.customRequiredIndicator'
  | 'form.databaseId'
  | 'form.dateCreated'
  | 'form.dateCreatedGmt'
  | 'form.description'
  | 'form.descriptionPlacement'
  | 'form.entries.count'
  | 'form.entries.nodes'
  | 'form.entries.nodes.children'
  | 'form.entries.nodes.createdByDatabaseId'
  | 'form.entries.nodes.createdById'
  | 'form.entries.nodes.dateCreated'
  | 'form.entries.nodes.dateCreatedGmt'
  | 'form.entries.nodes.dateUpdated'
  | 'form.entries.nodes.dateUpdatedGmt'
  | 'form.entries.nodes.formDatabaseId'
  | 'form.entries.nodes.formId'
  | 'form.entries.nodes.id'
  | 'form.entries.nodes.ip'
  | 'form.entries.nodes.isDraft'
  | 'form.entries.nodes.isSubmitted'
  | 'form.entries.nodes.nodeType'
  | 'form.entries.nodes.sourceUrl'
  | 'form.entries.nodes.userAgent'
  | 'form.entryLimits.hasLimit'
  | 'form.entryLimits.limitReachedMessage'
  | 'form.entryLimits.limitationPeriod'
  | 'form.entryLimits.maxEntries'
  | 'form.firstPageCssClass'
  | 'form.formFields.nodes'
  | 'form.formFields.nodes.displayOnly'
  | 'form.formFields.nodes.id'
  | 'form.formFields.nodes.inputType'
  | 'form.formFields.nodes.layoutGridColumnSpan'
  | 'form.formFields.nodes.layoutSpacerGridColumnSpan'
  | 'form.formFields.nodes.pageNumber'
  | 'form.formFields.nodes.type'
  | 'form.formFields.nodes.visibility'
  | 'form.hasConditionalLogicAnimation'
  | 'form.hasHoneypot'
  | 'form.hasValidationSummary'
  | 'form.id'
  | 'form.internal.content'
  | 'form.internal.contentDigest'
  | 'form.internal.contentFilePath'
  | 'form.internal.description'
  | 'form.internal.fieldOwners'
  | 'form.internal.ignoreType'
  | 'form.internal.mediaType'
  | 'form.internal.owner'
  | 'form.internal.type'
  | 'form.isActive'
  | 'form.isTrash'
  | 'form.labelPlacement'
  | 'form.login.isLoginRequired'
  | 'form.login.loginRequiredMessage'
  | 'form.markupVersion'
  | 'form.nextFieldId'
  | 'form.nodeType'
  | 'form.notifications'
  | 'form.notifications.bcc'
  | 'form.notifications.conditionalLogic.actionType'
  | 'form.notifications.conditionalLogic.logicType'
  | 'form.notifications.conditionalLogic.rules'
  | 'form.notifications.event'
  | 'form.notifications.from'
  | 'form.notifications.fromName'
  | 'form.notifications.id'
  | 'form.notifications.isActive'
  | 'form.notifications.isAutoformatted'
  | 'form.notifications.message'
  | 'form.notifications.name'
  | 'form.notifications.replyTo'
  | 'form.notifications.routing'
  | 'form.notifications.routing.email'
  | 'form.notifications.routing.fieldId'
  | 'form.notifications.routing.operator'
  | 'form.notifications.routing.value'
  | 'form.notifications.service'
  | 'form.notifications.shouldSendAttachments'
  | 'form.notifications.subject'
  | 'form.notifications.to'
  | 'form.notifications.toType'
  | 'form.pagination.backgroundColor'
  | 'form.pagination.color'
  | 'form.pagination.hasProgressbarOnConfirmation'
  | 'form.pagination.lastPageButton.imageUrl'
  | 'form.pagination.lastPageButton.text'
  | 'form.pagination.lastPageButton.type'
  | 'form.pagination.pageNames'
  | 'form.pagination.progressbarCompletionText'
  | 'form.pagination.style'
  | 'form.pagination.type'
  | 'form.parent.children'
  | 'form.parent.children.children'
  | 'form.parent.children.id'
  | 'form.parent.id'
  | 'form.parent.internal.content'
  | 'form.parent.internal.contentDigest'
  | 'form.parent.internal.contentFilePath'
  | 'form.parent.internal.description'
  | 'form.parent.internal.fieldOwners'
  | 'form.parent.internal.ignoreType'
  | 'form.parent.internal.mediaType'
  | 'form.parent.internal.owner'
  | 'form.parent.internal.type'
  | 'form.parent.parent.children'
  | 'form.parent.parent.id'
  | 'form.personalData.dataPolicies.canExportAndErase'
  | 'form.personalData.dataPolicies.entryData'
  | 'form.personalData.dataPolicies.identificationFieldDatabaseId'
  | 'form.personalData.daysToRetain'
  | 'form.personalData.retentionPolicy'
  | 'form.personalData.shouldSaveIP'
  | 'form.postCreation.authorDatabaseId'
  | 'form.postCreation.authorId'
  | 'form.postCreation.author.capKey'
  | 'form.postCreation.author.capabilities'
  | 'form.postCreation.author.children'
  | 'form.postCreation.author.databaseId'
  | 'form.postCreation.author.description'
  | 'form.postCreation.author.email'
  | 'form.postCreation.author.extraCapabilities'
  | 'form.postCreation.author.firstName'
  | 'form.postCreation.author.id'
  | 'form.postCreation.author.isContentNode'
  | 'form.postCreation.author.isTermNode'
  | 'form.postCreation.author.lastName'
  | 'form.postCreation.author.locale'
  | 'form.postCreation.author.name'
  | 'form.postCreation.author.nicename'
  | 'form.postCreation.author.nickname'
  | 'form.postCreation.author.nodeType'
  | 'form.postCreation.author.registeredDate'
  | 'form.postCreation.author.slug'
  | 'form.postCreation.author.uri'
  | 'form.postCreation.author.url'
  | 'form.postCreation.author.username'
  | 'form.postCreation.categoryDatabaseId'
  | 'form.postCreation.contentTemplate'
  | 'form.postCreation.format'
  | 'form.postCreation.hasContentTemplate'
  | 'form.postCreation.hasTitleTemplate'
  | 'form.postCreation.shouldUseCurrentUserAsAuthor'
  | 'form.postCreation.status'
  | 'form.postCreation.titleTemplate'
  | 'form.requiredIndicator'
  | 'form.saveAndContinue.buttonText'
  | 'form.saveAndContinue.hasSaveAndContinue'
  | 'form.scheduling.closedMessage'
  | 'form.scheduling.endDetails.amPm'
  | 'form.scheduling.endDetails.date'
  | 'form.scheduling.endDetails.dateGmt'
  | 'form.scheduling.endDetails.hour'
  | 'form.scheduling.endDetails.minute'
  | 'form.scheduling.hasSchedule'
  | 'form.scheduling.pendingMessage'
  | 'form.scheduling.startDetails.amPm'
  | 'form.scheduling.startDetails.date'
  | 'form.scheduling.startDetails.dateGmt'
  | 'form.scheduling.startDetails.hour'
  | 'form.scheduling.startDetails.minute'
  | 'form.subLabelPlacement'
  | 'form.submitButton.conditionalLogic.actionType'
  | 'form.submitButton.conditionalLogic.logicType'
  | 'form.submitButton.conditionalLogic.rules'
  | 'form.submitButton.imageUrl'
  | 'form.submitButton.layoutGridColumnSpan'
  | 'form.submitButton.location'
  | 'form.submitButton.text'
  | 'form.submitButton.type'
  | 'form.submitButton.width'
  | 'form.title'
  | 'form.version'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'ip'
  | 'isDraft'
  | 'isSubmitted'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resumeToken'
  | 'sourceUrl'
  | 'userAgent';

type tsGfDraftEntryFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdBy: InputMaybe<tsUserFilterInput>;
  readonly createdByDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly createdById: InputMaybe<IDQueryOperatorInput>;
  readonly dateCreated: InputMaybe<StringQueryOperatorInput>;
  readonly dateCreatedGmt: InputMaybe<StringQueryOperatorInput>;
  readonly dateUpdated: InputMaybe<StringQueryOperatorInput>;
  readonly dateUpdatedGmt: InputMaybe<StringQueryOperatorInput>;
  readonly form: InputMaybe<tsGfFormFilterInput>;
  readonly formDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly formFields: InputMaybe<tsGfEntryToFormFieldConnectionFilterInput>;
  readonly formId: InputMaybe<IDQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly ip: InputMaybe<StringQueryOperatorInput>;
  readonly isDraft: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSubmitted: InputMaybe<BooleanQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resumeToken: InputMaybe<StringQueryOperatorInput>;
  readonly sourceUrl: InputMaybe<StringQueryOperatorInput>;
  readonly userAgent: InputMaybe<StringQueryOperatorInput>;
};

type tsGfDraftEntryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsGfDraftEntryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsGfDraftEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsGfDraftEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsGfDraftEntryGroupConnection_distinctArgs = {
  field: tsGfDraftEntryFieldsEnum;
};


type tsGfDraftEntryGroupConnection_groupArgs = {
  field: tsGfDraftEntryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsGfDraftEntryGroupConnection_maxArgs = {
  field: tsGfDraftEntryFieldsEnum;
};


type tsGfDraftEntryGroupConnection_minArgs = {
  field: tsGfDraftEntryFieldsEnum;
};


type tsGfDraftEntryGroupConnection_sumArgs = {
  field: tsGfDraftEntryFieldsEnum;
};

type tsGfDraftEntrySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsGfDraftEntryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type tsGfEntry = {
  readonly children: ReadonlyArray<Node>;
  /** The user who created the entry. */
  readonly createdBy: Maybe<tsUser>;
  /** Database ID of the user that submitted of the form if a logged in user submitted the form. */
  readonly createdByDatabaseId: Maybe<Scalars['Int']>;
  /** Global ID of the user that submitted of the form if a logged in user submitted the form. */
  readonly createdById: Maybe<Scalars['ID']>;
  /** The date and time that the entry was created in local time. */
  readonly dateCreated: Maybe<Scalars['String']>;
  /** The date and time that the entry was created in GMT. */
  readonly dateCreatedGmt: Maybe<Scalars['String']>;
  /** The date and time that the entry was created in local time. */
  readonly dateUpdated: Maybe<Scalars['String']>;
  /** The date and time that the entry was updated in GMT. */
  readonly dateUpdatedGmt: Maybe<Scalars['String']>;
  /** The form object of the node. */
  readonly form: Maybe<tsGfForm>;
  /** The database identifier of the form of the node. */
  readonly formDatabaseId: Maybe<Scalars['Int']>;
  /** Connection between the GfEntry type and the FormField type */
  readonly formFields: Maybe<tsGfEntryToFormFieldConnection>;
  /** The globally unique identifier of the form of the node. */
  readonly formId: Maybe<Scalars['ID']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Client IP of user who submitted the form. */
  readonly ip: Maybe<Scalars['String']>;
  /** Whether the entry is a draft. */
  readonly isDraft: Maybe<Scalars['Boolean']>;
  /** Whether the entry has been submitted. */
  readonly isSubmitted: Maybe<Scalars['Boolean']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Source URL of page that contained the form when it was submitted. */
  readonly sourceUrl: Maybe<Scalars['String']>;
  /** Provides the name and version of both the browser and operating system from which the entry was submitted. */
  readonly userAgent: Maybe<Scalars['String']>;
};

type tsGfEntryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsGfEntryEdge>;
  readonly group: ReadonlyArray<tsGfEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsGfEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsGfEntryConnection_distinctArgs = {
  field: tsGfEntryFieldsEnum;
};


type tsGfEntryConnection_groupArgs = {
  field: tsGfEntryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsGfEntryConnection_maxArgs = {
  field: tsGfEntryFieldsEnum;
};


type tsGfEntryConnection_minArgs = {
  field: tsGfEntryFieldsEnum;
};


type tsGfEntryConnection_sumArgs = {
  field: tsGfEntryFieldsEnum;
};

type tsGfEntryEdge = {
  readonly next: Maybe<tsGfEntry>;
  readonly node: tsGfEntry;
  readonly previous: Maybe<tsGfEntry>;
};

type tsGfEntryFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdByDatabaseId'
  | 'createdById'
  | 'createdBy.authorProfile.fieldGroupName'
  | 'createdBy.authorProfile.profile.altText'
  | 'createdBy.authorProfile.profile.authorDatabaseId'
  | 'createdBy.authorProfile.profile.authorId'
  | 'createdBy.authorProfile.profile.caption'
  | 'createdBy.authorProfile.profile.children'
  | 'createdBy.authorProfile.profile.commentCount'
  | 'createdBy.authorProfile.profile.commentStatus'
  | 'createdBy.authorProfile.profile.contentTypeName'
  | 'createdBy.authorProfile.profile.databaseId'
  | 'createdBy.authorProfile.profile.date'
  | 'createdBy.authorProfile.profile.dateGmt'
  | 'createdBy.authorProfile.profile.description'
  | 'createdBy.authorProfile.profile.desiredSlug'
  | 'createdBy.authorProfile.profile.enclosure'
  | 'createdBy.authorProfile.profile.fileSize'
  | 'createdBy.authorProfile.profile.filename'
  | 'createdBy.authorProfile.profile.filesize'
  | 'createdBy.authorProfile.profile.gatsbyImage'
  | 'createdBy.authorProfile.profile.guid'
  | 'createdBy.authorProfile.profile.height'
  | 'createdBy.authorProfile.profile.id'
  | 'createdBy.authorProfile.profile.isContentNode'
  | 'createdBy.authorProfile.profile.isTermNode'
  | 'createdBy.authorProfile.profile.link'
  | 'createdBy.authorProfile.profile.mediaItemUrl'
  | 'createdBy.authorProfile.profile.mediaType'
  | 'createdBy.authorProfile.profile.mimeType'
  | 'createdBy.authorProfile.profile.modified'
  | 'createdBy.authorProfile.profile.modifiedGmt'
  | 'createdBy.authorProfile.profile.nodeType'
  | 'createdBy.authorProfile.profile.parentDatabaseId'
  | 'createdBy.authorProfile.profile.parentId'
  | 'createdBy.authorProfile.profile.publicUrl'
  | 'createdBy.authorProfile.profile.sizes'
  | 'createdBy.authorProfile.profile.slug'
  | 'createdBy.authorProfile.profile.sourceUrl'
  | 'createdBy.authorProfile.profile.srcSet'
  | 'createdBy.authorProfile.profile.status'
  | 'createdBy.authorProfile.profile.title'
  | 'createdBy.authorProfile.profile.uri'
  | 'createdBy.authorProfile.profile.width'
  | 'createdBy.avatar.default'
  | 'createdBy.avatar.extraAttr'
  | 'createdBy.avatar.forceDefault'
  | 'createdBy.avatar.foundAvatar'
  | 'createdBy.avatar.height'
  | 'createdBy.avatar.rating'
  | 'createdBy.avatar.scheme'
  | 'createdBy.avatar.size'
  | 'createdBy.avatar.url'
  | 'createdBy.avatar.width'
  | 'createdBy.capKey'
  | 'createdBy.capabilities'
  | 'createdBy.children'
  | 'createdBy.children.children'
  | 'createdBy.children.children.children'
  | 'createdBy.children.children.id'
  | 'createdBy.children.id'
  | 'createdBy.children.internal.content'
  | 'createdBy.children.internal.contentDigest'
  | 'createdBy.children.internal.contentFilePath'
  | 'createdBy.children.internal.description'
  | 'createdBy.children.internal.fieldOwners'
  | 'createdBy.children.internal.ignoreType'
  | 'createdBy.children.internal.mediaType'
  | 'createdBy.children.internal.owner'
  | 'createdBy.children.internal.type'
  | 'createdBy.children.parent.children'
  | 'createdBy.children.parent.id'
  | 'createdBy.comments.nodes'
  | 'createdBy.comments.nodes.agent'
  | 'createdBy.comments.nodes.approved'
  | 'createdBy.comments.nodes.authorIp'
  | 'createdBy.comments.nodes.children'
  | 'createdBy.comments.nodes.content'
  | 'createdBy.comments.nodes.databaseId'
  | 'createdBy.comments.nodes.date'
  | 'createdBy.comments.nodes.dateGmt'
  | 'createdBy.comments.nodes.id'
  | 'createdBy.comments.nodes.karma'
  | 'createdBy.comments.nodes.nodeType'
  | 'createdBy.comments.nodes.parentDatabaseId'
  | 'createdBy.comments.nodes.parentId'
  | 'createdBy.comments.nodes.type'
  | 'createdBy.databaseId'
  | 'createdBy.description'
  | 'createdBy.email'
  | 'createdBy.extraCapabilities'
  | 'createdBy.firstName'
  | 'createdBy.id'
  | 'createdBy.internal.content'
  | 'createdBy.internal.contentDigest'
  | 'createdBy.internal.contentFilePath'
  | 'createdBy.internal.description'
  | 'createdBy.internal.fieldOwners'
  | 'createdBy.internal.ignoreType'
  | 'createdBy.internal.mediaType'
  | 'createdBy.internal.owner'
  | 'createdBy.internal.type'
  | 'createdBy.isContentNode'
  | 'createdBy.isTermNode'
  | 'createdBy.lastName'
  | 'createdBy.locale'
  | 'createdBy.name'
  | 'createdBy.nicename'
  | 'createdBy.nickname'
  | 'createdBy.nodeType'
  | 'createdBy.pages.nodes'
  | 'createdBy.pages.nodes.authorDatabaseId'
  | 'createdBy.pages.nodes.authorId'
  | 'createdBy.pages.nodes.children'
  | 'createdBy.pages.nodes.commentCount'
  | 'createdBy.pages.nodes.commentStatus'
  | 'createdBy.pages.nodes.content'
  | 'createdBy.pages.nodes.contentTypeName'
  | 'createdBy.pages.nodes.databaseId'
  | 'createdBy.pages.nodes.date'
  | 'createdBy.pages.nodes.dateGmt'
  | 'createdBy.pages.nodes.desiredSlug'
  | 'createdBy.pages.nodes.enclosure'
  | 'createdBy.pages.nodes.featuredImageDatabaseId'
  | 'createdBy.pages.nodes.featuredImageId'
  | 'createdBy.pages.nodes.guid'
  | 'createdBy.pages.nodes.id'
  | 'createdBy.pages.nodes.isContentNode'
  | 'createdBy.pages.nodes.isFrontPage'
  | 'createdBy.pages.nodes.isPostsPage'
  | 'createdBy.pages.nodes.isPrivacyPage'
  | 'createdBy.pages.nodes.isRevision'
  | 'createdBy.pages.nodes.isTermNode'
  | 'createdBy.pages.nodes.link'
  | 'createdBy.pages.nodes.menuOrder'
  | 'createdBy.pages.nodes.modified'
  | 'createdBy.pages.nodes.modifiedGmt'
  | 'createdBy.pages.nodes.nodeType'
  | 'createdBy.pages.nodes.parentDatabaseId'
  | 'createdBy.pages.nodes.parentId'
  | 'createdBy.pages.nodes.slug'
  | 'createdBy.pages.nodes.status'
  | 'createdBy.pages.nodes.title'
  | 'createdBy.pages.nodes.uri'
  | 'createdBy.parent.children'
  | 'createdBy.parent.children.children'
  | 'createdBy.parent.children.id'
  | 'createdBy.parent.id'
  | 'createdBy.parent.internal.content'
  | 'createdBy.parent.internal.contentDigest'
  | 'createdBy.parent.internal.contentFilePath'
  | 'createdBy.parent.internal.description'
  | 'createdBy.parent.internal.fieldOwners'
  | 'createdBy.parent.internal.ignoreType'
  | 'createdBy.parent.internal.mediaType'
  | 'createdBy.parent.internal.owner'
  | 'createdBy.parent.internal.type'
  | 'createdBy.parent.parent.children'
  | 'createdBy.parent.parent.id'
  | 'createdBy.posts.nodes'
  | 'createdBy.posts.nodes.authorDatabaseId'
  | 'createdBy.posts.nodes.authorId'
  | 'createdBy.posts.nodes.children'
  | 'createdBy.posts.nodes.commentCount'
  | 'createdBy.posts.nodes.commentStatus'
  | 'createdBy.posts.nodes.content'
  | 'createdBy.posts.nodes.contentTypeName'
  | 'createdBy.posts.nodes.databaseId'
  | 'createdBy.posts.nodes.date'
  | 'createdBy.posts.nodes.dateGmt'
  | 'createdBy.posts.nodes.desiredSlug'
  | 'createdBy.posts.nodes.enclosure'
  | 'createdBy.posts.nodes.excerpt'
  | 'createdBy.posts.nodes.featuredImageDatabaseId'
  | 'createdBy.posts.nodes.featuredImageId'
  | 'createdBy.posts.nodes.guid'
  | 'createdBy.posts.nodes.id'
  | 'createdBy.posts.nodes.isContentNode'
  | 'createdBy.posts.nodes.isRevision'
  | 'createdBy.posts.nodes.isSticky'
  | 'createdBy.posts.nodes.isTermNode'
  | 'createdBy.posts.nodes.link'
  | 'createdBy.posts.nodes.modified'
  | 'createdBy.posts.nodes.modifiedGmt'
  | 'createdBy.posts.nodes.nodeType'
  | 'createdBy.posts.nodes.pingStatus'
  | 'createdBy.posts.nodes.pinged'
  | 'createdBy.posts.nodes.slug'
  | 'createdBy.posts.nodes.status'
  | 'createdBy.posts.nodes.title'
  | 'createdBy.posts.nodes.toPing'
  | 'createdBy.posts.nodes.uri'
  | 'createdBy.registeredDate'
  | 'createdBy.roles.nodes'
  | 'createdBy.roles.nodes.capabilities'
  | 'createdBy.roles.nodes.children'
  | 'createdBy.roles.nodes.displayName'
  | 'createdBy.roles.nodes.id'
  | 'createdBy.roles.nodes.name'
  | 'createdBy.roles.nodes.nodeType'
  | 'createdBy.seo.breadcrumbTitle'
  | 'createdBy.seo.canonical'
  | 'createdBy.seo.fullHead'
  | 'createdBy.seo.language'
  | 'createdBy.seo.metaDesc'
  | 'createdBy.seo.metaRobotsNofollow'
  | 'createdBy.seo.metaRobotsNoindex'
  | 'createdBy.seo.opengraphDescription'
  | 'createdBy.seo.opengraphImage.altText'
  | 'createdBy.seo.opengraphImage.authorDatabaseId'
  | 'createdBy.seo.opengraphImage.authorId'
  | 'createdBy.seo.opengraphImage.caption'
  | 'createdBy.seo.opengraphImage.children'
  | 'createdBy.seo.opengraphImage.commentCount'
  | 'createdBy.seo.opengraphImage.commentStatus'
  | 'createdBy.seo.opengraphImage.contentTypeName'
  | 'createdBy.seo.opengraphImage.databaseId'
  | 'createdBy.seo.opengraphImage.date'
  | 'createdBy.seo.opengraphImage.dateGmt'
  | 'createdBy.seo.opengraphImage.description'
  | 'createdBy.seo.opengraphImage.desiredSlug'
  | 'createdBy.seo.opengraphImage.enclosure'
  | 'createdBy.seo.opengraphImage.fileSize'
  | 'createdBy.seo.opengraphImage.filename'
  | 'createdBy.seo.opengraphImage.filesize'
  | 'createdBy.seo.opengraphImage.gatsbyImage'
  | 'createdBy.seo.opengraphImage.guid'
  | 'createdBy.seo.opengraphImage.height'
  | 'createdBy.seo.opengraphImage.id'
  | 'createdBy.seo.opengraphImage.isContentNode'
  | 'createdBy.seo.opengraphImage.isTermNode'
  | 'createdBy.seo.opengraphImage.link'
  | 'createdBy.seo.opengraphImage.mediaItemUrl'
  | 'createdBy.seo.opengraphImage.mediaType'
  | 'createdBy.seo.opengraphImage.mimeType'
  | 'createdBy.seo.opengraphImage.modified'
  | 'createdBy.seo.opengraphImage.modifiedGmt'
  | 'createdBy.seo.opengraphImage.nodeType'
  | 'createdBy.seo.opengraphImage.parentDatabaseId'
  | 'createdBy.seo.opengraphImage.parentId'
  | 'createdBy.seo.opengraphImage.publicUrl'
  | 'createdBy.seo.opengraphImage.sizes'
  | 'createdBy.seo.opengraphImage.slug'
  | 'createdBy.seo.opengraphImage.sourceUrl'
  | 'createdBy.seo.opengraphImage.srcSet'
  | 'createdBy.seo.opengraphImage.status'
  | 'createdBy.seo.opengraphImage.title'
  | 'createdBy.seo.opengraphImage.uri'
  | 'createdBy.seo.opengraphImage.width'
  | 'createdBy.seo.opengraphTitle'
  | 'createdBy.seo.region'
  | 'createdBy.seo.schema.articleType'
  | 'createdBy.seo.schema.pageType'
  | 'createdBy.seo.schema.raw'
  | 'createdBy.seo.social.facebook'
  | 'createdBy.seo.social.instagram'
  | 'createdBy.seo.social.linkedIn'
  | 'createdBy.seo.social.mySpace'
  | 'createdBy.seo.social.pinterest'
  | 'createdBy.seo.social.soundCloud'
  | 'createdBy.seo.social.twitter'
  | 'createdBy.seo.social.wikipedia'
  | 'createdBy.seo.social.youTube'
  | 'createdBy.seo.title'
  | 'createdBy.seo.twitterDescription'
  | 'createdBy.seo.twitterImage.altText'
  | 'createdBy.seo.twitterImage.authorDatabaseId'
  | 'createdBy.seo.twitterImage.authorId'
  | 'createdBy.seo.twitterImage.caption'
  | 'createdBy.seo.twitterImage.children'
  | 'createdBy.seo.twitterImage.commentCount'
  | 'createdBy.seo.twitterImage.commentStatus'
  | 'createdBy.seo.twitterImage.contentTypeName'
  | 'createdBy.seo.twitterImage.databaseId'
  | 'createdBy.seo.twitterImage.date'
  | 'createdBy.seo.twitterImage.dateGmt'
  | 'createdBy.seo.twitterImage.description'
  | 'createdBy.seo.twitterImage.desiredSlug'
  | 'createdBy.seo.twitterImage.enclosure'
  | 'createdBy.seo.twitterImage.fileSize'
  | 'createdBy.seo.twitterImage.filename'
  | 'createdBy.seo.twitterImage.filesize'
  | 'createdBy.seo.twitterImage.gatsbyImage'
  | 'createdBy.seo.twitterImage.guid'
  | 'createdBy.seo.twitterImage.height'
  | 'createdBy.seo.twitterImage.id'
  | 'createdBy.seo.twitterImage.isContentNode'
  | 'createdBy.seo.twitterImage.isTermNode'
  | 'createdBy.seo.twitterImage.link'
  | 'createdBy.seo.twitterImage.mediaItemUrl'
  | 'createdBy.seo.twitterImage.mediaType'
  | 'createdBy.seo.twitterImage.mimeType'
  | 'createdBy.seo.twitterImage.modified'
  | 'createdBy.seo.twitterImage.modifiedGmt'
  | 'createdBy.seo.twitterImage.nodeType'
  | 'createdBy.seo.twitterImage.parentDatabaseId'
  | 'createdBy.seo.twitterImage.parentId'
  | 'createdBy.seo.twitterImage.publicUrl'
  | 'createdBy.seo.twitterImage.sizes'
  | 'createdBy.seo.twitterImage.slug'
  | 'createdBy.seo.twitterImage.sourceUrl'
  | 'createdBy.seo.twitterImage.srcSet'
  | 'createdBy.seo.twitterImage.status'
  | 'createdBy.seo.twitterImage.title'
  | 'createdBy.seo.twitterImage.uri'
  | 'createdBy.seo.twitterImage.width'
  | 'createdBy.seo.twitterTitle'
  | 'createdBy.slug'
  | 'createdBy.uri'
  | 'createdBy.url'
  | 'createdBy.username'
  | 'dateCreated'
  | 'dateCreatedGmt'
  | 'dateUpdated'
  | 'dateUpdatedGmt'
  | 'formDatabaseId'
  | 'formFields.nodes'
  | 'formFields.nodes.displayOnly'
  | 'formFields.nodes.id'
  | 'formFields.nodes.inputType'
  | 'formFields.nodes.layoutGridColumnSpan'
  | 'formFields.nodes.layoutSpacerGridColumnSpan'
  | 'formFields.nodes.pageNumber'
  | 'formFields.nodes.type'
  | 'formFields.nodes.visibility'
  | 'formId'
  | 'form.children'
  | 'form.children.children'
  | 'form.children.children.children'
  | 'form.children.children.id'
  | 'form.children.id'
  | 'form.children.internal.content'
  | 'form.children.internal.contentDigest'
  | 'form.children.internal.contentFilePath'
  | 'form.children.internal.description'
  | 'form.children.internal.fieldOwners'
  | 'form.children.internal.ignoreType'
  | 'form.children.internal.mediaType'
  | 'form.children.internal.owner'
  | 'form.children.internal.type'
  | 'form.children.parent.children'
  | 'form.children.parent.id'
  | 'form.confirmations'
  | 'form.confirmations.conditionalLogic.actionType'
  | 'form.confirmations.conditionalLogic.logicType'
  | 'form.confirmations.conditionalLogic.rules'
  | 'form.confirmations.id'
  | 'form.confirmations.isActive'
  | 'form.confirmations.isAutoformatted'
  | 'form.confirmations.isDefault'
  | 'form.confirmations.message'
  | 'form.confirmations.name'
  | 'form.confirmations.pageId'
  | 'form.confirmations.queryString'
  | 'form.confirmations.type'
  | 'form.confirmations.url'
  | 'form.cssClass'
  | 'form.customRequiredIndicator'
  | 'form.databaseId'
  | 'form.dateCreated'
  | 'form.dateCreatedGmt'
  | 'form.description'
  | 'form.descriptionPlacement'
  | 'form.entries.count'
  | 'form.entries.nodes'
  | 'form.entries.nodes.children'
  | 'form.entries.nodes.createdByDatabaseId'
  | 'form.entries.nodes.createdById'
  | 'form.entries.nodes.dateCreated'
  | 'form.entries.nodes.dateCreatedGmt'
  | 'form.entries.nodes.dateUpdated'
  | 'form.entries.nodes.dateUpdatedGmt'
  | 'form.entries.nodes.formDatabaseId'
  | 'form.entries.nodes.formId'
  | 'form.entries.nodes.id'
  | 'form.entries.nodes.ip'
  | 'form.entries.nodes.isDraft'
  | 'form.entries.nodes.isSubmitted'
  | 'form.entries.nodes.nodeType'
  | 'form.entries.nodes.sourceUrl'
  | 'form.entries.nodes.userAgent'
  | 'form.entryLimits.hasLimit'
  | 'form.entryLimits.limitReachedMessage'
  | 'form.entryLimits.limitationPeriod'
  | 'form.entryLimits.maxEntries'
  | 'form.firstPageCssClass'
  | 'form.formFields.nodes'
  | 'form.formFields.nodes.displayOnly'
  | 'form.formFields.nodes.id'
  | 'form.formFields.nodes.inputType'
  | 'form.formFields.nodes.layoutGridColumnSpan'
  | 'form.formFields.nodes.layoutSpacerGridColumnSpan'
  | 'form.formFields.nodes.pageNumber'
  | 'form.formFields.nodes.type'
  | 'form.formFields.nodes.visibility'
  | 'form.hasConditionalLogicAnimation'
  | 'form.hasHoneypot'
  | 'form.hasValidationSummary'
  | 'form.id'
  | 'form.internal.content'
  | 'form.internal.contentDigest'
  | 'form.internal.contentFilePath'
  | 'form.internal.description'
  | 'form.internal.fieldOwners'
  | 'form.internal.ignoreType'
  | 'form.internal.mediaType'
  | 'form.internal.owner'
  | 'form.internal.type'
  | 'form.isActive'
  | 'form.isTrash'
  | 'form.labelPlacement'
  | 'form.login.isLoginRequired'
  | 'form.login.loginRequiredMessage'
  | 'form.markupVersion'
  | 'form.nextFieldId'
  | 'form.nodeType'
  | 'form.notifications'
  | 'form.notifications.bcc'
  | 'form.notifications.conditionalLogic.actionType'
  | 'form.notifications.conditionalLogic.logicType'
  | 'form.notifications.conditionalLogic.rules'
  | 'form.notifications.event'
  | 'form.notifications.from'
  | 'form.notifications.fromName'
  | 'form.notifications.id'
  | 'form.notifications.isActive'
  | 'form.notifications.isAutoformatted'
  | 'form.notifications.message'
  | 'form.notifications.name'
  | 'form.notifications.replyTo'
  | 'form.notifications.routing'
  | 'form.notifications.routing.email'
  | 'form.notifications.routing.fieldId'
  | 'form.notifications.routing.operator'
  | 'form.notifications.routing.value'
  | 'form.notifications.service'
  | 'form.notifications.shouldSendAttachments'
  | 'form.notifications.subject'
  | 'form.notifications.to'
  | 'form.notifications.toType'
  | 'form.pagination.backgroundColor'
  | 'form.pagination.color'
  | 'form.pagination.hasProgressbarOnConfirmation'
  | 'form.pagination.lastPageButton.imageUrl'
  | 'form.pagination.lastPageButton.text'
  | 'form.pagination.lastPageButton.type'
  | 'form.pagination.pageNames'
  | 'form.pagination.progressbarCompletionText'
  | 'form.pagination.style'
  | 'form.pagination.type'
  | 'form.parent.children'
  | 'form.parent.children.children'
  | 'form.parent.children.id'
  | 'form.parent.id'
  | 'form.parent.internal.content'
  | 'form.parent.internal.contentDigest'
  | 'form.parent.internal.contentFilePath'
  | 'form.parent.internal.description'
  | 'form.parent.internal.fieldOwners'
  | 'form.parent.internal.ignoreType'
  | 'form.parent.internal.mediaType'
  | 'form.parent.internal.owner'
  | 'form.parent.internal.type'
  | 'form.parent.parent.children'
  | 'form.parent.parent.id'
  | 'form.personalData.dataPolicies.canExportAndErase'
  | 'form.personalData.dataPolicies.entryData'
  | 'form.personalData.dataPolicies.identificationFieldDatabaseId'
  | 'form.personalData.daysToRetain'
  | 'form.personalData.retentionPolicy'
  | 'form.personalData.shouldSaveIP'
  | 'form.postCreation.authorDatabaseId'
  | 'form.postCreation.authorId'
  | 'form.postCreation.author.capKey'
  | 'form.postCreation.author.capabilities'
  | 'form.postCreation.author.children'
  | 'form.postCreation.author.databaseId'
  | 'form.postCreation.author.description'
  | 'form.postCreation.author.email'
  | 'form.postCreation.author.extraCapabilities'
  | 'form.postCreation.author.firstName'
  | 'form.postCreation.author.id'
  | 'form.postCreation.author.isContentNode'
  | 'form.postCreation.author.isTermNode'
  | 'form.postCreation.author.lastName'
  | 'form.postCreation.author.locale'
  | 'form.postCreation.author.name'
  | 'form.postCreation.author.nicename'
  | 'form.postCreation.author.nickname'
  | 'form.postCreation.author.nodeType'
  | 'form.postCreation.author.registeredDate'
  | 'form.postCreation.author.slug'
  | 'form.postCreation.author.uri'
  | 'form.postCreation.author.url'
  | 'form.postCreation.author.username'
  | 'form.postCreation.categoryDatabaseId'
  | 'form.postCreation.contentTemplate'
  | 'form.postCreation.format'
  | 'form.postCreation.hasContentTemplate'
  | 'form.postCreation.hasTitleTemplate'
  | 'form.postCreation.shouldUseCurrentUserAsAuthor'
  | 'form.postCreation.status'
  | 'form.postCreation.titleTemplate'
  | 'form.requiredIndicator'
  | 'form.saveAndContinue.buttonText'
  | 'form.saveAndContinue.hasSaveAndContinue'
  | 'form.scheduling.closedMessage'
  | 'form.scheduling.endDetails.amPm'
  | 'form.scheduling.endDetails.date'
  | 'form.scheduling.endDetails.dateGmt'
  | 'form.scheduling.endDetails.hour'
  | 'form.scheduling.endDetails.minute'
  | 'form.scheduling.hasSchedule'
  | 'form.scheduling.pendingMessage'
  | 'form.scheduling.startDetails.amPm'
  | 'form.scheduling.startDetails.date'
  | 'form.scheduling.startDetails.dateGmt'
  | 'form.scheduling.startDetails.hour'
  | 'form.scheduling.startDetails.minute'
  | 'form.subLabelPlacement'
  | 'form.submitButton.conditionalLogic.actionType'
  | 'form.submitButton.conditionalLogic.logicType'
  | 'form.submitButton.conditionalLogic.rules'
  | 'form.submitButton.imageUrl'
  | 'form.submitButton.layoutGridColumnSpan'
  | 'form.submitButton.location'
  | 'form.submitButton.text'
  | 'form.submitButton.type'
  | 'form.submitButton.width'
  | 'form.title'
  | 'form.version'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'ip'
  | 'isDraft'
  | 'isSubmitted'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'sourceUrl'
  | 'userAgent';

type tsGfEntryFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdBy: InputMaybe<tsUserFilterInput>;
  readonly createdByDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly createdById: InputMaybe<IDQueryOperatorInput>;
  readonly dateCreated: InputMaybe<StringQueryOperatorInput>;
  readonly dateCreatedGmt: InputMaybe<StringQueryOperatorInput>;
  readonly dateUpdated: InputMaybe<StringQueryOperatorInput>;
  readonly dateUpdatedGmt: InputMaybe<StringQueryOperatorInput>;
  readonly form: InputMaybe<tsGfFormFilterInput>;
  readonly formDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly formFields: InputMaybe<tsGfEntryToFormFieldConnectionFilterInput>;
  readonly formId: InputMaybe<IDQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly ip: InputMaybe<StringQueryOperatorInput>;
  readonly isDraft: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSubmitted: InputMaybe<BooleanQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sourceUrl: InputMaybe<StringQueryOperatorInput>;
  readonly userAgent: InputMaybe<StringQueryOperatorInput>;
};

type tsGfEntryFilterListInput = {
  readonly elemMatch: InputMaybe<tsGfEntryFilterInput>;
};

type tsGfEntryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsGfEntryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsGfEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsGfEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsGfEntryGroupConnection_distinctArgs = {
  field: tsGfEntryFieldsEnum;
};


type tsGfEntryGroupConnection_groupArgs = {
  field: tsGfEntryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsGfEntryGroupConnection_maxArgs = {
  field: tsGfEntryFieldsEnum;
};


type tsGfEntryGroupConnection_minArgs = {
  field: tsGfEntryFieldsEnum;
};


type tsGfEntryGroupConnection_sumArgs = {
  field: tsGfEntryFieldsEnum;
};

type tsGfEntrySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsGfEntryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the GfEntry type and the FormField type */
type tsGfEntryToFormFieldConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsFormField>>>;
};

type tsGfEntryToFormFieldConnectionFilterInput = {
  readonly nodes: InputMaybe<tsFormFieldFilterListInput>;
};

type tsGfFieldChoice = {
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

type tsGfFieldChoiceWithChoices = {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
};

type tsGfFieldChoiceWithColumns = {
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

type tsGfFieldChoiceWithName = {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
};

type tsGfFieldChoiceWithOtherChoice = {
  /** Indicates the radio button item is the “Other” choice. */
  readonly isOtherChoice: Maybe<Scalars['Boolean']>;
};

type tsGfFieldInputProperty = {
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
};

type tsGfFieldInputWithAddress = {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Whether or not this field should be hidden. */
  readonly isHidden: Maybe<Scalars['Boolean']>;
  /** Key used to identify this input. */
  readonly key: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

type tsGfFieldInputWithDateFormat = {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

type tsGfFieldInputWithEmailConfirm = {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

type tsGfFieldInputWithName = {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Whether or not this field should be hidden. */
  readonly isHidden: Maybe<Scalars['Boolean']>;
  /** Key used to identify this input. */
  readonly key: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

type tsGfFieldInputWithPassword = {
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Whether or not this field should be hidden. */
  readonly isHidden: Maybe<Scalars['Boolean']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

type tsGfFieldInputWithSelectAllChoices = {
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
};

type tsGfFieldInputWithTimeFormat = {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

type tsGfFieldWithAddIconUrl = {
  /** The URL of the image to be used for the add row button. */
  readonly addIconUrl: Maybe<Scalars['String']>;
};

type tsGfFieldWithAddress = {
  /** Determines the type of address to be displayed. */
  readonly addressType: Maybe<tsAddressFieldTypeEnum>;
  /** Contains the country that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;INTERATIONAL&quot;. */
  readonly defaultCountry: Maybe<tsAddressFieldCountryEnum>;
  /** Contains the province that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;CANADA&quot;. */
  readonly defaultProvince: Maybe<Scalars['String']>;
  /** Contains the state that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;US&quot;. */
  readonly defaultState: Maybe<Scalars['String']>;
};

type tsGfFieldWithAdminLabel = {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
};

type tsGfFieldWithAutocomplete = {
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithCalculation = {
  /** The formula used for the number field. */
  readonly calculationFormula: Maybe<Scalars['String']>;
  /** Specifies to how many decimal places the number should be rounded. This is available when isCalculation is true, but is not available when the chosen format is “Currency”. */
  readonly calculationRounding: Maybe<Scalars['Int']>;
  /** Indicates whether the number field is a calculation. */
  readonly isCalculation: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithCaptchaBadge = {
  /** The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress. */
  readonly captchaBadgePosition: Maybe<tsCaptchaFieldBadgePositionEnum>;
};

type tsGfFieldWithCaptchaBg = {
  /** Determines the image’s background color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types. */
  readonly simpleCaptchaBackgroundColor: Maybe<Scalars['String']>;
};

type tsGfFieldWithCaptchaFg = {
  /** Determines the image’s font color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types. */
  readonly simpleCaptchaFontColor: Maybe<Scalars['String']>;
};

type tsGfFieldWithCaptchaLanguage = {
  /** The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress. */
  readonly captchaLanguage: Maybe<Scalars['String']>;
};

type tsGfFieldWithCaptchaSize = {
  /** Determines the CAPTCHA image size. Only applicable to simple_captcha and math captcha types. */
  readonly simpleCaptchaSize: Maybe<tsFormFieldSizeEnum>;
};

type tsGfFieldWithCaptchaTheme = {
  /** Determines the theme to be used for the reCAPTCHA field. Only applicable to the recaptcha captcha type. */
  readonly captchaTheme: Maybe<tsCaptchaFieldThemeEnum>;
};

type tsGfFieldWithCaptchaType = {
  /** Determines the type of CAPTCHA field to be used. */
  readonly captchaType: Maybe<tsCaptchaFieldTypeEnum>;
};

type tsGfFieldWithCheckboxLabel = {
  /** Text of the consent checkbox. */
  readonly checkboxLabel: Maybe<Scalars['String']>;
};

type tsGfFieldWithChoices = {
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithColumns = {
  /** Determines if the field should use multiple columns. Default is false. */
  readonly hasColumns: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithConditionalLogic = {
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
};

type tsGfFieldWithContent = {
  /** Content of an HTML block field to be displayed on the form. */
  readonly content: Maybe<Scalars['String']>;
};

type tsGfFieldWithCopyValuesOption = {
  /** The field id of the field being used as the copy source. */
  readonly copyValuesOptionFieldId: Maybe<Scalars['Int']>;
  /** The label that appears next to the copy values option when the form is displayed. The default value is \“Same as previous\”. */
  readonly copyValuesOptionLabel: Maybe<Scalars['String']>;
  /** Indicates whether the copy values option can be used. This option allows users to skip filling out the field and use the same values as another. For example, if the mailing and billing address are the same. */
  readonly shouldCopyValuesOption: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithCssClass = {
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
};

type tsGfFieldWithDateFormat = {
  /** Determines how the date is displayed. */
  readonly dateFormat: Maybe<tsDateFieldFormatEnum>;
};

type tsGfFieldWithDateInputType = {
  /** Determines how the date field displays it’s calendar icon. */
  readonly calendarIconType: Maybe<tsFormFieldCalendarIconTypeEnum>;
  /** Contains the URL to the custom calendar icon. Only applicable when calendarIconType is set to custom. */
  readonly calendarIconUrl: Maybe<Scalars['String']>;
  /** The type of date field to display. */
  readonly dateType: Maybe<tsDateFieldTypeEnum>;
};

type tsGfFieldWithDefaultValue = {
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
};

type tsGfFieldWithDeleteIconUrl = {
  /** The URL of the image to be used for the delete row button. */
  readonly deleteIconUrl: Maybe<Scalars['String']>;
};

type tsGfFieldWithDescription = {
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
};

type tsGfFieldWithDisableMargins = {
  /** Indicates whether the default margins are turned on to align the HTML content with other fields. */
  readonly hasMargins: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithDuplicate = {
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithEmailConfirm = {
  /** Determines whether the Confirm Email field is active. */
  readonly hasEmailConfirmation: Maybe<Scalars['Boolean']>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
};

type tsGfFieldWithEnableEnhancedUI = {
  /** When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields. */
  readonly hasEnhancedUI: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithErrorMessage = {
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
};

type tsGfFieldWithFileExtensions = {
  /** A comma-delimited list of the file extensions which may be uploaded. */
  readonly allowedExtensions: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};

type tsGfFieldWithFileSize = {
  /** The maximum size (in MB) an uploaded file may be . */
  readonly maxFileSize: Maybe<Scalars['Int']>;
};

type tsGfFieldWithInputMask = {
  /** Whether the field has an input mask. */
  readonly hasInputMask: Maybe<Scalars['Boolean']>;
  /** The pattern used for the input mask. */
  readonly inputMaskValue: Maybe<Scalars['String']>;
};

type tsGfFieldWithLabel = {
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
};

type tsGfFieldWithLabelPlacement = {
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
};

type tsGfFieldWithMaxlen = {
  /** Specifies the maximum number of characters allowed in a text or textarea (paragraph) field. */
  readonly maxLength: Maybe<Scalars['Int']>;
};

type tsGfFieldWithMaxrows = {
  /** The maximum number of rows the user can add to the field. */
  readonly maxRows: Maybe<Scalars['Int']>;
};

type tsGfFieldWithMultipleFiles = {
  /** Indicates whether multiple files may be uploaded. */
  readonly canAcceptMultipleFiles: Maybe<Scalars['Boolean']>;
  /** When the field is set to allow multiple files to be uploaded, this property is available to set a limit on how many may be uploaded. */
  readonly maxFiles: Maybe<Scalars['Int']>;
};

type tsGfFieldWithNextButton = {
  /** An array containing the the individual properties for the &quot;Next&quot; button. */
  readonly nextButton: Maybe<tsFormButton>;
};

type tsGfFieldWithNumberFormat = {
  /** Specifies the format allowed for the number field. */
  readonly numberFormat: Maybe<tsNumberFieldFormatEnum>;
};

type tsGfFieldWithOtherChoice = {
  /** Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor. */
  readonly hasOtherChoice: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithPasswordField = {
  /** Determines if a text field input tag should be created with a &quot;password&quot; type. */
  readonly isPasswordInput: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithPasswordStrength = {
  /** Indicates whether the field displays the password strength indicator. */
  readonly hasPasswordStrengthIndicator: Maybe<Scalars['Boolean']>;
  /** Indicates how strong the password should be. */
  readonly minPasswordStrength: Maybe<tsPasswordFieldMinStrengthEnum>;
};

type tsGfFieldWithPasswordVisibility = {
  /** Whether the Password visibility toggle should be enabled for this field. */
  readonly hasPasswordVisibilityToggle: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithPersonalData = {
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
};

type tsGfFieldWithPhoneFormat = {
  /** Determines the allowed format for phones. If the phone value does not conform with the specified format, the field will fail validation. */
  readonly phoneFormat: Maybe<tsPhoneFieldFormatEnum>;
};

type tsGfFieldWithPlaceholder = {
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

type tsGfFieldWithPostCategoryCheckbox = {
  /** Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically. */
  readonly hasAllCategories: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithPostCategoryInitialItem = {
  /** The dropdown placeholder for the field. */
  readonly dropdownPlaceholder: Maybe<Scalars['String']>;
};

type tsGfFieldWithPostCustomField = {
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
};

type tsGfFieldWithPostImage = {
  /** A comma-delimited list of the file extensions which may be uploaded. */
  readonly allowedExtensions: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Controls the visibility of the alt metadata for Post Image fields. */
  readonly hasAlt: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the caption metadata for Post Image fields. */
  readonly hasCaption: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the description metadata for Post Image fields. */
  readonly hasDescription: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the title metadata for Post Image fields. */
  readonly hasTitle: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithPostImageFeaturedImage = {
  /** Whether the image field should be used to set the post&#039;s Featured Image */
  readonly isFeaturedImage: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithPrepopulateField = {
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithPreviousButton = {
  /** An array containing the the individual properties for the &quot;Previous&quot; button. */
  readonly previousButton: Maybe<tsFormButton>;
};

type tsGfFieldWithRange = {
  /** Maximum allowed value for a number field. Values higher than the number specified by this property will cause the field to fail validation. */
  readonly rangeMax: Maybe<Scalars['Float']>;
  /** Minimum allowed value for a number field. Values lower than the number specified by this property will cause the field to fail validation. */
  readonly rangeMin: Maybe<Scalars['Float']>;
};

type tsGfFieldWithRichTextEditor = {
  /** Indicates whether the field uses the rich text editor interface. */
  readonly hasRichTextEditor: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithRules = {
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithSelectAllChoices = {
  /** Whether the \&quot;select all\&quot; choice should be displayed. */
  readonly hasSelectAll: Maybe<Scalars['Boolean']>;
};

type tsGfFieldWithSize = {
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
};

type tsGfFieldWithSubLabelPlacement = {
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
};

type tsGfFieldWithTimeFormat = {
  /** Determines how the time is displayed. */
  readonly timeFormat: Maybe<tsTimeFieldFormatEnum>;
};

/** Gravity Forms form. */
type tsGfForm = Node & tsDatabaseIdentifier & tsNode & {
  readonly children: ReadonlyArray<Node>;
  /** Contains the form confirmation settings such as confirmation text or redirect URL. */
  readonly confirmations: Maybe<ReadonlyArray<Maybe<tsFormConfirmation>>>;
  /** String containing the custom CSS classes to be added to the &lt;form&gt; tag. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** The custom text to use to indicate a field is required. */
  readonly customRequiredIndicator: Maybe<Scalars['String']>;
  /** The unique identifier stored in the database */
  readonly databaseId: Scalars['Int'];
  /** The date and time that the entry was created in local time. */
  readonly dateCreated: Maybe<Scalars['String']>;
  /** The date and time that the entry was created in GMT. */
  readonly dateCreatedGmt: Maybe<Scalars['String']>;
  /** Form description. */
  readonly description: Maybe<Scalars['String']>;
  /** Determines if the field description is displayed above the field input (i.e. immediately after the field label) or below the field input. */
  readonly descriptionPlacement: Maybe<tsFormDescriptionPlacementEnum>;
  /** Connection between the GfForm type and the GfEntry type */
  readonly entries: Maybe<tsGfFormToGfEntryConnection>;
  /** The entry limit settings. */
  readonly entryLimits: Maybe<tsFormEntryLimits>;
  /** CSS class for the first page. */
  readonly firstPageCssClass: Maybe<Scalars['String']>;
  /** Connection between the GfForm type and the FormField type */
  readonly formFields: Maybe<tsGfFormToFormFieldConnection>;
  /** When enabled, conditional logic hide/show operation will be performed with a jQuery slide animation. Only applicable to forms with conditional logic. */
  readonly hasConditionalLogicAnimation: Maybe<Scalars['Boolean']>;
  /** Specifies if the form has the Honeypot spam-protection feature. */
  readonly hasHoneypot: Maybe<Scalars['Boolean']>;
  /** If enabled, will show a summary that lists form validation errors at the top of the form when a user attempts a failed submission. */
  readonly hasValidationSummary: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Determines whether the form is active. */
  readonly isActive: Maybe<Scalars['Boolean']>;
  /** Determines whether the form is in the trash. */
  readonly isTrash: Maybe<Scalars['Boolean']>;
  /** Determines where the field labels should be placed in relation to the field. */
  readonly labelPlacement: Maybe<tsFormLabelPlacementEnum>;
  /** Login requirements data. */
  readonly login: Maybe<tsFormLogin>;
  /** The Gravity Forms markup version. */
  readonly markupVersion: Maybe<Scalars['Int']>;
  /** The ID to assign to the next field that is added to the form. */
  readonly nextFieldId: Maybe<Scalars['Int']>;
  readonly nodeType: Maybe<Scalars['String']>;
  /** The properties for all the email notifications which exist for a form. */
  readonly notifications: Maybe<ReadonlyArray<Maybe<tsFormNotification>>>;
  /** Pagination data. */
  readonly pagination: Maybe<tsFormPagination>;
  readonly parent: Maybe<Node>;
  /** Personal data settings. */
  readonly personalData: Maybe<tsFormPersonalData>;
  /** Post creation data. */
  readonly postCreation: Maybe<tsFormPostCreation>;
  /** Type of indicator to use when field is required. */
  readonly requiredIndicator: Maybe<tsFormFieldRequiredIndicatorEnum>;
  /** \&quot;Save and Continue\&quot; data. */
  readonly saveAndContinue: Maybe<tsFormSaveAndContinue>;
  /** Form scheduling data. */
  readonly scheduling: Maybe<tsFormSchedule>;
  /** How sub-labels are aligned. */
  readonly subLabelPlacement: Maybe<tsFormSubLabelPlacementEnum>;
  /** Contains the form button settings such as the button text or image button source. */
  readonly submitButton: Maybe<tsFormSubmitButton>;
  /** Form title. */
  readonly title: Maybe<Scalars['String']>;
  /** The version of Gravity Forms used to create this form. */
  readonly version: Maybe<Scalars['String']>;
};

type tsGfFormConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsGfFormEdge>;
  readonly group: ReadonlyArray<tsGfFormGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsGfForm>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsGfFormConnection_distinctArgs = {
  field: tsGfFormFieldsEnum;
};


type tsGfFormConnection_groupArgs = {
  field: tsGfFormFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsGfFormConnection_maxArgs = {
  field: tsGfFormFieldsEnum;
};


type tsGfFormConnection_minArgs = {
  field: tsGfFormFieldsEnum;
};


type tsGfFormConnection_sumArgs = {
  field: tsGfFormFieldsEnum;
};

type tsGfFormEdge = {
  readonly next: Maybe<tsGfForm>;
  readonly node: tsGfForm;
  readonly previous: Maybe<tsGfForm>;
};

type tsGfFormFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'confirmations'
  | 'confirmations.conditionalLogic.actionType'
  | 'confirmations.conditionalLogic.logicType'
  | 'confirmations.conditionalLogic.rules'
  | 'confirmations.conditionalLogic.rules.fieldId'
  | 'confirmations.conditionalLogic.rules.operator'
  | 'confirmations.conditionalLogic.rules.value'
  | 'confirmations.id'
  | 'confirmations.isActive'
  | 'confirmations.isAutoformatted'
  | 'confirmations.isDefault'
  | 'confirmations.message'
  | 'confirmations.name'
  | 'confirmations.pageId'
  | 'confirmations.page.node.authorDatabaseId'
  | 'confirmations.page.node.authorId'
  | 'confirmations.page.node.children'
  | 'confirmations.page.node.commentCount'
  | 'confirmations.page.node.commentStatus'
  | 'confirmations.page.node.content'
  | 'confirmations.page.node.contentTypeName'
  | 'confirmations.page.node.databaseId'
  | 'confirmations.page.node.date'
  | 'confirmations.page.node.dateGmt'
  | 'confirmations.page.node.desiredSlug'
  | 'confirmations.page.node.enclosure'
  | 'confirmations.page.node.featuredImageDatabaseId'
  | 'confirmations.page.node.featuredImageId'
  | 'confirmations.page.node.guid'
  | 'confirmations.page.node.id'
  | 'confirmations.page.node.isContentNode'
  | 'confirmations.page.node.isFrontPage'
  | 'confirmations.page.node.isPostsPage'
  | 'confirmations.page.node.isPrivacyPage'
  | 'confirmations.page.node.isRevision'
  | 'confirmations.page.node.isTermNode'
  | 'confirmations.page.node.link'
  | 'confirmations.page.node.menuOrder'
  | 'confirmations.page.node.modified'
  | 'confirmations.page.node.modifiedGmt'
  | 'confirmations.page.node.nodeType'
  | 'confirmations.page.node.parentDatabaseId'
  | 'confirmations.page.node.parentId'
  | 'confirmations.page.node.slug'
  | 'confirmations.page.node.status'
  | 'confirmations.page.node.title'
  | 'confirmations.page.node.uri'
  | 'confirmations.queryString'
  | 'confirmations.type'
  | 'confirmations.url'
  | 'cssClass'
  | 'customRequiredIndicator'
  | 'databaseId'
  | 'dateCreated'
  | 'dateCreatedGmt'
  | 'description'
  | 'descriptionPlacement'
  | 'entries.count'
  | 'entries.nodes'
  | 'entries.nodes.children'
  | 'entries.nodes.children.children'
  | 'entries.nodes.children.id'
  | 'entries.nodes.createdByDatabaseId'
  | 'entries.nodes.createdById'
  | 'entries.nodes.createdBy.capKey'
  | 'entries.nodes.createdBy.capabilities'
  | 'entries.nodes.createdBy.children'
  | 'entries.nodes.createdBy.databaseId'
  | 'entries.nodes.createdBy.description'
  | 'entries.nodes.createdBy.email'
  | 'entries.nodes.createdBy.extraCapabilities'
  | 'entries.nodes.createdBy.firstName'
  | 'entries.nodes.createdBy.id'
  | 'entries.nodes.createdBy.isContentNode'
  | 'entries.nodes.createdBy.isTermNode'
  | 'entries.nodes.createdBy.lastName'
  | 'entries.nodes.createdBy.locale'
  | 'entries.nodes.createdBy.name'
  | 'entries.nodes.createdBy.nicename'
  | 'entries.nodes.createdBy.nickname'
  | 'entries.nodes.createdBy.nodeType'
  | 'entries.nodes.createdBy.registeredDate'
  | 'entries.nodes.createdBy.slug'
  | 'entries.nodes.createdBy.uri'
  | 'entries.nodes.createdBy.url'
  | 'entries.nodes.createdBy.username'
  | 'entries.nodes.dateCreated'
  | 'entries.nodes.dateCreatedGmt'
  | 'entries.nodes.dateUpdated'
  | 'entries.nodes.dateUpdatedGmt'
  | 'entries.nodes.formDatabaseId'
  | 'entries.nodes.formFields.nodes'
  | 'entries.nodes.formId'
  | 'entries.nodes.form.children'
  | 'entries.nodes.form.confirmations'
  | 'entries.nodes.form.cssClass'
  | 'entries.nodes.form.customRequiredIndicator'
  | 'entries.nodes.form.databaseId'
  | 'entries.nodes.form.dateCreated'
  | 'entries.nodes.form.dateCreatedGmt'
  | 'entries.nodes.form.description'
  | 'entries.nodes.form.descriptionPlacement'
  | 'entries.nodes.form.firstPageCssClass'
  | 'entries.nodes.form.hasConditionalLogicAnimation'
  | 'entries.nodes.form.hasHoneypot'
  | 'entries.nodes.form.hasValidationSummary'
  | 'entries.nodes.form.id'
  | 'entries.nodes.form.isActive'
  | 'entries.nodes.form.isTrash'
  | 'entries.nodes.form.labelPlacement'
  | 'entries.nodes.form.markupVersion'
  | 'entries.nodes.form.nextFieldId'
  | 'entries.nodes.form.nodeType'
  | 'entries.nodes.form.notifications'
  | 'entries.nodes.form.requiredIndicator'
  | 'entries.nodes.form.subLabelPlacement'
  | 'entries.nodes.form.title'
  | 'entries.nodes.form.version'
  | 'entries.nodes.id'
  | 'entries.nodes.internal.content'
  | 'entries.nodes.internal.contentDigest'
  | 'entries.nodes.internal.contentFilePath'
  | 'entries.nodes.internal.description'
  | 'entries.nodes.internal.fieldOwners'
  | 'entries.nodes.internal.ignoreType'
  | 'entries.nodes.internal.mediaType'
  | 'entries.nodes.internal.owner'
  | 'entries.nodes.internal.type'
  | 'entries.nodes.ip'
  | 'entries.nodes.isDraft'
  | 'entries.nodes.isSubmitted'
  | 'entries.nodes.nodeType'
  | 'entries.nodes.parent.children'
  | 'entries.nodes.parent.id'
  | 'entries.nodes.sourceUrl'
  | 'entries.nodes.userAgent'
  | 'entryLimits.hasLimit'
  | 'entryLimits.limitReachedMessage'
  | 'entryLimits.limitationPeriod'
  | 'entryLimits.maxEntries'
  | 'firstPageCssClass'
  | 'formFields.nodes'
  | 'formFields.nodes.displayOnly'
  | 'formFields.nodes.id'
  | 'formFields.nodes.inputType'
  | 'formFields.nodes.layoutGridColumnSpan'
  | 'formFields.nodes.layoutSpacerGridColumnSpan'
  | 'formFields.nodes.pageNumber'
  | 'formFields.nodes.type'
  | 'formFields.nodes.visibility'
  | 'hasConditionalLogicAnimation'
  | 'hasHoneypot'
  | 'hasValidationSummary'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isActive'
  | 'isTrash'
  | 'labelPlacement'
  | 'login.isLoginRequired'
  | 'login.loginRequiredMessage'
  | 'markupVersion'
  | 'nextFieldId'
  | 'nodeType'
  | 'notifications'
  | 'notifications.bcc'
  | 'notifications.conditionalLogic.actionType'
  | 'notifications.conditionalLogic.logicType'
  | 'notifications.conditionalLogic.rules'
  | 'notifications.conditionalLogic.rules.fieldId'
  | 'notifications.conditionalLogic.rules.operator'
  | 'notifications.conditionalLogic.rules.value'
  | 'notifications.event'
  | 'notifications.from'
  | 'notifications.fromName'
  | 'notifications.id'
  | 'notifications.isActive'
  | 'notifications.isAutoformatted'
  | 'notifications.message'
  | 'notifications.name'
  | 'notifications.replyTo'
  | 'notifications.routing'
  | 'notifications.routing.email'
  | 'notifications.routing.fieldId'
  | 'notifications.routing.operator'
  | 'notifications.routing.value'
  | 'notifications.service'
  | 'notifications.shouldSendAttachments'
  | 'notifications.subject'
  | 'notifications.to'
  | 'notifications.toType'
  | 'pagination.backgroundColor'
  | 'pagination.color'
  | 'pagination.hasProgressbarOnConfirmation'
  | 'pagination.lastPageButton.imageUrl'
  | 'pagination.lastPageButton.text'
  | 'pagination.lastPageButton.type'
  | 'pagination.pageNames'
  | 'pagination.progressbarCompletionText'
  | 'pagination.style'
  | 'pagination.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'personalData.dataPolicies.canExportAndErase'
  | 'personalData.dataPolicies.entryData'
  | 'personalData.dataPolicies.entryData.key'
  | 'personalData.dataPolicies.entryData.shouldErase'
  | 'personalData.dataPolicies.entryData.shouldExport'
  | 'personalData.dataPolicies.identificationFieldDatabaseId'
  | 'personalData.daysToRetain'
  | 'personalData.retentionPolicy'
  | 'personalData.shouldSaveIP'
  | 'postCreation.authorDatabaseId'
  | 'postCreation.authorId'
  | 'postCreation.author.authorProfile.fieldGroupName'
  | 'postCreation.author.avatar.default'
  | 'postCreation.author.avatar.extraAttr'
  | 'postCreation.author.avatar.forceDefault'
  | 'postCreation.author.avatar.foundAvatar'
  | 'postCreation.author.avatar.height'
  | 'postCreation.author.avatar.rating'
  | 'postCreation.author.avatar.scheme'
  | 'postCreation.author.avatar.size'
  | 'postCreation.author.avatar.url'
  | 'postCreation.author.avatar.width'
  | 'postCreation.author.capKey'
  | 'postCreation.author.capabilities'
  | 'postCreation.author.children'
  | 'postCreation.author.children.children'
  | 'postCreation.author.children.id'
  | 'postCreation.author.comments.nodes'
  | 'postCreation.author.databaseId'
  | 'postCreation.author.description'
  | 'postCreation.author.email'
  | 'postCreation.author.extraCapabilities'
  | 'postCreation.author.firstName'
  | 'postCreation.author.id'
  | 'postCreation.author.internal.content'
  | 'postCreation.author.internal.contentDigest'
  | 'postCreation.author.internal.contentFilePath'
  | 'postCreation.author.internal.description'
  | 'postCreation.author.internal.fieldOwners'
  | 'postCreation.author.internal.ignoreType'
  | 'postCreation.author.internal.mediaType'
  | 'postCreation.author.internal.owner'
  | 'postCreation.author.internal.type'
  | 'postCreation.author.isContentNode'
  | 'postCreation.author.isTermNode'
  | 'postCreation.author.lastName'
  | 'postCreation.author.locale'
  | 'postCreation.author.name'
  | 'postCreation.author.nicename'
  | 'postCreation.author.nickname'
  | 'postCreation.author.nodeType'
  | 'postCreation.author.pages.nodes'
  | 'postCreation.author.parent.children'
  | 'postCreation.author.parent.id'
  | 'postCreation.author.posts.nodes'
  | 'postCreation.author.registeredDate'
  | 'postCreation.author.roles.nodes'
  | 'postCreation.author.seo.breadcrumbTitle'
  | 'postCreation.author.seo.canonical'
  | 'postCreation.author.seo.fullHead'
  | 'postCreation.author.seo.language'
  | 'postCreation.author.seo.metaDesc'
  | 'postCreation.author.seo.metaRobotsNofollow'
  | 'postCreation.author.seo.metaRobotsNoindex'
  | 'postCreation.author.seo.opengraphDescription'
  | 'postCreation.author.seo.opengraphTitle'
  | 'postCreation.author.seo.region'
  | 'postCreation.author.seo.title'
  | 'postCreation.author.seo.twitterDescription'
  | 'postCreation.author.seo.twitterTitle'
  | 'postCreation.author.slug'
  | 'postCreation.author.uri'
  | 'postCreation.author.url'
  | 'postCreation.author.username'
  | 'postCreation.categoryDatabaseId'
  | 'postCreation.contentTemplate'
  | 'postCreation.format'
  | 'postCreation.hasContentTemplate'
  | 'postCreation.hasTitleTemplate'
  | 'postCreation.shouldUseCurrentUserAsAuthor'
  | 'postCreation.status'
  | 'postCreation.titleTemplate'
  | 'requiredIndicator'
  | 'saveAndContinue.buttonText'
  | 'saveAndContinue.hasSaveAndContinue'
  | 'scheduling.closedMessage'
  | 'scheduling.endDetails.amPm'
  | 'scheduling.endDetails.date'
  | 'scheduling.endDetails.dateGmt'
  | 'scheduling.endDetails.hour'
  | 'scheduling.endDetails.minute'
  | 'scheduling.hasSchedule'
  | 'scheduling.pendingMessage'
  | 'scheduling.startDetails.amPm'
  | 'scheduling.startDetails.date'
  | 'scheduling.startDetails.dateGmt'
  | 'scheduling.startDetails.hour'
  | 'scheduling.startDetails.minute'
  | 'subLabelPlacement'
  | 'submitButton.conditionalLogic.actionType'
  | 'submitButton.conditionalLogic.logicType'
  | 'submitButton.conditionalLogic.rules'
  | 'submitButton.conditionalLogic.rules.fieldId'
  | 'submitButton.conditionalLogic.rules.operator'
  | 'submitButton.conditionalLogic.rules.value'
  | 'submitButton.imageUrl'
  | 'submitButton.layoutGridColumnSpan'
  | 'submitButton.location'
  | 'submitButton.text'
  | 'submitButton.type'
  | 'submitButton.width'
  | 'title'
  | 'version';

type tsGfFormFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly confirmations: InputMaybe<tsFormConfirmationFilterListInput>;
  readonly cssClass: InputMaybe<StringQueryOperatorInput>;
  readonly customRequiredIndicator: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly dateCreated: InputMaybe<StringQueryOperatorInput>;
  readonly dateCreatedGmt: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly descriptionPlacement: InputMaybe<tsFormDescriptionPlacementEnumQueryOperatorInput>;
  readonly entries: InputMaybe<tsGfFormToGfEntryConnectionFilterInput>;
  readonly entryLimits: InputMaybe<tsFormEntryLimitsFilterInput>;
  readonly firstPageCssClass: InputMaybe<StringQueryOperatorInput>;
  readonly formFields: InputMaybe<tsGfFormToFormFieldConnectionFilterInput>;
  readonly hasConditionalLogicAnimation: InputMaybe<BooleanQueryOperatorInput>;
  readonly hasHoneypot: InputMaybe<BooleanQueryOperatorInput>;
  readonly hasValidationSummary: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isActive: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTrash: InputMaybe<BooleanQueryOperatorInput>;
  readonly labelPlacement: InputMaybe<tsFormLabelPlacementEnumQueryOperatorInput>;
  readonly login: InputMaybe<tsFormLoginFilterInput>;
  readonly markupVersion: InputMaybe<IntQueryOperatorInput>;
  readonly nextFieldId: InputMaybe<IntQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly notifications: InputMaybe<tsFormNotificationFilterListInput>;
  readonly pagination: InputMaybe<tsFormPaginationFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly personalData: InputMaybe<tsFormPersonalDataFilterInput>;
  readonly postCreation: InputMaybe<tsFormPostCreationFilterInput>;
  readonly requiredIndicator: InputMaybe<tsFormFieldRequiredIndicatorEnumQueryOperatorInput>;
  readonly saveAndContinue: InputMaybe<tsFormSaveAndContinueFilterInput>;
  readonly scheduling: InputMaybe<tsFormScheduleFilterInput>;
  readonly subLabelPlacement: InputMaybe<tsFormSubLabelPlacementEnumQueryOperatorInput>;
  readonly submitButton: InputMaybe<tsFormSubmitButtonFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type tsGfFormGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsGfFormEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsGfFormGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsGfForm>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsGfFormGroupConnection_distinctArgs = {
  field: tsGfFormFieldsEnum;
};


type tsGfFormGroupConnection_groupArgs = {
  field: tsGfFormFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsGfFormGroupConnection_maxArgs = {
  field: tsGfFormFieldsEnum;
};


type tsGfFormGroupConnection_minArgs = {
  field: tsGfFormFieldsEnum;
};


type tsGfFormGroupConnection_sumArgs = {
  field: tsGfFormFieldsEnum;
};

type tsGfFormSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsGfFormFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the GfForm type and the FormField type */
type tsGfFormToFormFieldConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsFormField>>>;
};

type tsGfFormToFormFieldConnectionFilterInput = {
  readonly nodes: InputMaybe<tsFormFieldFilterListInput>;
};

/** Connection between the GfForm type and the GfEntry type */
type tsGfFormToGfEntryConnection = {
  /** The number of (filtered) entries submitted to the form. */
  readonly count: Maybe<Scalars['Int']>;
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsGfEntry>>>;
};

type tsGfFormToGfEntryConnectionFilterInput = {
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly nodes: InputMaybe<tsGfEntryFilterListInput>;
};

/** Gravity Forms Logging Settings. */
type tsGfLogger = {
  /** Whether the logger is enabled. */
  readonly isEnabled: Maybe<Scalars['Boolean']>;
  /** The name of the Gravity Forms logger. */
  readonly name: Maybe<Scalars['String']>;
};

type tsGfLoggerFilterInput = {
  readonly isEnabled: InputMaybe<BooleanQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type tsGfLoggerFilterListInput = {
  readonly elemMatch: InputMaybe<tsGfLoggerFilterInput>;
};

/** Gravity Forms Settings. */
type tsGfSettings = {
  /** The default currency for your forms. Used for product, credit card, and other fields. */
  readonly currency: Maybe<tsGfCurrencyEnum>;
  /** Whether Gravity Forms to download and install bug fixes and security updates automatically in the background. Requires a valid license key. */
  readonly hasBackgroundUpdates: Maybe<Scalars['Boolean']>;
  /** Whether to output Gravity Forms&#039; default CSS. */
  readonly hasDefaultCss: Maybe<Scalars['Boolean']>;
  /** Whether to display the forms menu in the WordPress top toolbar. The forms menu will display the ten forms recently opened in the form editor. */
  readonly hasToolbar: Maybe<Scalars['Boolean']>;
  /** Whether the server-generated form markup uses HTML5. */
  readonly isHtml5Enabled: Maybe<Scalars['Boolean']>;
  /** Enable to prevent extraneous scripts and styles from being printed on a Gravity Forms admin pages, reducing conflicts with other plugins and themes. */
  readonly isNoConflictModeEnabled: Maybe<Scalars['Boolean']>;
  /** Logging settings. */
  readonly logging: Maybe<tsGfSettingsLogging>;
  /** Recaptcha settings. */
  readonly recaptcha: Maybe<tsGfSettingsRecaptcha>;
};

type tsGfSettingsFilterInput = {
  readonly currency: InputMaybe<tsGfCurrencyEnumQueryOperatorInput>;
  readonly hasBackgroundUpdates: InputMaybe<BooleanQueryOperatorInput>;
  readonly hasDefaultCss: InputMaybe<BooleanQueryOperatorInput>;
  readonly hasToolbar: InputMaybe<BooleanQueryOperatorInput>;
  readonly isHtml5Enabled: InputMaybe<BooleanQueryOperatorInput>;
  readonly isNoConflictModeEnabled: InputMaybe<BooleanQueryOperatorInput>;
  readonly logging: InputMaybe<tsGfSettingsLoggingFilterInput>;
  readonly recaptcha: InputMaybe<tsGfSettingsRecaptchaFilterInput>;
};

/** Gravity Forms Logging Settings. */
type tsGfSettingsLogging = {
  /** Whether Gravity Forms internal logging is enabled. Logging allows you to easily debug the inner workings of Gravity Forms to solve any possible issues. */
  readonly isLoggingEnabled: Maybe<Scalars['Boolean']>;
  /** A list of registered Gravity Forms loggers and their configurations. */
  readonly loggers: Maybe<ReadonlyArray<Maybe<tsGfLogger>>>;
};

type tsGfSettingsLoggingFilterInput = {
  readonly isLoggingEnabled: InputMaybe<BooleanQueryOperatorInput>;
  readonly loggers: InputMaybe<tsGfLoggerFilterListInput>;
};

/** Gravity Forms reCAPTCHA Settings. */
type tsGfSettingsRecaptcha = {
  /** The public reCAPTCHA site key. */
  readonly publicKey: Maybe<Scalars['String']>;
  /** The type of of reCAPTCHA v2 to be used */
  readonly type: Maybe<tsRecaptchaTypeEnum>;
};

type tsGfSettingsRecaptchaFilterInput = {
  readonly publicKey: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<tsRecaptchaTypeEnumQueryOperatorInput>;
};

/** A Gravity Forms submitted entry. */
type tsGfSubmittedEntry = Node & tsDatabaseIdentifier & tsGfEntry & tsNode & tsNodeWithForm & {
  readonly children: ReadonlyArray<Node>;
  /** The user who created the entry. */
  readonly createdBy: Maybe<tsUser>;
  /** Database ID of the user that submitted of the form if a logged in user submitted the form. */
  readonly createdByDatabaseId: Maybe<Scalars['Int']>;
  /** Global ID of the user that submitted of the form if a logged in user submitted the form. */
  readonly createdById: Maybe<Scalars['ID']>;
  /** The unique identifier stored in the database */
  readonly databaseId: Scalars['Int'];
  /** The date and time that the entry was created in local time. */
  readonly dateCreated: Maybe<Scalars['String']>;
  /** The date and time that the entry was created in GMT. */
  readonly dateCreatedGmt: Maybe<Scalars['String']>;
  /** The date and time that the entry was created in local time. */
  readonly dateUpdated: Maybe<Scalars['String']>;
  /** The date and time that the entry was updated in GMT. */
  readonly dateUpdatedGmt: Maybe<Scalars['String']>;
  /** The form object of the node. */
  readonly form: Maybe<tsGfForm>;
  /** The database identifier of the form of the node. */
  readonly formDatabaseId: Maybe<Scalars['Int']>;
  /** Connection between the GfEntry type and the FormField type */
  readonly formFields: Maybe<tsGfEntryToFormFieldConnection>;
  /** The globally unique identifier of the form of the node. */
  readonly formId: Maybe<Scalars['ID']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Client IP of user who submitted the form. */
  readonly ip: Maybe<Scalars['String']>;
  /** Whether the entry is a draft. */
  readonly isDraft: Maybe<Scalars['Boolean']>;
  /** Whether the entry has been read. */
  readonly isRead: Maybe<Scalars['Boolean']>;
  /** Indicates if the entry has been starred (i.e marked with a star). */
  readonly isStarred: Maybe<Scalars['Boolean']>;
  /** Whether the entry has been submitted. */
  readonly isSubmitted: Maybe<Scalars['Boolean']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** For forms with Post fields, this is the post object that was created. */
  readonly post: Maybe<tsPost>;
  /** For forms with Post fields, this property contains the Id of the Post that was created. */
  readonly postDatabaseId: Maybe<Scalars['Int']>;
  /** Source URL of page that contained the form when it was submitted. */
  readonly sourceUrl: Maybe<Scalars['String']>;
  /** The current status of the entry. */
  readonly status: Maybe<tsEntryStatusEnum>;
  /** Provides the name and version of both the browser and operating system from which the entry was submitted. */
  readonly userAgent: Maybe<Scalars['String']>;
};

type tsGfSubmittedEntryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsGfSubmittedEntryEdge>;
  readonly group: ReadonlyArray<tsGfSubmittedEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsGfSubmittedEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsGfSubmittedEntryConnection_distinctArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
};


type tsGfSubmittedEntryConnection_groupArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsGfSubmittedEntryConnection_maxArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
};


type tsGfSubmittedEntryConnection_minArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
};


type tsGfSubmittedEntryConnection_sumArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
};

type tsGfSubmittedEntryEdge = {
  readonly next: Maybe<tsGfSubmittedEntry>;
  readonly node: tsGfSubmittedEntry;
  readonly previous: Maybe<tsGfSubmittedEntry>;
};

type tsGfSubmittedEntryFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdByDatabaseId'
  | 'createdById'
  | 'createdBy.authorProfile.fieldGroupName'
  | 'createdBy.authorProfile.profile.altText'
  | 'createdBy.authorProfile.profile.authorDatabaseId'
  | 'createdBy.authorProfile.profile.authorId'
  | 'createdBy.authorProfile.profile.caption'
  | 'createdBy.authorProfile.profile.children'
  | 'createdBy.authorProfile.profile.commentCount'
  | 'createdBy.authorProfile.profile.commentStatus'
  | 'createdBy.authorProfile.profile.contentTypeName'
  | 'createdBy.authorProfile.profile.databaseId'
  | 'createdBy.authorProfile.profile.date'
  | 'createdBy.authorProfile.profile.dateGmt'
  | 'createdBy.authorProfile.profile.description'
  | 'createdBy.authorProfile.profile.desiredSlug'
  | 'createdBy.authorProfile.profile.enclosure'
  | 'createdBy.authorProfile.profile.fileSize'
  | 'createdBy.authorProfile.profile.filename'
  | 'createdBy.authorProfile.profile.filesize'
  | 'createdBy.authorProfile.profile.gatsbyImage'
  | 'createdBy.authorProfile.profile.guid'
  | 'createdBy.authorProfile.profile.height'
  | 'createdBy.authorProfile.profile.id'
  | 'createdBy.authorProfile.profile.isContentNode'
  | 'createdBy.authorProfile.profile.isTermNode'
  | 'createdBy.authorProfile.profile.link'
  | 'createdBy.authorProfile.profile.mediaItemUrl'
  | 'createdBy.authorProfile.profile.mediaType'
  | 'createdBy.authorProfile.profile.mimeType'
  | 'createdBy.authorProfile.profile.modified'
  | 'createdBy.authorProfile.profile.modifiedGmt'
  | 'createdBy.authorProfile.profile.nodeType'
  | 'createdBy.authorProfile.profile.parentDatabaseId'
  | 'createdBy.authorProfile.profile.parentId'
  | 'createdBy.authorProfile.profile.publicUrl'
  | 'createdBy.authorProfile.profile.sizes'
  | 'createdBy.authorProfile.profile.slug'
  | 'createdBy.authorProfile.profile.sourceUrl'
  | 'createdBy.authorProfile.profile.srcSet'
  | 'createdBy.authorProfile.profile.status'
  | 'createdBy.authorProfile.profile.title'
  | 'createdBy.authorProfile.profile.uri'
  | 'createdBy.authorProfile.profile.width'
  | 'createdBy.avatar.default'
  | 'createdBy.avatar.extraAttr'
  | 'createdBy.avatar.forceDefault'
  | 'createdBy.avatar.foundAvatar'
  | 'createdBy.avatar.height'
  | 'createdBy.avatar.rating'
  | 'createdBy.avatar.scheme'
  | 'createdBy.avatar.size'
  | 'createdBy.avatar.url'
  | 'createdBy.avatar.width'
  | 'createdBy.capKey'
  | 'createdBy.capabilities'
  | 'createdBy.children'
  | 'createdBy.children.children'
  | 'createdBy.children.children.children'
  | 'createdBy.children.children.id'
  | 'createdBy.children.id'
  | 'createdBy.children.internal.content'
  | 'createdBy.children.internal.contentDigest'
  | 'createdBy.children.internal.contentFilePath'
  | 'createdBy.children.internal.description'
  | 'createdBy.children.internal.fieldOwners'
  | 'createdBy.children.internal.ignoreType'
  | 'createdBy.children.internal.mediaType'
  | 'createdBy.children.internal.owner'
  | 'createdBy.children.internal.type'
  | 'createdBy.children.parent.children'
  | 'createdBy.children.parent.id'
  | 'createdBy.comments.nodes'
  | 'createdBy.comments.nodes.agent'
  | 'createdBy.comments.nodes.approved'
  | 'createdBy.comments.nodes.authorIp'
  | 'createdBy.comments.nodes.children'
  | 'createdBy.comments.nodes.content'
  | 'createdBy.comments.nodes.databaseId'
  | 'createdBy.comments.nodes.date'
  | 'createdBy.comments.nodes.dateGmt'
  | 'createdBy.comments.nodes.id'
  | 'createdBy.comments.nodes.karma'
  | 'createdBy.comments.nodes.nodeType'
  | 'createdBy.comments.nodes.parentDatabaseId'
  | 'createdBy.comments.nodes.parentId'
  | 'createdBy.comments.nodes.type'
  | 'createdBy.databaseId'
  | 'createdBy.description'
  | 'createdBy.email'
  | 'createdBy.extraCapabilities'
  | 'createdBy.firstName'
  | 'createdBy.id'
  | 'createdBy.internal.content'
  | 'createdBy.internal.contentDigest'
  | 'createdBy.internal.contentFilePath'
  | 'createdBy.internal.description'
  | 'createdBy.internal.fieldOwners'
  | 'createdBy.internal.ignoreType'
  | 'createdBy.internal.mediaType'
  | 'createdBy.internal.owner'
  | 'createdBy.internal.type'
  | 'createdBy.isContentNode'
  | 'createdBy.isTermNode'
  | 'createdBy.lastName'
  | 'createdBy.locale'
  | 'createdBy.name'
  | 'createdBy.nicename'
  | 'createdBy.nickname'
  | 'createdBy.nodeType'
  | 'createdBy.pages.nodes'
  | 'createdBy.pages.nodes.authorDatabaseId'
  | 'createdBy.pages.nodes.authorId'
  | 'createdBy.pages.nodes.children'
  | 'createdBy.pages.nodes.commentCount'
  | 'createdBy.pages.nodes.commentStatus'
  | 'createdBy.pages.nodes.content'
  | 'createdBy.pages.nodes.contentTypeName'
  | 'createdBy.pages.nodes.databaseId'
  | 'createdBy.pages.nodes.date'
  | 'createdBy.pages.nodes.dateGmt'
  | 'createdBy.pages.nodes.desiredSlug'
  | 'createdBy.pages.nodes.enclosure'
  | 'createdBy.pages.nodes.featuredImageDatabaseId'
  | 'createdBy.pages.nodes.featuredImageId'
  | 'createdBy.pages.nodes.guid'
  | 'createdBy.pages.nodes.id'
  | 'createdBy.pages.nodes.isContentNode'
  | 'createdBy.pages.nodes.isFrontPage'
  | 'createdBy.pages.nodes.isPostsPage'
  | 'createdBy.pages.nodes.isPrivacyPage'
  | 'createdBy.pages.nodes.isRevision'
  | 'createdBy.pages.nodes.isTermNode'
  | 'createdBy.pages.nodes.link'
  | 'createdBy.pages.nodes.menuOrder'
  | 'createdBy.pages.nodes.modified'
  | 'createdBy.pages.nodes.modifiedGmt'
  | 'createdBy.pages.nodes.nodeType'
  | 'createdBy.pages.nodes.parentDatabaseId'
  | 'createdBy.pages.nodes.parentId'
  | 'createdBy.pages.nodes.slug'
  | 'createdBy.pages.nodes.status'
  | 'createdBy.pages.nodes.title'
  | 'createdBy.pages.nodes.uri'
  | 'createdBy.parent.children'
  | 'createdBy.parent.children.children'
  | 'createdBy.parent.children.id'
  | 'createdBy.parent.id'
  | 'createdBy.parent.internal.content'
  | 'createdBy.parent.internal.contentDigest'
  | 'createdBy.parent.internal.contentFilePath'
  | 'createdBy.parent.internal.description'
  | 'createdBy.parent.internal.fieldOwners'
  | 'createdBy.parent.internal.ignoreType'
  | 'createdBy.parent.internal.mediaType'
  | 'createdBy.parent.internal.owner'
  | 'createdBy.parent.internal.type'
  | 'createdBy.parent.parent.children'
  | 'createdBy.parent.parent.id'
  | 'createdBy.posts.nodes'
  | 'createdBy.posts.nodes.authorDatabaseId'
  | 'createdBy.posts.nodes.authorId'
  | 'createdBy.posts.nodes.children'
  | 'createdBy.posts.nodes.commentCount'
  | 'createdBy.posts.nodes.commentStatus'
  | 'createdBy.posts.nodes.content'
  | 'createdBy.posts.nodes.contentTypeName'
  | 'createdBy.posts.nodes.databaseId'
  | 'createdBy.posts.nodes.date'
  | 'createdBy.posts.nodes.dateGmt'
  | 'createdBy.posts.nodes.desiredSlug'
  | 'createdBy.posts.nodes.enclosure'
  | 'createdBy.posts.nodes.excerpt'
  | 'createdBy.posts.nodes.featuredImageDatabaseId'
  | 'createdBy.posts.nodes.featuredImageId'
  | 'createdBy.posts.nodes.guid'
  | 'createdBy.posts.nodes.id'
  | 'createdBy.posts.nodes.isContentNode'
  | 'createdBy.posts.nodes.isRevision'
  | 'createdBy.posts.nodes.isSticky'
  | 'createdBy.posts.nodes.isTermNode'
  | 'createdBy.posts.nodes.link'
  | 'createdBy.posts.nodes.modified'
  | 'createdBy.posts.nodes.modifiedGmt'
  | 'createdBy.posts.nodes.nodeType'
  | 'createdBy.posts.nodes.pingStatus'
  | 'createdBy.posts.nodes.pinged'
  | 'createdBy.posts.nodes.slug'
  | 'createdBy.posts.nodes.status'
  | 'createdBy.posts.nodes.title'
  | 'createdBy.posts.nodes.toPing'
  | 'createdBy.posts.nodes.uri'
  | 'createdBy.registeredDate'
  | 'createdBy.roles.nodes'
  | 'createdBy.roles.nodes.capabilities'
  | 'createdBy.roles.nodes.children'
  | 'createdBy.roles.nodes.displayName'
  | 'createdBy.roles.nodes.id'
  | 'createdBy.roles.nodes.name'
  | 'createdBy.roles.nodes.nodeType'
  | 'createdBy.seo.breadcrumbTitle'
  | 'createdBy.seo.canonical'
  | 'createdBy.seo.fullHead'
  | 'createdBy.seo.language'
  | 'createdBy.seo.metaDesc'
  | 'createdBy.seo.metaRobotsNofollow'
  | 'createdBy.seo.metaRobotsNoindex'
  | 'createdBy.seo.opengraphDescription'
  | 'createdBy.seo.opengraphImage.altText'
  | 'createdBy.seo.opengraphImage.authorDatabaseId'
  | 'createdBy.seo.opengraphImage.authorId'
  | 'createdBy.seo.opengraphImage.caption'
  | 'createdBy.seo.opengraphImage.children'
  | 'createdBy.seo.opengraphImage.commentCount'
  | 'createdBy.seo.opengraphImage.commentStatus'
  | 'createdBy.seo.opengraphImage.contentTypeName'
  | 'createdBy.seo.opengraphImage.databaseId'
  | 'createdBy.seo.opengraphImage.date'
  | 'createdBy.seo.opengraphImage.dateGmt'
  | 'createdBy.seo.opengraphImage.description'
  | 'createdBy.seo.opengraphImage.desiredSlug'
  | 'createdBy.seo.opengraphImage.enclosure'
  | 'createdBy.seo.opengraphImage.fileSize'
  | 'createdBy.seo.opengraphImage.filename'
  | 'createdBy.seo.opengraphImage.filesize'
  | 'createdBy.seo.opengraphImage.gatsbyImage'
  | 'createdBy.seo.opengraphImage.guid'
  | 'createdBy.seo.opengraphImage.height'
  | 'createdBy.seo.opengraphImage.id'
  | 'createdBy.seo.opengraphImage.isContentNode'
  | 'createdBy.seo.opengraphImage.isTermNode'
  | 'createdBy.seo.opengraphImage.link'
  | 'createdBy.seo.opengraphImage.mediaItemUrl'
  | 'createdBy.seo.opengraphImage.mediaType'
  | 'createdBy.seo.opengraphImage.mimeType'
  | 'createdBy.seo.opengraphImage.modified'
  | 'createdBy.seo.opengraphImage.modifiedGmt'
  | 'createdBy.seo.opengraphImage.nodeType'
  | 'createdBy.seo.opengraphImage.parentDatabaseId'
  | 'createdBy.seo.opengraphImage.parentId'
  | 'createdBy.seo.opengraphImage.publicUrl'
  | 'createdBy.seo.opengraphImage.sizes'
  | 'createdBy.seo.opengraphImage.slug'
  | 'createdBy.seo.opengraphImage.sourceUrl'
  | 'createdBy.seo.opengraphImage.srcSet'
  | 'createdBy.seo.opengraphImage.status'
  | 'createdBy.seo.opengraphImage.title'
  | 'createdBy.seo.opengraphImage.uri'
  | 'createdBy.seo.opengraphImage.width'
  | 'createdBy.seo.opengraphTitle'
  | 'createdBy.seo.region'
  | 'createdBy.seo.schema.articleType'
  | 'createdBy.seo.schema.pageType'
  | 'createdBy.seo.schema.raw'
  | 'createdBy.seo.social.facebook'
  | 'createdBy.seo.social.instagram'
  | 'createdBy.seo.social.linkedIn'
  | 'createdBy.seo.social.mySpace'
  | 'createdBy.seo.social.pinterest'
  | 'createdBy.seo.social.soundCloud'
  | 'createdBy.seo.social.twitter'
  | 'createdBy.seo.social.wikipedia'
  | 'createdBy.seo.social.youTube'
  | 'createdBy.seo.title'
  | 'createdBy.seo.twitterDescription'
  | 'createdBy.seo.twitterImage.altText'
  | 'createdBy.seo.twitterImage.authorDatabaseId'
  | 'createdBy.seo.twitterImage.authorId'
  | 'createdBy.seo.twitterImage.caption'
  | 'createdBy.seo.twitterImage.children'
  | 'createdBy.seo.twitterImage.commentCount'
  | 'createdBy.seo.twitterImage.commentStatus'
  | 'createdBy.seo.twitterImage.contentTypeName'
  | 'createdBy.seo.twitterImage.databaseId'
  | 'createdBy.seo.twitterImage.date'
  | 'createdBy.seo.twitterImage.dateGmt'
  | 'createdBy.seo.twitterImage.description'
  | 'createdBy.seo.twitterImage.desiredSlug'
  | 'createdBy.seo.twitterImage.enclosure'
  | 'createdBy.seo.twitterImage.fileSize'
  | 'createdBy.seo.twitterImage.filename'
  | 'createdBy.seo.twitterImage.filesize'
  | 'createdBy.seo.twitterImage.gatsbyImage'
  | 'createdBy.seo.twitterImage.guid'
  | 'createdBy.seo.twitterImage.height'
  | 'createdBy.seo.twitterImage.id'
  | 'createdBy.seo.twitterImage.isContentNode'
  | 'createdBy.seo.twitterImage.isTermNode'
  | 'createdBy.seo.twitterImage.link'
  | 'createdBy.seo.twitterImage.mediaItemUrl'
  | 'createdBy.seo.twitterImage.mediaType'
  | 'createdBy.seo.twitterImage.mimeType'
  | 'createdBy.seo.twitterImage.modified'
  | 'createdBy.seo.twitterImage.modifiedGmt'
  | 'createdBy.seo.twitterImage.nodeType'
  | 'createdBy.seo.twitterImage.parentDatabaseId'
  | 'createdBy.seo.twitterImage.parentId'
  | 'createdBy.seo.twitterImage.publicUrl'
  | 'createdBy.seo.twitterImage.sizes'
  | 'createdBy.seo.twitterImage.slug'
  | 'createdBy.seo.twitterImage.sourceUrl'
  | 'createdBy.seo.twitterImage.srcSet'
  | 'createdBy.seo.twitterImage.status'
  | 'createdBy.seo.twitterImage.title'
  | 'createdBy.seo.twitterImage.uri'
  | 'createdBy.seo.twitterImage.width'
  | 'createdBy.seo.twitterTitle'
  | 'createdBy.slug'
  | 'createdBy.uri'
  | 'createdBy.url'
  | 'createdBy.username'
  | 'databaseId'
  | 'dateCreated'
  | 'dateCreatedGmt'
  | 'dateUpdated'
  | 'dateUpdatedGmt'
  | 'formDatabaseId'
  | 'formFields.nodes'
  | 'formFields.nodes.displayOnly'
  | 'formFields.nodes.id'
  | 'formFields.nodes.inputType'
  | 'formFields.nodes.layoutGridColumnSpan'
  | 'formFields.nodes.layoutSpacerGridColumnSpan'
  | 'formFields.nodes.pageNumber'
  | 'formFields.nodes.type'
  | 'formFields.nodes.visibility'
  | 'formId'
  | 'form.children'
  | 'form.children.children'
  | 'form.children.children.children'
  | 'form.children.children.id'
  | 'form.children.id'
  | 'form.children.internal.content'
  | 'form.children.internal.contentDigest'
  | 'form.children.internal.contentFilePath'
  | 'form.children.internal.description'
  | 'form.children.internal.fieldOwners'
  | 'form.children.internal.ignoreType'
  | 'form.children.internal.mediaType'
  | 'form.children.internal.owner'
  | 'form.children.internal.type'
  | 'form.children.parent.children'
  | 'form.children.parent.id'
  | 'form.confirmations'
  | 'form.confirmations.conditionalLogic.actionType'
  | 'form.confirmations.conditionalLogic.logicType'
  | 'form.confirmations.conditionalLogic.rules'
  | 'form.confirmations.id'
  | 'form.confirmations.isActive'
  | 'form.confirmations.isAutoformatted'
  | 'form.confirmations.isDefault'
  | 'form.confirmations.message'
  | 'form.confirmations.name'
  | 'form.confirmations.pageId'
  | 'form.confirmations.queryString'
  | 'form.confirmations.type'
  | 'form.confirmations.url'
  | 'form.cssClass'
  | 'form.customRequiredIndicator'
  | 'form.databaseId'
  | 'form.dateCreated'
  | 'form.dateCreatedGmt'
  | 'form.description'
  | 'form.descriptionPlacement'
  | 'form.entries.count'
  | 'form.entries.nodes'
  | 'form.entries.nodes.children'
  | 'form.entries.nodes.createdByDatabaseId'
  | 'form.entries.nodes.createdById'
  | 'form.entries.nodes.dateCreated'
  | 'form.entries.nodes.dateCreatedGmt'
  | 'form.entries.nodes.dateUpdated'
  | 'form.entries.nodes.dateUpdatedGmt'
  | 'form.entries.nodes.formDatabaseId'
  | 'form.entries.nodes.formId'
  | 'form.entries.nodes.id'
  | 'form.entries.nodes.ip'
  | 'form.entries.nodes.isDraft'
  | 'form.entries.nodes.isSubmitted'
  | 'form.entries.nodes.nodeType'
  | 'form.entries.nodes.sourceUrl'
  | 'form.entries.nodes.userAgent'
  | 'form.entryLimits.hasLimit'
  | 'form.entryLimits.limitReachedMessage'
  | 'form.entryLimits.limitationPeriod'
  | 'form.entryLimits.maxEntries'
  | 'form.firstPageCssClass'
  | 'form.formFields.nodes'
  | 'form.formFields.nodes.displayOnly'
  | 'form.formFields.nodes.id'
  | 'form.formFields.nodes.inputType'
  | 'form.formFields.nodes.layoutGridColumnSpan'
  | 'form.formFields.nodes.layoutSpacerGridColumnSpan'
  | 'form.formFields.nodes.pageNumber'
  | 'form.formFields.nodes.type'
  | 'form.formFields.nodes.visibility'
  | 'form.hasConditionalLogicAnimation'
  | 'form.hasHoneypot'
  | 'form.hasValidationSummary'
  | 'form.id'
  | 'form.internal.content'
  | 'form.internal.contentDigest'
  | 'form.internal.contentFilePath'
  | 'form.internal.description'
  | 'form.internal.fieldOwners'
  | 'form.internal.ignoreType'
  | 'form.internal.mediaType'
  | 'form.internal.owner'
  | 'form.internal.type'
  | 'form.isActive'
  | 'form.isTrash'
  | 'form.labelPlacement'
  | 'form.login.isLoginRequired'
  | 'form.login.loginRequiredMessage'
  | 'form.markupVersion'
  | 'form.nextFieldId'
  | 'form.nodeType'
  | 'form.notifications'
  | 'form.notifications.bcc'
  | 'form.notifications.conditionalLogic.actionType'
  | 'form.notifications.conditionalLogic.logicType'
  | 'form.notifications.conditionalLogic.rules'
  | 'form.notifications.event'
  | 'form.notifications.from'
  | 'form.notifications.fromName'
  | 'form.notifications.id'
  | 'form.notifications.isActive'
  | 'form.notifications.isAutoformatted'
  | 'form.notifications.message'
  | 'form.notifications.name'
  | 'form.notifications.replyTo'
  | 'form.notifications.routing'
  | 'form.notifications.routing.email'
  | 'form.notifications.routing.fieldId'
  | 'form.notifications.routing.operator'
  | 'form.notifications.routing.value'
  | 'form.notifications.service'
  | 'form.notifications.shouldSendAttachments'
  | 'form.notifications.subject'
  | 'form.notifications.to'
  | 'form.notifications.toType'
  | 'form.pagination.backgroundColor'
  | 'form.pagination.color'
  | 'form.pagination.hasProgressbarOnConfirmation'
  | 'form.pagination.lastPageButton.imageUrl'
  | 'form.pagination.lastPageButton.text'
  | 'form.pagination.lastPageButton.type'
  | 'form.pagination.pageNames'
  | 'form.pagination.progressbarCompletionText'
  | 'form.pagination.style'
  | 'form.pagination.type'
  | 'form.parent.children'
  | 'form.parent.children.children'
  | 'form.parent.children.id'
  | 'form.parent.id'
  | 'form.parent.internal.content'
  | 'form.parent.internal.contentDigest'
  | 'form.parent.internal.contentFilePath'
  | 'form.parent.internal.description'
  | 'form.parent.internal.fieldOwners'
  | 'form.parent.internal.ignoreType'
  | 'form.parent.internal.mediaType'
  | 'form.parent.internal.owner'
  | 'form.parent.internal.type'
  | 'form.parent.parent.children'
  | 'form.parent.parent.id'
  | 'form.personalData.dataPolicies.canExportAndErase'
  | 'form.personalData.dataPolicies.entryData'
  | 'form.personalData.dataPolicies.identificationFieldDatabaseId'
  | 'form.personalData.daysToRetain'
  | 'form.personalData.retentionPolicy'
  | 'form.personalData.shouldSaveIP'
  | 'form.postCreation.authorDatabaseId'
  | 'form.postCreation.authorId'
  | 'form.postCreation.author.capKey'
  | 'form.postCreation.author.capabilities'
  | 'form.postCreation.author.children'
  | 'form.postCreation.author.databaseId'
  | 'form.postCreation.author.description'
  | 'form.postCreation.author.email'
  | 'form.postCreation.author.extraCapabilities'
  | 'form.postCreation.author.firstName'
  | 'form.postCreation.author.id'
  | 'form.postCreation.author.isContentNode'
  | 'form.postCreation.author.isTermNode'
  | 'form.postCreation.author.lastName'
  | 'form.postCreation.author.locale'
  | 'form.postCreation.author.name'
  | 'form.postCreation.author.nicename'
  | 'form.postCreation.author.nickname'
  | 'form.postCreation.author.nodeType'
  | 'form.postCreation.author.registeredDate'
  | 'form.postCreation.author.slug'
  | 'form.postCreation.author.uri'
  | 'form.postCreation.author.url'
  | 'form.postCreation.author.username'
  | 'form.postCreation.categoryDatabaseId'
  | 'form.postCreation.contentTemplate'
  | 'form.postCreation.format'
  | 'form.postCreation.hasContentTemplate'
  | 'form.postCreation.hasTitleTemplate'
  | 'form.postCreation.shouldUseCurrentUserAsAuthor'
  | 'form.postCreation.status'
  | 'form.postCreation.titleTemplate'
  | 'form.requiredIndicator'
  | 'form.saveAndContinue.buttonText'
  | 'form.saveAndContinue.hasSaveAndContinue'
  | 'form.scheduling.closedMessage'
  | 'form.scheduling.endDetails.amPm'
  | 'form.scheduling.endDetails.date'
  | 'form.scheduling.endDetails.dateGmt'
  | 'form.scheduling.endDetails.hour'
  | 'form.scheduling.endDetails.minute'
  | 'form.scheduling.hasSchedule'
  | 'form.scheduling.pendingMessage'
  | 'form.scheduling.startDetails.amPm'
  | 'form.scheduling.startDetails.date'
  | 'form.scheduling.startDetails.dateGmt'
  | 'form.scheduling.startDetails.hour'
  | 'form.scheduling.startDetails.minute'
  | 'form.subLabelPlacement'
  | 'form.submitButton.conditionalLogic.actionType'
  | 'form.submitButton.conditionalLogic.logicType'
  | 'form.submitButton.conditionalLogic.rules'
  | 'form.submitButton.imageUrl'
  | 'form.submitButton.layoutGridColumnSpan'
  | 'form.submitButton.location'
  | 'form.submitButton.text'
  | 'form.submitButton.type'
  | 'form.submitButton.width'
  | 'form.title'
  | 'form.version'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'ip'
  | 'isDraft'
  | 'isRead'
  | 'isStarred'
  | 'isSubmitted'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'postDatabaseId'
  | 'post.authorDatabaseId'
  | 'post.authorId'
  | 'post.author.node.capKey'
  | 'post.author.node.capabilities'
  | 'post.author.node.children'
  | 'post.author.node.databaseId'
  | 'post.author.node.description'
  | 'post.author.node.email'
  | 'post.author.node.extraCapabilities'
  | 'post.author.node.firstName'
  | 'post.author.node.id'
  | 'post.author.node.isContentNode'
  | 'post.author.node.isTermNode'
  | 'post.author.node.lastName'
  | 'post.author.node.locale'
  | 'post.author.node.name'
  | 'post.author.node.nicename'
  | 'post.author.node.nickname'
  | 'post.author.node.nodeType'
  | 'post.author.node.registeredDate'
  | 'post.author.node.slug'
  | 'post.author.node.uri'
  | 'post.author.node.url'
  | 'post.author.node.username'
  | 'post.caseStudy.appGallery'
  | 'post.caseStudy.appGallery.altText'
  | 'post.caseStudy.appGallery.authorDatabaseId'
  | 'post.caseStudy.appGallery.authorId'
  | 'post.caseStudy.appGallery.caption'
  | 'post.caseStudy.appGallery.children'
  | 'post.caseStudy.appGallery.commentCount'
  | 'post.caseStudy.appGallery.commentStatus'
  | 'post.caseStudy.appGallery.contentTypeName'
  | 'post.caseStudy.appGallery.databaseId'
  | 'post.caseStudy.appGallery.date'
  | 'post.caseStudy.appGallery.dateGmt'
  | 'post.caseStudy.appGallery.description'
  | 'post.caseStudy.appGallery.desiredSlug'
  | 'post.caseStudy.appGallery.enclosure'
  | 'post.caseStudy.appGallery.fileSize'
  | 'post.caseStudy.appGallery.filename'
  | 'post.caseStudy.appGallery.filesize'
  | 'post.caseStudy.appGallery.gatsbyImage'
  | 'post.caseStudy.appGallery.guid'
  | 'post.caseStudy.appGallery.height'
  | 'post.caseStudy.appGallery.id'
  | 'post.caseStudy.appGallery.isContentNode'
  | 'post.caseStudy.appGallery.isTermNode'
  | 'post.caseStudy.appGallery.link'
  | 'post.caseStudy.appGallery.mediaItemUrl'
  | 'post.caseStudy.appGallery.mediaType'
  | 'post.caseStudy.appGallery.mimeType'
  | 'post.caseStudy.appGallery.modified'
  | 'post.caseStudy.appGallery.modifiedGmt'
  | 'post.caseStudy.appGallery.nodeType'
  | 'post.caseStudy.appGallery.parentDatabaseId'
  | 'post.caseStudy.appGallery.parentId'
  | 'post.caseStudy.appGallery.publicUrl'
  | 'post.caseStudy.appGallery.sizes'
  | 'post.caseStudy.appGallery.slug'
  | 'post.caseStudy.appGallery.sourceUrl'
  | 'post.caseStudy.appGallery.srcSet'
  | 'post.caseStudy.appGallery.status'
  | 'post.caseStudy.appGallery.title'
  | 'post.caseStudy.appGallery.uri'
  | 'post.caseStudy.appGallery.width'
  | 'post.caseStudy.detailPageImage.altText'
  | 'post.caseStudy.detailPageImage.authorDatabaseId'
  | 'post.caseStudy.detailPageImage.authorId'
  | 'post.caseStudy.detailPageImage.caption'
  | 'post.caseStudy.detailPageImage.children'
  | 'post.caseStudy.detailPageImage.commentCount'
  | 'post.caseStudy.detailPageImage.commentStatus'
  | 'post.caseStudy.detailPageImage.contentTypeName'
  | 'post.caseStudy.detailPageImage.databaseId'
  | 'post.caseStudy.detailPageImage.date'
  | 'post.caseStudy.detailPageImage.dateGmt'
  | 'post.caseStudy.detailPageImage.description'
  | 'post.caseStudy.detailPageImage.desiredSlug'
  | 'post.caseStudy.detailPageImage.enclosure'
  | 'post.caseStudy.detailPageImage.fileSize'
  | 'post.caseStudy.detailPageImage.filename'
  | 'post.caseStudy.detailPageImage.filesize'
  | 'post.caseStudy.detailPageImage.gatsbyImage'
  | 'post.caseStudy.detailPageImage.guid'
  | 'post.caseStudy.detailPageImage.height'
  | 'post.caseStudy.detailPageImage.id'
  | 'post.caseStudy.detailPageImage.isContentNode'
  | 'post.caseStudy.detailPageImage.isTermNode'
  | 'post.caseStudy.detailPageImage.link'
  | 'post.caseStudy.detailPageImage.mediaItemUrl'
  | 'post.caseStudy.detailPageImage.mediaType'
  | 'post.caseStudy.detailPageImage.mimeType'
  | 'post.caseStudy.detailPageImage.modified'
  | 'post.caseStudy.detailPageImage.modifiedGmt'
  | 'post.caseStudy.detailPageImage.nodeType'
  | 'post.caseStudy.detailPageImage.parentDatabaseId'
  | 'post.caseStudy.detailPageImage.parentId'
  | 'post.caseStudy.detailPageImage.publicUrl'
  | 'post.caseStudy.detailPageImage.sizes'
  | 'post.caseStudy.detailPageImage.slug'
  | 'post.caseStudy.detailPageImage.sourceUrl'
  | 'post.caseStudy.detailPageImage.srcSet'
  | 'post.caseStudy.detailPageImage.status'
  | 'post.caseStudy.detailPageImage.title'
  | 'post.caseStudy.detailPageImage.uri'
  | 'post.caseStudy.detailPageImage.width'
  | 'post.caseStudy.fieldGroupName'
  | 'post.caseStudy.gallery'
  | 'post.caseStudy.gallery.altText'
  | 'post.caseStudy.gallery.authorDatabaseId'
  | 'post.caseStudy.gallery.authorId'
  | 'post.caseStudy.gallery.caption'
  | 'post.caseStudy.gallery.children'
  | 'post.caseStudy.gallery.commentCount'
  | 'post.caseStudy.gallery.commentStatus'
  | 'post.caseStudy.gallery.contentTypeName'
  | 'post.caseStudy.gallery.databaseId'
  | 'post.caseStudy.gallery.date'
  | 'post.caseStudy.gallery.dateGmt'
  | 'post.caseStudy.gallery.description'
  | 'post.caseStudy.gallery.desiredSlug'
  | 'post.caseStudy.gallery.enclosure'
  | 'post.caseStudy.gallery.fileSize'
  | 'post.caseStudy.gallery.filename'
  | 'post.caseStudy.gallery.filesize'
  | 'post.caseStudy.gallery.gatsbyImage'
  | 'post.caseStudy.gallery.guid'
  | 'post.caseStudy.gallery.height'
  | 'post.caseStudy.gallery.id'
  | 'post.caseStudy.gallery.isContentNode'
  | 'post.caseStudy.gallery.isTermNode'
  | 'post.caseStudy.gallery.link'
  | 'post.caseStudy.gallery.mediaItemUrl'
  | 'post.caseStudy.gallery.mediaType'
  | 'post.caseStudy.gallery.mimeType'
  | 'post.caseStudy.gallery.modified'
  | 'post.caseStudy.gallery.modifiedGmt'
  | 'post.caseStudy.gallery.nodeType'
  | 'post.caseStudy.gallery.parentDatabaseId'
  | 'post.caseStudy.gallery.parentId'
  | 'post.caseStudy.gallery.publicUrl'
  | 'post.caseStudy.gallery.sizes'
  | 'post.caseStudy.gallery.slug'
  | 'post.caseStudy.gallery.sourceUrl'
  | 'post.caseStudy.gallery.srcSet'
  | 'post.caseStudy.gallery.status'
  | 'post.caseStudy.gallery.title'
  | 'post.caseStudy.gallery.uri'
  | 'post.caseStudy.gallery.width'
  | 'post.caseStudy.ourRole'
  | 'post.caseStudy.problem'
  | 'post.caseStudy.problemStrategyResultLayout'
  | 'post.caseStudy.result'
  | 'post.caseStudy.secondoryImage.altText'
  | 'post.caseStudy.secondoryImage.authorDatabaseId'
  | 'post.caseStudy.secondoryImage.authorId'
  | 'post.caseStudy.secondoryImage.caption'
  | 'post.caseStudy.secondoryImage.children'
  | 'post.caseStudy.secondoryImage.commentCount'
  | 'post.caseStudy.secondoryImage.commentStatus'
  | 'post.caseStudy.secondoryImage.contentTypeName'
  | 'post.caseStudy.secondoryImage.databaseId'
  | 'post.caseStudy.secondoryImage.date'
  | 'post.caseStudy.secondoryImage.dateGmt'
  | 'post.caseStudy.secondoryImage.description'
  | 'post.caseStudy.secondoryImage.desiredSlug'
  | 'post.caseStudy.secondoryImage.enclosure'
  | 'post.caseStudy.secondoryImage.fileSize'
  | 'post.caseStudy.secondoryImage.filename'
  | 'post.caseStudy.secondoryImage.filesize'
  | 'post.caseStudy.secondoryImage.gatsbyImage'
  | 'post.caseStudy.secondoryImage.guid'
  | 'post.caseStudy.secondoryImage.height'
  | 'post.caseStudy.secondoryImage.id'
  | 'post.caseStudy.secondoryImage.isContentNode'
  | 'post.caseStudy.secondoryImage.isTermNode'
  | 'post.caseStudy.secondoryImage.link'
  | 'post.caseStudy.secondoryImage.mediaItemUrl'
  | 'post.caseStudy.secondoryImage.mediaType'
  | 'post.caseStudy.secondoryImage.mimeType'
  | 'post.caseStudy.secondoryImage.modified'
  | 'post.caseStudy.secondoryImage.modifiedGmt'
  | 'post.caseStudy.secondoryImage.nodeType'
  | 'post.caseStudy.secondoryImage.parentDatabaseId'
  | 'post.caseStudy.secondoryImage.parentId'
  | 'post.caseStudy.secondoryImage.publicUrl'
  | 'post.caseStudy.secondoryImage.sizes'
  | 'post.caseStudy.secondoryImage.slug'
  | 'post.caseStudy.secondoryImage.sourceUrl'
  | 'post.caseStudy.secondoryImage.srcSet'
  | 'post.caseStudy.secondoryImage.status'
  | 'post.caseStudy.secondoryImage.title'
  | 'post.caseStudy.secondoryImage.uri'
  | 'post.caseStudy.secondoryImage.width'
  | 'post.caseStudy.strategy'
  | 'post.caseStudy.technology'
  | 'post.caseStudy.technology.fieldGroupName'
  | 'post.caseStudy.technology.name'
  | 'post.caseStudy.technology.svgIcon'
  | 'post.caseStudy.type'
  | 'post.categories.nodes'
  | 'post.categories.nodes.children'
  | 'post.categories.nodes.count'
  | 'post.categories.nodes.databaseId'
  | 'post.categories.nodes.description'
  | 'post.categories.nodes.id'
  | 'post.categories.nodes.isContentNode'
  | 'post.categories.nodes.isTermNode'
  | 'post.categories.nodes.link'
  | 'post.categories.nodes.name'
  | 'post.categories.nodes.nodeType'
  | 'post.categories.nodes.parentDatabaseId'
  | 'post.categories.nodes.parentId'
  | 'post.categories.nodes.slug'
  | 'post.categories.nodes.taxonomyName'
  | 'post.categories.nodes.termGroupId'
  | 'post.categories.nodes.termTaxonomyId'
  | 'post.categories.nodes.uri'
  | 'post.children'
  | 'post.children.children'
  | 'post.children.children.children'
  | 'post.children.children.id'
  | 'post.children.id'
  | 'post.children.internal.content'
  | 'post.children.internal.contentDigest'
  | 'post.children.internal.contentFilePath'
  | 'post.children.internal.description'
  | 'post.children.internal.fieldOwners'
  | 'post.children.internal.ignoreType'
  | 'post.children.internal.mediaType'
  | 'post.children.internal.owner'
  | 'post.children.internal.type'
  | 'post.children.parent.children'
  | 'post.children.parent.id'
  | 'post.commentCount'
  | 'post.commentStatus'
  | 'post.comments.nodes'
  | 'post.comments.nodes.agent'
  | 'post.comments.nodes.approved'
  | 'post.comments.nodes.authorIp'
  | 'post.comments.nodes.children'
  | 'post.comments.nodes.content'
  | 'post.comments.nodes.databaseId'
  | 'post.comments.nodes.date'
  | 'post.comments.nodes.dateGmt'
  | 'post.comments.nodes.id'
  | 'post.comments.nodes.karma'
  | 'post.comments.nodes.nodeType'
  | 'post.comments.nodes.parentDatabaseId'
  | 'post.comments.nodes.parentId'
  | 'post.comments.nodes.type'
  | 'post.content'
  | 'post.contentTypeName'
  | 'post.contentType.node.archivePath'
  | 'post.contentType.node.canExport'
  | 'post.contentType.node.children'
  | 'post.contentType.node.deleteWithUser'
  | 'post.contentType.node.description'
  | 'post.contentType.node.excludeFromSearch'
  | 'post.contentType.node.graphqlPluralName'
  | 'post.contentType.node.graphqlSingleName'
  | 'post.contentType.node.hasArchive'
  | 'post.contentType.node.hierarchical'
  | 'post.contentType.node.id'
  | 'post.contentType.node.isContentNode'
  | 'post.contentType.node.isFrontPage'
  | 'post.contentType.node.isPostsPage'
  | 'post.contentType.node.isTermNode'
  | 'post.contentType.node.label'
  | 'post.contentType.node.menuIcon'
  | 'post.contentType.node.menuPosition'
  | 'post.contentType.node.name'
  | 'post.contentType.node.nodeType'
  | 'post.contentType.node.public'
  | 'post.contentType.node.publiclyQueryable'
  | 'post.contentType.node.restBase'
  | 'post.contentType.node.restControllerClass'
  | 'post.contentType.node.showInAdminBar'
  | 'post.contentType.node.showInGraphql'
  | 'post.contentType.node.showInMenu'
  | 'post.contentType.node.showInNavMenus'
  | 'post.contentType.node.showInRest'
  | 'post.contentType.node.showUi'
  | 'post.contentType.node.uri'
  | 'post.databaseId'
  | 'post.date'
  | 'post.dateGmt'
  | 'post.desiredSlug'
  | 'post.enclosure'
  | 'post.excerpt'
  | 'post.featuredImageDatabaseId'
  | 'post.featuredImageId'
  | 'post.featuredImage.node.altText'
  | 'post.featuredImage.node.authorDatabaseId'
  | 'post.featuredImage.node.authorId'
  | 'post.featuredImage.node.caption'
  | 'post.featuredImage.node.children'
  | 'post.featuredImage.node.commentCount'
  | 'post.featuredImage.node.commentStatus'
  | 'post.featuredImage.node.contentTypeName'
  | 'post.featuredImage.node.databaseId'
  | 'post.featuredImage.node.date'
  | 'post.featuredImage.node.dateGmt'
  | 'post.featuredImage.node.description'
  | 'post.featuredImage.node.desiredSlug'
  | 'post.featuredImage.node.enclosure'
  | 'post.featuredImage.node.fileSize'
  | 'post.featuredImage.node.filename'
  | 'post.featuredImage.node.filesize'
  | 'post.featuredImage.node.gatsbyImage'
  | 'post.featuredImage.node.guid'
  | 'post.featuredImage.node.height'
  | 'post.featuredImage.node.id'
  | 'post.featuredImage.node.isContentNode'
  | 'post.featuredImage.node.isTermNode'
  | 'post.featuredImage.node.link'
  | 'post.featuredImage.node.mediaItemUrl'
  | 'post.featuredImage.node.mediaType'
  | 'post.featuredImage.node.mimeType'
  | 'post.featuredImage.node.modified'
  | 'post.featuredImage.node.modifiedGmt'
  | 'post.featuredImage.node.nodeType'
  | 'post.featuredImage.node.parentDatabaseId'
  | 'post.featuredImage.node.parentId'
  | 'post.featuredImage.node.publicUrl'
  | 'post.featuredImage.node.sizes'
  | 'post.featuredImage.node.slug'
  | 'post.featuredImage.node.sourceUrl'
  | 'post.featuredImage.node.srcSet'
  | 'post.featuredImage.node.status'
  | 'post.featuredImage.node.title'
  | 'post.featuredImage.node.uri'
  | 'post.featuredImage.node.width'
  | 'post.guid'
  | 'post.id'
  | 'post.internal.content'
  | 'post.internal.contentDigest'
  | 'post.internal.contentFilePath'
  | 'post.internal.description'
  | 'post.internal.fieldOwners'
  | 'post.internal.ignoreType'
  | 'post.internal.mediaType'
  | 'post.internal.owner'
  | 'post.internal.type'
  | 'post.isContentNode'
  | 'post.isRevision'
  | 'post.isSticky'
  | 'post.isTermNode'
  | 'post.lastEditedBy.node.capKey'
  | 'post.lastEditedBy.node.capabilities'
  | 'post.lastEditedBy.node.children'
  | 'post.lastEditedBy.node.databaseId'
  | 'post.lastEditedBy.node.description'
  | 'post.lastEditedBy.node.email'
  | 'post.lastEditedBy.node.extraCapabilities'
  | 'post.lastEditedBy.node.firstName'
  | 'post.lastEditedBy.node.id'
  | 'post.lastEditedBy.node.isContentNode'
  | 'post.lastEditedBy.node.isTermNode'
  | 'post.lastEditedBy.node.lastName'
  | 'post.lastEditedBy.node.locale'
  | 'post.lastEditedBy.node.name'
  | 'post.lastEditedBy.node.nicename'
  | 'post.lastEditedBy.node.nickname'
  | 'post.lastEditedBy.node.nodeType'
  | 'post.lastEditedBy.node.registeredDate'
  | 'post.lastEditedBy.node.slug'
  | 'post.lastEditedBy.node.uri'
  | 'post.lastEditedBy.node.url'
  | 'post.lastEditedBy.node.username'
  | 'post.link'
  | 'post.modified'
  | 'post.modifiedGmt'
  | 'post.next.authorDatabaseId'
  | 'post.next.authorId'
  | 'post.next.caseStudy.appGallery'
  | 'post.next.caseStudy.fieldGroupName'
  | 'post.next.caseStudy.gallery'
  | 'post.next.caseStudy.ourRole'
  | 'post.next.caseStudy.problem'
  | 'post.next.caseStudy.problemStrategyResultLayout'
  | 'post.next.caseStudy.result'
  | 'post.next.caseStudy.strategy'
  | 'post.next.caseStudy.technology'
  | 'post.next.caseStudy.type'
  | 'post.next.categories.nodes'
  | 'post.next.children'
  | 'post.next.children.children'
  | 'post.next.children.id'
  | 'post.next.commentCount'
  | 'post.next.commentStatus'
  | 'post.next.comments.nodes'
  | 'post.next.content'
  | 'post.next.contentTypeName'
  | 'post.next.databaseId'
  | 'post.next.date'
  | 'post.next.dateGmt'
  | 'post.next.desiredSlug'
  | 'post.next.enclosure'
  | 'post.next.excerpt'
  | 'post.next.featuredImageDatabaseId'
  | 'post.next.featuredImageId'
  | 'post.next.guid'
  | 'post.next.id'
  | 'post.next.internal.content'
  | 'post.next.internal.contentDigest'
  | 'post.next.internal.contentFilePath'
  | 'post.next.internal.description'
  | 'post.next.internal.fieldOwners'
  | 'post.next.internal.ignoreType'
  | 'post.next.internal.mediaType'
  | 'post.next.internal.owner'
  | 'post.next.internal.type'
  | 'post.next.isContentNode'
  | 'post.next.isRevision'
  | 'post.next.isSticky'
  | 'post.next.isTermNode'
  | 'post.next.link'
  | 'post.next.modified'
  | 'post.next.modifiedGmt'
  | 'post.next.next.authorDatabaseId'
  | 'post.next.next.authorId'
  | 'post.next.next.children'
  | 'post.next.next.commentCount'
  | 'post.next.next.commentStatus'
  | 'post.next.next.content'
  | 'post.next.next.contentTypeName'
  | 'post.next.next.databaseId'
  | 'post.next.next.date'
  | 'post.next.next.dateGmt'
  | 'post.next.next.desiredSlug'
  | 'post.next.next.enclosure'
  | 'post.next.next.excerpt'
  | 'post.next.next.featuredImageDatabaseId'
  | 'post.next.next.featuredImageId'
  | 'post.next.next.guid'
  | 'post.next.next.id'
  | 'post.next.next.isContentNode'
  | 'post.next.next.isRevision'
  | 'post.next.next.isSticky'
  | 'post.next.next.isTermNode'
  | 'post.next.next.link'
  | 'post.next.next.modified'
  | 'post.next.next.modifiedGmt'
  | 'post.next.next.nodeType'
  | 'post.next.next.pingStatus'
  | 'post.next.next.pinged'
  | 'post.next.next.slug'
  | 'post.next.next.status'
  | 'post.next.next.title'
  | 'post.next.next.toPing'
  | 'post.next.next.uri'
  | 'post.next.nodeType'
  | 'post.next.parent.children'
  | 'post.next.parent.id'
  | 'post.next.pingStatus'
  | 'post.next.pinged'
  | 'post.next.postFormats.nodes'
  | 'post.next.previous.authorDatabaseId'
  | 'post.next.previous.authorId'
  | 'post.next.previous.children'
  | 'post.next.previous.commentCount'
  | 'post.next.previous.commentStatus'
  | 'post.next.previous.content'
  | 'post.next.previous.contentTypeName'
  | 'post.next.previous.databaseId'
  | 'post.next.previous.date'
  | 'post.next.previous.dateGmt'
  | 'post.next.previous.desiredSlug'
  | 'post.next.previous.enclosure'
  | 'post.next.previous.excerpt'
  | 'post.next.previous.featuredImageDatabaseId'
  | 'post.next.previous.featuredImageId'
  | 'post.next.previous.guid'
  | 'post.next.previous.id'
  | 'post.next.previous.isContentNode'
  | 'post.next.previous.isRevision'
  | 'post.next.previous.isSticky'
  | 'post.next.previous.isTermNode'
  | 'post.next.previous.link'
  | 'post.next.previous.modified'
  | 'post.next.previous.modifiedGmt'
  | 'post.next.previous.nodeType'
  | 'post.next.previous.pingStatus'
  | 'post.next.previous.pinged'
  | 'post.next.previous.slug'
  | 'post.next.previous.status'
  | 'post.next.previous.title'
  | 'post.next.previous.toPing'
  | 'post.next.previous.uri'
  | 'post.next.selectCaseStudy.fieldGroupName'
  | 'post.next.seo.breadcrumbs'
  | 'post.next.seo.canonical'
  | 'post.next.seo.cornerstone'
  | 'post.next.seo.focuskw'
  | 'post.next.seo.fullHead'
  | 'post.next.seo.metaDesc'
  | 'post.next.seo.metaKeywords'
  | 'post.next.seo.metaRobotsNofollow'
  | 'post.next.seo.metaRobotsNoindex'
  | 'post.next.seo.opengraphAuthor'
  | 'post.next.seo.opengraphDescription'
  | 'post.next.seo.opengraphModifiedTime'
  | 'post.next.seo.opengraphPublishedTime'
  | 'post.next.seo.opengraphPublisher'
  | 'post.next.seo.opengraphSiteName'
  | 'post.next.seo.opengraphTitle'
  | 'post.next.seo.opengraphType'
  | 'post.next.seo.opengraphUrl'
  | 'post.next.seo.readingTime'
  | 'post.next.seo.title'
  | 'post.next.seo.twitterDescription'
  | 'post.next.seo.twitterTitle'
  | 'post.next.slug'
  | 'post.next.status'
  | 'post.next.tags.nodes'
  | 'post.next.template.templateName'
  | 'post.next.terms.nodes'
  | 'post.next.title'
  | 'post.next.toPing'
  | 'post.next.uri'
  | 'post.nodeType'
  | 'post.parent.children'
  | 'post.parent.children.children'
  | 'post.parent.children.id'
  | 'post.parent.id'
  | 'post.parent.internal.content'
  | 'post.parent.internal.contentDigest'
  | 'post.parent.internal.contentFilePath'
  | 'post.parent.internal.description'
  | 'post.parent.internal.fieldOwners'
  | 'post.parent.internal.ignoreType'
  | 'post.parent.internal.mediaType'
  | 'post.parent.internal.owner'
  | 'post.parent.internal.type'
  | 'post.parent.parent.children'
  | 'post.parent.parent.id'
  | 'post.pingStatus'
  | 'post.pinged'
  | 'post.postFormats.nodes'
  | 'post.postFormats.nodes.children'
  | 'post.postFormats.nodes.count'
  | 'post.postFormats.nodes.databaseId'
  | 'post.postFormats.nodes.description'
  | 'post.postFormats.nodes.id'
  | 'post.postFormats.nodes.isContentNode'
  | 'post.postFormats.nodes.isTermNode'
  | 'post.postFormats.nodes.link'
  | 'post.postFormats.nodes.name'
  | 'post.postFormats.nodes.nodeType'
  | 'post.postFormats.nodes.slug'
  | 'post.postFormats.nodes.taxonomyName'
  | 'post.postFormats.nodes.termGroupId'
  | 'post.postFormats.nodes.termTaxonomyId'
  | 'post.postFormats.nodes.uri'
  | 'post.previous.authorDatabaseId'
  | 'post.previous.authorId'
  | 'post.previous.caseStudy.appGallery'
  | 'post.previous.caseStudy.fieldGroupName'
  | 'post.previous.caseStudy.gallery'
  | 'post.previous.caseStudy.ourRole'
  | 'post.previous.caseStudy.problem'
  | 'post.previous.caseStudy.problemStrategyResultLayout'
  | 'post.previous.caseStudy.result'
  | 'post.previous.caseStudy.strategy'
  | 'post.previous.caseStudy.technology'
  | 'post.previous.caseStudy.type'
  | 'post.previous.categories.nodes'
  | 'post.previous.children'
  | 'post.previous.children.children'
  | 'post.previous.children.id'
  | 'post.previous.commentCount'
  | 'post.previous.commentStatus'
  | 'post.previous.comments.nodes'
  | 'post.previous.content'
  | 'post.previous.contentTypeName'
  | 'post.previous.databaseId'
  | 'post.previous.date'
  | 'post.previous.dateGmt'
  | 'post.previous.desiredSlug'
  | 'post.previous.enclosure'
  | 'post.previous.excerpt'
  | 'post.previous.featuredImageDatabaseId'
  | 'post.previous.featuredImageId'
  | 'post.previous.guid'
  | 'post.previous.id'
  | 'post.previous.internal.content'
  | 'post.previous.internal.contentDigest'
  | 'post.previous.internal.contentFilePath'
  | 'post.previous.internal.description'
  | 'post.previous.internal.fieldOwners'
  | 'post.previous.internal.ignoreType'
  | 'post.previous.internal.mediaType'
  | 'post.previous.internal.owner'
  | 'post.previous.internal.type'
  | 'post.previous.isContentNode'
  | 'post.previous.isRevision'
  | 'post.previous.isSticky'
  | 'post.previous.isTermNode'
  | 'post.previous.link'
  | 'post.previous.modified'
  | 'post.previous.modifiedGmt'
  | 'post.previous.next.authorDatabaseId'
  | 'post.previous.next.authorId'
  | 'post.previous.next.children'
  | 'post.previous.next.commentCount'
  | 'post.previous.next.commentStatus'
  | 'post.previous.next.content'
  | 'post.previous.next.contentTypeName'
  | 'post.previous.next.databaseId'
  | 'post.previous.next.date'
  | 'post.previous.next.dateGmt'
  | 'post.previous.next.desiredSlug'
  | 'post.previous.next.enclosure'
  | 'post.previous.next.excerpt'
  | 'post.previous.next.featuredImageDatabaseId'
  | 'post.previous.next.featuredImageId'
  | 'post.previous.next.guid'
  | 'post.previous.next.id'
  | 'post.previous.next.isContentNode'
  | 'post.previous.next.isRevision'
  | 'post.previous.next.isSticky'
  | 'post.previous.next.isTermNode'
  | 'post.previous.next.link'
  | 'post.previous.next.modified'
  | 'post.previous.next.modifiedGmt'
  | 'post.previous.next.nodeType'
  | 'post.previous.next.pingStatus'
  | 'post.previous.next.pinged'
  | 'post.previous.next.slug'
  | 'post.previous.next.status'
  | 'post.previous.next.title'
  | 'post.previous.next.toPing'
  | 'post.previous.next.uri'
  | 'post.previous.nodeType'
  | 'post.previous.parent.children'
  | 'post.previous.parent.id'
  | 'post.previous.pingStatus'
  | 'post.previous.pinged'
  | 'post.previous.postFormats.nodes'
  | 'post.previous.previous.authorDatabaseId'
  | 'post.previous.previous.authorId'
  | 'post.previous.previous.children'
  | 'post.previous.previous.commentCount'
  | 'post.previous.previous.commentStatus'
  | 'post.previous.previous.content'
  | 'post.previous.previous.contentTypeName'
  | 'post.previous.previous.databaseId'
  | 'post.previous.previous.date'
  | 'post.previous.previous.dateGmt'
  | 'post.previous.previous.desiredSlug'
  | 'post.previous.previous.enclosure'
  | 'post.previous.previous.excerpt'
  | 'post.previous.previous.featuredImageDatabaseId'
  | 'post.previous.previous.featuredImageId'
  | 'post.previous.previous.guid'
  | 'post.previous.previous.id'
  | 'post.previous.previous.isContentNode'
  | 'post.previous.previous.isRevision'
  | 'post.previous.previous.isSticky'
  | 'post.previous.previous.isTermNode'
  | 'post.previous.previous.link'
  | 'post.previous.previous.modified'
  | 'post.previous.previous.modifiedGmt'
  | 'post.previous.previous.nodeType'
  | 'post.previous.previous.pingStatus'
  | 'post.previous.previous.pinged'
  | 'post.previous.previous.slug'
  | 'post.previous.previous.status'
  | 'post.previous.previous.title'
  | 'post.previous.previous.toPing'
  | 'post.previous.previous.uri'
  | 'post.previous.selectCaseStudy.fieldGroupName'
  | 'post.previous.seo.breadcrumbs'
  | 'post.previous.seo.canonical'
  | 'post.previous.seo.cornerstone'
  | 'post.previous.seo.focuskw'
  | 'post.previous.seo.fullHead'
  | 'post.previous.seo.metaDesc'
  | 'post.previous.seo.metaKeywords'
  | 'post.previous.seo.metaRobotsNofollow'
  | 'post.previous.seo.metaRobotsNoindex'
  | 'post.previous.seo.opengraphAuthor'
  | 'post.previous.seo.opengraphDescription'
  | 'post.previous.seo.opengraphModifiedTime'
  | 'post.previous.seo.opengraphPublishedTime'
  | 'post.previous.seo.opengraphPublisher'
  | 'post.previous.seo.opengraphSiteName'
  | 'post.previous.seo.opengraphTitle'
  | 'post.previous.seo.opengraphType'
  | 'post.previous.seo.opengraphUrl'
  | 'post.previous.seo.readingTime'
  | 'post.previous.seo.title'
  | 'post.previous.seo.twitterDescription'
  | 'post.previous.seo.twitterTitle'
  | 'post.previous.slug'
  | 'post.previous.status'
  | 'post.previous.tags.nodes'
  | 'post.previous.template.templateName'
  | 'post.previous.terms.nodes'
  | 'post.previous.title'
  | 'post.previous.toPing'
  | 'post.previous.uri'
  | 'post.selectCaseStudy.fieldGroupName'
  | 'post.selectCaseStudy.listingPageImage.altText'
  | 'post.selectCaseStudy.listingPageImage.authorDatabaseId'
  | 'post.selectCaseStudy.listingPageImage.authorId'
  | 'post.selectCaseStudy.listingPageImage.caption'
  | 'post.selectCaseStudy.listingPageImage.children'
  | 'post.selectCaseStudy.listingPageImage.commentCount'
  | 'post.selectCaseStudy.listingPageImage.commentStatus'
  | 'post.selectCaseStudy.listingPageImage.contentTypeName'
  | 'post.selectCaseStudy.listingPageImage.databaseId'
  | 'post.selectCaseStudy.listingPageImage.date'
  | 'post.selectCaseStudy.listingPageImage.dateGmt'
  | 'post.selectCaseStudy.listingPageImage.description'
  | 'post.selectCaseStudy.listingPageImage.desiredSlug'
  | 'post.selectCaseStudy.listingPageImage.enclosure'
  | 'post.selectCaseStudy.listingPageImage.fileSize'
  | 'post.selectCaseStudy.listingPageImage.filename'
  | 'post.selectCaseStudy.listingPageImage.filesize'
  | 'post.selectCaseStudy.listingPageImage.gatsbyImage'
  | 'post.selectCaseStudy.listingPageImage.guid'
  | 'post.selectCaseStudy.listingPageImage.height'
  | 'post.selectCaseStudy.listingPageImage.id'
  | 'post.selectCaseStudy.listingPageImage.isContentNode'
  | 'post.selectCaseStudy.listingPageImage.isTermNode'
  | 'post.selectCaseStudy.listingPageImage.link'
  | 'post.selectCaseStudy.listingPageImage.mediaItemUrl'
  | 'post.selectCaseStudy.listingPageImage.mediaType'
  | 'post.selectCaseStudy.listingPageImage.mimeType'
  | 'post.selectCaseStudy.listingPageImage.modified'
  | 'post.selectCaseStudy.listingPageImage.modifiedGmt'
  | 'post.selectCaseStudy.listingPageImage.nodeType'
  | 'post.selectCaseStudy.listingPageImage.parentDatabaseId'
  | 'post.selectCaseStudy.listingPageImage.parentId'
  | 'post.selectCaseStudy.listingPageImage.publicUrl'
  | 'post.selectCaseStudy.listingPageImage.sizes'
  | 'post.selectCaseStudy.listingPageImage.slug'
  | 'post.selectCaseStudy.listingPageImage.sourceUrl'
  | 'post.selectCaseStudy.listingPageImage.srcSet'
  | 'post.selectCaseStudy.listingPageImage.status'
  | 'post.selectCaseStudy.listingPageImage.title'
  | 'post.selectCaseStudy.listingPageImage.uri'
  | 'post.selectCaseStudy.listingPageImage.width'
  | 'post.seo.breadcrumbs'
  | 'post.seo.breadcrumbs.text'
  | 'post.seo.breadcrumbs.url'
  | 'post.seo.canonical'
  | 'post.seo.cornerstone'
  | 'post.seo.focuskw'
  | 'post.seo.fullHead'
  | 'post.seo.metaDesc'
  | 'post.seo.metaKeywords'
  | 'post.seo.metaRobotsNofollow'
  | 'post.seo.metaRobotsNoindex'
  | 'post.seo.opengraphAuthor'
  | 'post.seo.opengraphDescription'
  | 'post.seo.opengraphImage.altText'
  | 'post.seo.opengraphImage.authorDatabaseId'
  | 'post.seo.opengraphImage.authorId'
  | 'post.seo.opengraphImage.caption'
  | 'post.seo.opengraphImage.children'
  | 'post.seo.opengraphImage.commentCount'
  | 'post.seo.opengraphImage.commentStatus'
  | 'post.seo.opengraphImage.contentTypeName'
  | 'post.seo.opengraphImage.databaseId'
  | 'post.seo.opengraphImage.date'
  | 'post.seo.opengraphImage.dateGmt'
  | 'post.seo.opengraphImage.description'
  | 'post.seo.opengraphImage.desiredSlug'
  | 'post.seo.opengraphImage.enclosure'
  | 'post.seo.opengraphImage.fileSize'
  | 'post.seo.opengraphImage.filename'
  | 'post.seo.opengraphImage.filesize'
  | 'post.seo.opengraphImage.gatsbyImage'
  | 'post.seo.opengraphImage.guid'
  | 'post.seo.opengraphImage.height'
  | 'post.seo.opengraphImage.id'
  | 'post.seo.opengraphImage.isContentNode'
  | 'post.seo.opengraphImage.isTermNode'
  | 'post.seo.opengraphImage.link'
  | 'post.seo.opengraphImage.mediaItemUrl'
  | 'post.seo.opengraphImage.mediaType'
  | 'post.seo.opengraphImage.mimeType'
  | 'post.seo.opengraphImage.modified'
  | 'post.seo.opengraphImage.modifiedGmt'
  | 'post.seo.opengraphImage.nodeType'
  | 'post.seo.opengraphImage.parentDatabaseId'
  | 'post.seo.opengraphImage.parentId'
  | 'post.seo.opengraphImage.publicUrl'
  | 'post.seo.opengraphImage.sizes'
  | 'post.seo.opengraphImage.slug'
  | 'post.seo.opengraphImage.sourceUrl'
  | 'post.seo.opengraphImage.srcSet'
  | 'post.seo.opengraphImage.status'
  | 'post.seo.opengraphImage.title'
  | 'post.seo.opengraphImage.uri'
  | 'post.seo.opengraphImage.width'
  | 'post.seo.opengraphModifiedTime'
  | 'post.seo.opengraphPublishedTime'
  | 'post.seo.opengraphPublisher'
  | 'post.seo.opengraphSiteName'
  | 'post.seo.opengraphTitle'
  | 'post.seo.opengraphType'
  | 'post.seo.opengraphUrl'
  | 'post.seo.readingTime'
  | 'post.seo.schema.articleType'
  | 'post.seo.schema.pageType'
  | 'post.seo.schema.raw'
  | 'post.seo.title'
  | 'post.seo.twitterDescription'
  | 'post.seo.twitterImage.altText'
  | 'post.seo.twitterImage.authorDatabaseId'
  | 'post.seo.twitterImage.authorId'
  | 'post.seo.twitterImage.caption'
  | 'post.seo.twitterImage.children'
  | 'post.seo.twitterImage.commentCount'
  | 'post.seo.twitterImage.commentStatus'
  | 'post.seo.twitterImage.contentTypeName'
  | 'post.seo.twitterImage.databaseId'
  | 'post.seo.twitterImage.date'
  | 'post.seo.twitterImage.dateGmt'
  | 'post.seo.twitterImage.description'
  | 'post.seo.twitterImage.desiredSlug'
  | 'post.seo.twitterImage.enclosure'
  | 'post.seo.twitterImage.fileSize'
  | 'post.seo.twitterImage.filename'
  | 'post.seo.twitterImage.filesize'
  | 'post.seo.twitterImage.gatsbyImage'
  | 'post.seo.twitterImage.guid'
  | 'post.seo.twitterImage.height'
  | 'post.seo.twitterImage.id'
  | 'post.seo.twitterImage.isContentNode'
  | 'post.seo.twitterImage.isTermNode'
  | 'post.seo.twitterImage.link'
  | 'post.seo.twitterImage.mediaItemUrl'
  | 'post.seo.twitterImage.mediaType'
  | 'post.seo.twitterImage.mimeType'
  | 'post.seo.twitterImage.modified'
  | 'post.seo.twitterImage.modifiedGmt'
  | 'post.seo.twitterImage.nodeType'
  | 'post.seo.twitterImage.parentDatabaseId'
  | 'post.seo.twitterImage.parentId'
  | 'post.seo.twitterImage.publicUrl'
  | 'post.seo.twitterImage.sizes'
  | 'post.seo.twitterImage.slug'
  | 'post.seo.twitterImage.sourceUrl'
  | 'post.seo.twitterImage.srcSet'
  | 'post.seo.twitterImage.status'
  | 'post.seo.twitterImage.title'
  | 'post.seo.twitterImage.uri'
  | 'post.seo.twitterImage.width'
  | 'post.seo.twitterTitle'
  | 'post.slug'
  | 'post.status'
  | 'post.tags.nodes'
  | 'post.tags.nodes.children'
  | 'post.tags.nodes.count'
  | 'post.tags.nodes.databaseId'
  | 'post.tags.nodes.description'
  | 'post.tags.nodes.id'
  | 'post.tags.nodes.isContentNode'
  | 'post.tags.nodes.isTermNode'
  | 'post.tags.nodes.link'
  | 'post.tags.nodes.name'
  | 'post.tags.nodes.nodeType'
  | 'post.tags.nodes.slug'
  | 'post.tags.nodes.taxonomyName'
  | 'post.tags.nodes.termGroupId'
  | 'post.tags.nodes.termTaxonomyId'
  | 'post.tags.nodes.uri'
  | 'post.template.templateName'
  | 'post.terms.nodes'
  | 'post.terms.nodes.children'
  | 'post.terms.nodes.count'
  | 'post.terms.nodes.databaseId'
  | 'post.terms.nodes.description'
  | 'post.terms.nodes.id'
  | 'post.terms.nodes.isContentNode'
  | 'post.terms.nodes.isTermNode'
  | 'post.terms.nodes.link'
  | 'post.terms.nodes.name'
  | 'post.terms.nodes.nodeType'
  | 'post.terms.nodes.slug'
  | 'post.terms.nodes.taxonomyName'
  | 'post.terms.nodes.termGroupId'
  | 'post.terms.nodes.termTaxonomyId'
  | 'post.terms.nodes.uri'
  | 'post.title'
  | 'post.toPing'
  | 'post.uri'
  | 'sourceUrl'
  | 'status'
  | 'userAgent';

type tsGfSubmittedEntryFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdBy: InputMaybe<tsUserFilterInput>;
  readonly createdByDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly createdById: InputMaybe<IDQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly dateCreated: InputMaybe<StringQueryOperatorInput>;
  readonly dateCreatedGmt: InputMaybe<StringQueryOperatorInput>;
  readonly dateUpdated: InputMaybe<StringQueryOperatorInput>;
  readonly dateUpdatedGmt: InputMaybe<StringQueryOperatorInput>;
  readonly form: InputMaybe<tsGfFormFilterInput>;
  readonly formDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly formFields: InputMaybe<tsGfEntryToFormFieldConnectionFilterInput>;
  readonly formId: InputMaybe<IDQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly ip: InputMaybe<StringQueryOperatorInput>;
  readonly isDraft: InputMaybe<BooleanQueryOperatorInput>;
  readonly isRead: InputMaybe<BooleanQueryOperatorInput>;
  readonly isStarred: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSubmitted: InputMaybe<BooleanQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly post: InputMaybe<tsPostFilterInput>;
  readonly postDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly sourceUrl: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<tsEntryStatusEnumQueryOperatorInput>;
  readonly userAgent: InputMaybe<StringQueryOperatorInput>;
};

type tsGfSubmittedEntryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsGfSubmittedEntryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsGfSubmittedEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsGfSubmittedEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsGfSubmittedEntryGroupConnection_distinctArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
};


type tsGfSubmittedEntryGroupConnection_groupArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsGfSubmittedEntryGroupConnection_maxArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
};


type tsGfSubmittedEntryGroupConnection_minArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
};


type tsGfSubmittedEntryGroupConnection_sumArgs = {
  field: tsGfSubmittedEntryFieldsEnum;
};

type tsGfSubmittedEntrySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsGfSubmittedEntryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type tsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ts>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsGroupConnection_distinctArgs = {
  field: tsFieldsEnum;
};


type tsGroupConnection_groupArgs = {
  field: tsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsGroupConnection_maxArgs = {
  field: tsFieldsEnum;
};


type tsGroupConnection_minArgs = {
  field: tsFieldsEnum;
};


type tsGroupConnection_sumArgs = {
  field: tsFieldsEnum;
};

/** A Gravity Forms hidden field. */
type tsHiddenField = tsFormField & tsGfFieldWithDefaultValue & tsGfFieldWithLabel & tsGfFieldWithPersonalData & tsGfFieldWithPrepopulateField & {
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

type tsHierarchicalContentNode = {
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  readonly wpChildren: Maybe<tsHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The parent of the node. The parent object can be of various types */
  readonly wpParent: Maybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdge>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
type tsHierarchicalContentNodeToContentNodeAncestorsConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
type tsHierarchicalContentNodeToContentNodeChildrenConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
type tsHierarchicalContentNodeToParentContentNodeConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsContentNode>;
};

type tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsContentNodeFilterInput>;
};

type tsHierarchicalTermNode = {
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
};

/** A Gravity Forms html field. */
type tsHtmlField = tsFormField & tsGfFieldWithConditionalLogic & tsGfFieldWithContent & tsGfFieldWithCssClass & tsGfFieldWithDisableMargins & tsGfFieldWithLabel & {
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** Content of an HTML block field to be displayed on the form. */
  readonly content: Maybe<Scalars['String']>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Indicates whether the default margins are turned on to align the HTML content with other fields. */
  readonly hasMargins: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** The individual properties for each element of the PostImage value field. */
type tsImageFieldValue = {
  /** The image alt text. */
  readonly altText: Maybe<Scalars['String']>;
  /** The path to the parent directory of the file. */
  readonly basePath: Maybe<Scalars['String']>;
  /** The base url to the parent directory of the file. */
  readonly baseUrl: Maybe<Scalars['String']>;
  /** The image caption. */
  readonly caption: Maybe<Scalars['String']>;
  /** The image description. */
  readonly description: Maybe<Scalars['String']>;
  /** The filename. */
  readonly filename: Maybe<Scalars['String']>;
  /** The image title. */
  readonly title: Maybe<Scalars['String']>;
  /** The url to the file. */
  readonly url: Maybe<Scalars['String']>;
};

/** A Gravity Forms list field. */
type tsListField = tsFormField & tsGfFieldWithAddIconUrl & tsGfFieldWithAdminLabel & tsGfFieldWithColumns & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDeleteIconUrl & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMaxrows & tsGfFieldWithPersonalData & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & {
  /** The URL of the image to be used for the add row button. */
  readonly addIconUrl: Maybe<Scalars['String']>;
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the list field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsListFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** The URL of the image to be used for the delete row button. */
  readonly deleteIconUrl: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field should use multiple columns. Default is false. */
  readonly hasColumns: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** List field value. */
  readonly listValues: Maybe<ReadonlyArray<Maybe<tsListFieldValue>>>;
  /** The maximum number of rows the user can add to the field. */
  readonly maxRows: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** ListFieldChoice choice values. */
type tsListFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithColumns & {
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** The individual properties for each element of the List value field. */
type tsListFieldValue = {
  /** Input values. */
  readonly values: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};

/** File details for a Media Item */
type tsMediaDetails = {
  /** The filename of the mediaItem */
  readonly file: Maybe<Scalars['String']>;
  /** The height of the mediaItem */
  readonly height: Maybe<Scalars['Int']>;
  /** Meta information associated with the mediaItem */
  readonly meta: Maybe<tsMediaItemMeta>;
  /** The available sizes of the mediaItem */
  readonly sizes: Maybe<ReadonlyArray<Maybe<tsMediaSize>>>;
  /** The width of the mediaItem */
  readonly width: Maybe<Scalars['Int']>;
};

type tsMediaDetailsFilterInput = {
  readonly file: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly meta: InputMaybe<tsMediaItemMetaFilterInput>;
  readonly sizes: InputMaybe<tsMediaSizeFilterListInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type tsMediaItem = Node & RemoteFile & tsContentNode & tsDatabaseIdentifier & tsHierarchicalContentNode & tsNode & tsNodeWithAuthor & tsNodeWithComments & tsNodeWithTemplate & tsNodeWithTitle & tsUniformResourceIdentifiable & {
  /** Alternative text to display when resource is not displayed */
  readonly altText: Maybe<Scalars['String']>;
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  readonly author: Maybe<tsNodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  readonly authorDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  readonly authorId: Maybe<Scalars['ID']>;
  /** The caption for the resource */
  readonly caption: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  readonly commentCount: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  readonly commentStatus: Maybe<Scalars['String']>;
  /** Connection between the mediaItem type and the Comment type */
  readonly comments: Maybe<tsMediaItemToCommentConnection>;
  /** Connection between the ContentNode type and the ContentType type */
  readonly contentType: Maybe<tsContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  readonly contentTypeName: Scalars['String'];
  /** The unique identifier stored in the database */
  readonly databaseId: Scalars['Int'];
  /** Post publishing date. */
  readonly date: Maybe<Scalars['Date']>;
  /** The publishing date set in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** Description of the image (stored as post_content) */
  readonly description: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  readonly desiredSlug: Maybe<Scalars['String']>;
  /** The RSS enclosure for the object */
  readonly enclosure: Maybe<Scalars['String']>;
  /** The filesize in bytes of the resource */
  readonly fileSize: Maybe<Scalars['Int']>;
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  readonly guid: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  readonly lastEditedBy: Maybe<tsContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  readonly link: Maybe<Scalars['String']>;
  readonly localFile: Maybe<File>;
  /** Details about the mediaItem */
  readonly mediaDetails: Maybe<tsMediaDetails>;
  /** Url of the mediaItem */
  readonly mediaItemUrl: Maybe<Scalars['String']>;
  /** Type of resource */
  readonly mediaType: Maybe<Scalars['String']>;
  readonly mimeType: Scalars['String'];
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  readonly modified: Maybe<Scalars['Date']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  readonly modifiedGmt: Maybe<Scalars['Date']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  readonly publicUrl: Scalars['String'];
  /** @deprecated MediaItem.remoteFile was renamed to localFile */
  readonly remoteFile: Maybe<File>;
  readonly resize: Maybe<RemoteFileResize>;
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The sizes attribute value for an image. */
  readonly sizes: Maybe<Scalars['String']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  readonly slug: Maybe<Scalars['String']>;
  /** Url of the mediaItem */
  readonly sourceUrl: Maybe<Scalars['String']>;
  /** The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths. */
  readonly srcSet: Maybe<Scalars['String']>;
  /** The current status of the object */
  readonly status: Maybe<Scalars['String']>;
  /** The template assigned to the node */
  readonly template: Maybe<tsContentTemplate>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  readonly title: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  readonly wpChildren: Maybe<tsHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The parent of the node. The parent object can be of various types */
  readonly wpParent: Maybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdge>;
};


type tsMediaItem_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsMediaItem_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsMediaItem_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type tsMediaItem_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsMediaItem_modifiedGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsMediaItem_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type tsMediaItemConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsMediaItemEdge>;
  readonly group: ReadonlyArray<tsMediaItemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsMediaItem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsMediaItemConnection_distinctArgs = {
  field: tsMediaItemFieldsEnum;
};


type tsMediaItemConnection_groupArgs = {
  field: tsMediaItemFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsMediaItemConnection_maxArgs = {
  field: tsMediaItemFieldsEnum;
};


type tsMediaItemConnection_minArgs = {
  field: tsMediaItemFieldsEnum;
};


type tsMediaItemConnection_sumArgs = {
  field: tsMediaItemFieldsEnum;
};

type tsMediaItemEdge = {
  readonly next: Maybe<tsMediaItem>;
  readonly node: tsMediaItem;
  readonly previous: Maybe<tsMediaItem>;
};

type tsMediaItemFieldsEnum =
  | 'altText'
  | 'ancestors.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentTypeName'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.date'
  | 'ancestors.nodes.dateGmt'
  | 'ancestors.nodes.desiredSlug'
  | 'ancestors.nodes.enclosure'
  | 'ancestors.nodes.guid'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.modified'
  | 'ancestors.nodes.modifiedGmt'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.readingTime'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.status'
  | 'ancestors.nodes.template.templateName'
  | 'ancestors.nodes.uri'
  | 'authorDatabaseId'
  | 'authorId'
  | 'author.node.authorProfile.fieldGroupName'
  | 'author.node.avatar.default'
  | 'author.node.avatar.extraAttr'
  | 'author.node.avatar.forceDefault'
  | 'author.node.avatar.foundAvatar'
  | 'author.node.avatar.height'
  | 'author.node.avatar.rating'
  | 'author.node.avatar.scheme'
  | 'author.node.avatar.size'
  | 'author.node.avatar.url'
  | 'author.node.avatar.width'
  | 'author.node.capKey'
  | 'author.node.capabilities'
  | 'author.node.children'
  | 'author.node.children.children'
  | 'author.node.children.id'
  | 'author.node.comments.nodes'
  | 'author.node.databaseId'
  | 'author.node.description'
  | 'author.node.email'
  | 'author.node.extraCapabilities'
  | 'author.node.firstName'
  | 'author.node.id'
  | 'author.node.internal.content'
  | 'author.node.internal.contentDigest'
  | 'author.node.internal.contentFilePath'
  | 'author.node.internal.description'
  | 'author.node.internal.fieldOwners'
  | 'author.node.internal.ignoreType'
  | 'author.node.internal.mediaType'
  | 'author.node.internal.owner'
  | 'author.node.internal.type'
  | 'author.node.isContentNode'
  | 'author.node.isTermNode'
  | 'author.node.lastName'
  | 'author.node.locale'
  | 'author.node.name'
  | 'author.node.nicename'
  | 'author.node.nickname'
  | 'author.node.nodeType'
  | 'author.node.pages.nodes'
  | 'author.node.parent.children'
  | 'author.node.parent.id'
  | 'author.node.posts.nodes'
  | 'author.node.registeredDate'
  | 'author.node.roles.nodes'
  | 'author.node.seo.breadcrumbTitle'
  | 'author.node.seo.canonical'
  | 'author.node.seo.fullHead'
  | 'author.node.seo.language'
  | 'author.node.seo.metaDesc'
  | 'author.node.seo.metaRobotsNofollow'
  | 'author.node.seo.metaRobotsNoindex'
  | 'author.node.seo.opengraphDescription'
  | 'author.node.seo.opengraphTitle'
  | 'author.node.seo.region'
  | 'author.node.seo.title'
  | 'author.node.seo.twitterDescription'
  | 'author.node.seo.twitterTitle'
  | 'author.node.slug'
  | 'author.node.uri'
  | 'author.node.url'
  | 'author.node.username'
  | 'caption'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'commentCount'
  | 'commentStatus'
  | 'comments.nodes'
  | 'comments.nodes.agent'
  | 'comments.nodes.approved'
  | 'comments.nodes.authorIp'
  | 'comments.nodes.children'
  | 'comments.nodes.children.children'
  | 'comments.nodes.children.id'
  | 'comments.nodes.content'
  | 'comments.nodes.databaseId'
  | 'comments.nodes.date'
  | 'comments.nodes.dateGmt'
  | 'comments.nodes.id'
  | 'comments.nodes.internal.content'
  | 'comments.nodes.internal.contentDigest'
  | 'comments.nodes.internal.contentFilePath'
  | 'comments.nodes.internal.description'
  | 'comments.nodes.internal.fieldOwners'
  | 'comments.nodes.internal.ignoreType'
  | 'comments.nodes.internal.mediaType'
  | 'comments.nodes.internal.owner'
  | 'comments.nodes.internal.type'
  | 'comments.nodes.karma'
  | 'comments.nodes.nodeType'
  | 'comments.nodes.parentDatabaseId'
  | 'comments.nodes.parentId'
  | 'comments.nodes.parent.children'
  | 'comments.nodes.parent.id'
  | 'comments.nodes.replies.nodes'
  | 'comments.nodes.type'
  | 'contentTypeName'
  | 'contentType.node.archivePath'
  | 'contentType.node.canExport'
  | 'contentType.node.children'
  | 'contentType.node.children.children'
  | 'contentType.node.children.id'
  | 'contentType.node.connectedTaxonomies.nodes'
  | 'contentType.node.contentNodes.nodes'
  | 'contentType.node.deleteWithUser'
  | 'contentType.node.description'
  | 'contentType.node.excludeFromSearch'
  | 'contentType.node.graphqlPluralName'
  | 'contentType.node.graphqlSingleName'
  | 'contentType.node.hasArchive'
  | 'contentType.node.hierarchical'
  | 'contentType.node.id'
  | 'contentType.node.internal.content'
  | 'contentType.node.internal.contentDigest'
  | 'contentType.node.internal.contentFilePath'
  | 'contentType.node.internal.description'
  | 'contentType.node.internal.fieldOwners'
  | 'contentType.node.internal.ignoreType'
  | 'contentType.node.internal.mediaType'
  | 'contentType.node.internal.owner'
  | 'contentType.node.internal.type'
  | 'contentType.node.isContentNode'
  | 'contentType.node.isFrontPage'
  | 'contentType.node.isPostsPage'
  | 'contentType.node.isTermNode'
  | 'contentType.node.label'
  | 'contentType.node.labels.addNew'
  | 'contentType.node.labels.addNewItem'
  | 'contentType.node.labels.allItems'
  | 'contentType.node.labels.archives'
  | 'contentType.node.labels.attributes'
  | 'contentType.node.labels.editItem'
  | 'contentType.node.labels.featuredImage'
  | 'contentType.node.labels.filterItemsList'
  | 'contentType.node.labels.insertIntoItem'
  | 'contentType.node.labels.itemsList'
  | 'contentType.node.labels.itemsListNavigation'
  | 'contentType.node.labels.menuName'
  | 'contentType.node.labels.name'
  | 'contentType.node.labels.newItem'
  | 'contentType.node.labels.notFound'
  | 'contentType.node.labels.notFoundInTrash'
  | 'contentType.node.labels.parentItemColon'
  | 'contentType.node.labels.removeFeaturedImage'
  | 'contentType.node.labels.searchItems'
  | 'contentType.node.labels.setFeaturedImage'
  | 'contentType.node.labels.singularName'
  | 'contentType.node.labels.uploadedToThisItem'
  | 'contentType.node.labels.useFeaturedImage'
  | 'contentType.node.labels.viewItem'
  | 'contentType.node.labels.viewItems'
  | 'contentType.node.menuIcon'
  | 'contentType.node.menuPosition'
  | 'contentType.node.name'
  | 'contentType.node.nodeType'
  | 'contentType.node.parent.children'
  | 'contentType.node.parent.id'
  | 'contentType.node.public'
  | 'contentType.node.publiclyQueryable'
  | 'contentType.node.restBase'
  | 'contentType.node.restControllerClass'
  | 'contentType.node.showInAdminBar'
  | 'contentType.node.showInGraphql'
  | 'contentType.node.showInMenu'
  | 'contentType.node.showInNavMenus'
  | 'contentType.node.showInRest'
  | 'contentType.node.showUi'
  | 'contentType.node.uri'
  | 'databaseId'
  | 'date'
  | 'dateGmt'
  | 'description'
  | 'desiredSlug'
  | 'enclosure'
  | 'fileSize'
  | 'filename'
  | 'filesize'
  | 'gatsbyImage'
  | 'guid'
  | 'height'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'lastEditedBy.node.authorProfile.fieldGroupName'
  | 'lastEditedBy.node.avatar.default'
  | 'lastEditedBy.node.avatar.extraAttr'
  | 'lastEditedBy.node.avatar.forceDefault'
  | 'lastEditedBy.node.avatar.foundAvatar'
  | 'lastEditedBy.node.avatar.height'
  | 'lastEditedBy.node.avatar.rating'
  | 'lastEditedBy.node.avatar.scheme'
  | 'lastEditedBy.node.avatar.size'
  | 'lastEditedBy.node.avatar.url'
  | 'lastEditedBy.node.avatar.width'
  | 'lastEditedBy.node.capKey'
  | 'lastEditedBy.node.capabilities'
  | 'lastEditedBy.node.children'
  | 'lastEditedBy.node.children.children'
  | 'lastEditedBy.node.children.id'
  | 'lastEditedBy.node.comments.nodes'
  | 'lastEditedBy.node.databaseId'
  | 'lastEditedBy.node.description'
  | 'lastEditedBy.node.email'
  | 'lastEditedBy.node.extraCapabilities'
  | 'lastEditedBy.node.firstName'
  | 'lastEditedBy.node.id'
  | 'lastEditedBy.node.internal.content'
  | 'lastEditedBy.node.internal.contentDigest'
  | 'lastEditedBy.node.internal.contentFilePath'
  | 'lastEditedBy.node.internal.description'
  | 'lastEditedBy.node.internal.fieldOwners'
  | 'lastEditedBy.node.internal.ignoreType'
  | 'lastEditedBy.node.internal.mediaType'
  | 'lastEditedBy.node.internal.owner'
  | 'lastEditedBy.node.internal.type'
  | 'lastEditedBy.node.isContentNode'
  | 'lastEditedBy.node.isTermNode'
  | 'lastEditedBy.node.lastName'
  | 'lastEditedBy.node.locale'
  | 'lastEditedBy.node.name'
  | 'lastEditedBy.node.nicename'
  | 'lastEditedBy.node.nickname'
  | 'lastEditedBy.node.nodeType'
  | 'lastEditedBy.node.pages.nodes'
  | 'lastEditedBy.node.parent.children'
  | 'lastEditedBy.node.parent.id'
  | 'lastEditedBy.node.posts.nodes'
  | 'lastEditedBy.node.registeredDate'
  | 'lastEditedBy.node.roles.nodes'
  | 'lastEditedBy.node.seo.breadcrumbTitle'
  | 'lastEditedBy.node.seo.canonical'
  | 'lastEditedBy.node.seo.fullHead'
  | 'lastEditedBy.node.seo.language'
  | 'lastEditedBy.node.seo.metaDesc'
  | 'lastEditedBy.node.seo.metaRobotsNofollow'
  | 'lastEditedBy.node.seo.metaRobotsNoindex'
  | 'lastEditedBy.node.seo.opengraphDescription'
  | 'lastEditedBy.node.seo.opengraphTitle'
  | 'lastEditedBy.node.seo.region'
  | 'lastEditedBy.node.seo.title'
  | 'lastEditedBy.node.seo.twitterDescription'
  | 'lastEditedBy.node.seo.twitterTitle'
  | 'lastEditedBy.node.slug'
  | 'lastEditedBy.node.uri'
  | 'lastEditedBy.node.url'
  | 'lastEditedBy.node.username'
  | 'link'
  | 'localFile.absolutePath'
  | 'localFile.accessTime'
  | 'localFile.atime'
  | 'localFile.atimeMs'
  | 'localFile.base'
  | 'localFile.birthTime'
  | 'localFile.birthtime'
  | 'localFile.birthtimeMs'
  | 'localFile.blksize'
  | 'localFile.blocks'
  | 'localFile.changeTime'
  | 'localFile.childImageSharp.children'
  | 'localFile.childImageSharp.children.children'
  | 'localFile.childImageSharp.children.id'
  | 'localFile.childImageSharp.fixed.aspectRatio'
  | 'localFile.childImageSharp.fixed.base64'
  | 'localFile.childImageSharp.fixed.height'
  | 'localFile.childImageSharp.fixed.originalName'
  | 'localFile.childImageSharp.fixed.src'
  | 'localFile.childImageSharp.fixed.srcSet'
  | 'localFile.childImageSharp.fixed.srcSetWebp'
  | 'localFile.childImageSharp.fixed.srcWebp'
  | 'localFile.childImageSharp.fixed.tracedSVG'
  | 'localFile.childImageSharp.fixed.width'
  | 'localFile.childImageSharp.fluid.aspectRatio'
  | 'localFile.childImageSharp.fluid.base64'
  | 'localFile.childImageSharp.fluid.originalImg'
  | 'localFile.childImageSharp.fluid.originalName'
  | 'localFile.childImageSharp.fluid.presentationHeight'
  | 'localFile.childImageSharp.fluid.presentationWidth'
  | 'localFile.childImageSharp.fluid.sizes'
  | 'localFile.childImageSharp.fluid.src'
  | 'localFile.childImageSharp.fluid.srcSet'
  | 'localFile.childImageSharp.fluid.srcSetWebp'
  | 'localFile.childImageSharp.fluid.srcWebp'
  | 'localFile.childImageSharp.fluid.tracedSVG'
  | 'localFile.childImageSharp.gatsbyImageData'
  | 'localFile.childImageSharp.id'
  | 'localFile.childImageSharp.internal.content'
  | 'localFile.childImageSharp.internal.contentDigest'
  | 'localFile.childImageSharp.internal.contentFilePath'
  | 'localFile.childImageSharp.internal.description'
  | 'localFile.childImageSharp.internal.fieldOwners'
  | 'localFile.childImageSharp.internal.ignoreType'
  | 'localFile.childImageSharp.internal.mediaType'
  | 'localFile.childImageSharp.internal.owner'
  | 'localFile.childImageSharp.internal.type'
  | 'localFile.childImageSharp.original.height'
  | 'localFile.childImageSharp.original.src'
  | 'localFile.childImageSharp.original.width'
  | 'localFile.childImageSharp.parent.children'
  | 'localFile.childImageSharp.parent.id'
  | 'localFile.childImageSharp.resize.aspectRatio'
  | 'localFile.childImageSharp.resize.height'
  | 'localFile.childImageSharp.resize.originalName'
  | 'localFile.childImageSharp.resize.src'
  | 'localFile.childImageSharp.resize.tracedSVG'
  | 'localFile.childImageSharp.resize.width'
  | 'localFile.children'
  | 'localFile.childrenImageSharp'
  | 'localFile.childrenImageSharp.children'
  | 'localFile.childrenImageSharp.children.children'
  | 'localFile.childrenImageSharp.children.id'
  | 'localFile.childrenImageSharp.fixed.aspectRatio'
  | 'localFile.childrenImageSharp.fixed.base64'
  | 'localFile.childrenImageSharp.fixed.height'
  | 'localFile.childrenImageSharp.fixed.originalName'
  | 'localFile.childrenImageSharp.fixed.src'
  | 'localFile.childrenImageSharp.fixed.srcSet'
  | 'localFile.childrenImageSharp.fixed.srcSetWebp'
  | 'localFile.childrenImageSharp.fixed.srcWebp'
  | 'localFile.childrenImageSharp.fixed.tracedSVG'
  | 'localFile.childrenImageSharp.fixed.width'
  | 'localFile.childrenImageSharp.fluid.aspectRatio'
  | 'localFile.childrenImageSharp.fluid.base64'
  | 'localFile.childrenImageSharp.fluid.originalImg'
  | 'localFile.childrenImageSharp.fluid.originalName'
  | 'localFile.childrenImageSharp.fluid.presentationHeight'
  | 'localFile.childrenImageSharp.fluid.presentationWidth'
  | 'localFile.childrenImageSharp.fluid.sizes'
  | 'localFile.childrenImageSharp.fluid.src'
  | 'localFile.childrenImageSharp.fluid.srcSet'
  | 'localFile.childrenImageSharp.fluid.srcSetWebp'
  | 'localFile.childrenImageSharp.fluid.srcWebp'
  | 'localFile.childrenImageSharp.fluid.tracedSVG'
  | 'localFile.childrenImageSharp.gatsbyImageData'
  | 'localFile.childrenImageSharp.id'
  | 'localFile.childrenImageSharp.internal.content'
  | 'localFile.childrenImageSharp.internal.contentDigest'
  | 'localFile.childrenImageSharp.internal.contentFilePath'
  | 'localFile.childrenImageSharp.internal.description'
  | 'localFile.childrenImageSharp.internal.fieldOwners'
  | 'localFile.childrenImageSharp.internal.ignoreType'
  | 'localFile.childrenImageSharp.internal.mediaType'
  | 'localFile.childrenImageSharp.internal.owner'
  | 'localFile.childrenImageSharp.internal.type'
  | 'localFile.childrenImageSharp.original.height'
  | 'localFile.childrenImageSharp.original.src'
  | 'localFile.childrenImageSharp.original.width'
  | 'localFile.childrenImageSharp.parent.children'
  | 'localFile.childrenImageSharp.parent.id'
  | 'localFile.childrenImageSharp.resize.aspectRatio'
  | 'localFile.childrenImageSharp.resize.height'
  | 'localFile.childrenImageSharp.resize.originalName'
  | 'localFile.childrenImageSharp.resize.src'
  | 'localFile.childrenImageSharp.resize.tracedSVG'
  | 'localFile.childrenImageSharp.resize.width'
  | 'localFile.children.children'
  | 'localFile.children.children.children'
  | 'localFile.children.children.id'
  | 'localFile.children.id'
  | 'localFile.children.internal.content'
  | 'localFile.children.internal.contentDigest'
  | 'localFile.children.internal.contentFilePath'
  | 'localFile.children.internal.description'
  | 'localFile.children.internal.fieldOwners'
  | 'localFile.children.internal.ignoreType'
  | 'localFile.children.internal.mediaType'
  | 'localFile.children.internal.owner'
  | 'localFile.children.internal.type'
  | 'localFile.children.parent.children'
  | 'localFile.children.parent.id'
  | 'localFile.ctime'
  | 'localFile.ctimeMs'
  | 'localFile.dev'
  | 'localFile.dir'
  | 'localFile.ext'
  | 'localFile.extension'
  | 'localFile.gid'
  | 'localFile.hash'
  | 'localFile.id'
  | 'localFile.ino'
  | 'localFile.internal.content'
  | 'localFile.internal.contentDigest'
  | 'localFile.internal.contentFilePath'
  | 'localFile.internal.description'
  | 'localFile.internal.fieldOwners'
  | 'localFile.internal.ignoreType'
  | 'localFile.internal.mediaType'
  | 'localFile.internal.owner'
  | 'localFile.internal.type'
  | 'localFile.mode'
  | 'localFile.modifiedTime'
  | 'localFile.mtime'
  | 'localFile.mtimeMs'
  | 'localFile.name'
  | 'localFile.nlink'
  | 'localFile.parent.children'
  | 'localFile.parent.children.children'
  | 'localFile.parent.children.id'
  | 'localFile.parent.id'
  | 'localFile.parent.internal.content'
  | 'localFile.parent.internal.contentDigest'
  | 'localFile.parent.internal.contentFilePath'
  | 'localFile.parent.internal.description'
  | 'localFile.parent.internal.fieldOwners'
  | 'localFile.parent.internal.ignoreType'
  | 'localFile.parent.internal.mediaType'
  | 'localFile.parent.internal.owner'
  | 'localFile.parent.internal.type'
  | 'localFile.parent.parent.children'
  | 'localFile.parent.parent.id'
  | 'localFile.prettySize'
  | 'localFile.publicURL'
  | 'localFile.rdev'
  | 'localFile.relativeDirectory'
  | 'localFile.relativePath'
  | 'localFile.root'
  | 'localFile.size'
  | 'localFile.sourceInstanceName'
  | 'localFile.uid'
  | 'mediaDetails.file'
  | 'mediaDetails.height'
  | 'mediaDetails.meta.aperture'
  | 'mediaDetails.meta.camera'
  | 'mediaDetails.meta.caption'
  | 'mediaDetails.meta.copyright'
  | 'mediaDetails.meta.createdTimestamp'
  | 'mediaDetails.meta.credit'
  | 'mediaDetails.meta.focalLength'
  | 'mediaDetails.meta.iso'
  | 'mediaDetails.meta.keywords'
  | 'mediaDetails.meta.orientation'
  | 'mediaDetails.meta.shutterSpeed'
  | 'mediaDetails.meta.title'
  | 'mediaDetails.sizes'
  | 'mediaDetails.sizes.file'
  | 'mediaDetails.sizes.fileSize'
  | 'mediaDetails.sizes.height'
  | 'mediaDetails.sizes.mimeType'
  | 'mediaDetails.sizes.name'
  | 'mediaDetails.sizes.sourceUrl'
  | 'mediaDetails.sizes.width'
  | 'mediaDetails.width'
  | 'mediaItemUrl'
  | 'mediaType'
  | 'mimeType'
  | 'modified'
  | 'modifiedGmt'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'publicUrl'
  | 'remoteFile.absolutePath'
  | 'remoteFile.accessTime'
  | 'remoteFile.atime'
  | 'remoteFile.atimeMs'
  | 'remoteFile.base'
  | 'remoteFile.birthTime'
  | 'remoteFile.birthtime'
  | 'remoteFile.birthtimeMs'
  | 'remoteFile.blksize'
  | 'remoteFile.blocks'
  | 'remoteFile.changeTime'
  | 'remoteFile.childImageSharp.children'
  | 'remoteFile.childImageSharp.children.children'
  | 'remoteFile.childImageSharp.children.id'
  | 'remoteFile.childImageSharp.fixed.aspectRatio'
  | 'remoteFile.childImageSharp.fixed.base64'
  | 'remoteFile.childImageSharp.fixed.height'
  | 'remoteFile.childImageSharp.fixed.originalName'
  | 'remoteFile.childImageSharp.fixed.src'
  | 'remoteFile.childImageSharp.fixed.srcSet'
  | 'remoteFile.childImageSharp.fixed.srcSetWebp'
  | 'remoteFile.childImageSharp.fixed.srcWebp'
  | 'remoteFile.childImageSharp.fixed.tracedSVG'
  | 'remoteFile.childImageSharp.fixed.width'
  | 'remoteFile.childImageSharp.fluid.aspectRatio'
  | 'remoteFile.childImageSharp.fluid.base64'
  | 'remoteFile.childImageSharp.fluid.originalImg'
  | 'remoteFile.childImageSharp.fluid.originalName'
  | 'remoteFile.childImageSharp.fluid.presentationHeight'
  | 'remoteFile.childImageSharp.fluid.presentationWidth'
  | 'remoteFile.childImageSharp.fluid.sizes'
  | 'remoteFile.childImageSharp.fluid.src'
  | 'remoteFile.childImageSharp.fluid.srcSet'
  | 'remoteFile.childImageSharp.fluid.srcSetWebp'
  | 'remoteFile.childImageSharp.fluid.srcWebp'
  | 'remoteFile.childImageSharp.fluid.tracedSVG'
  | 'remoteFile.childImageSharp.gatsbyImageData'
  | 'remoteFile.childImageSharp.id'
  | 'remoteFile.childImageSharp.internal.content'
  | 'remoteFile.childImageSharp.internal.contentDigest'
  | 'remoteFile.childImageSharp.internal.contentFilePath'
  | 'remoteFile.childImageSharp.internal.description'
  | 'remoteFile.childImageSharp.internal.fieldOwners'
  | 'remoteFile.childImageSharp.internal.ignoreType'
  | 'remoteFile.childImageSharp.internal.mediaType'
  | 'remoteFile.childImageSharp.internal.owner'
  | 'remoteFile.childImageSharp.internal.type'
  | 'remoteFile.childImageSharp.original.height'
  | 'remoteFile.childImageSharp.original.src'
  | 'remoteFile.childImageSharp.original.width'
  | 'remoteFile.childImageSharp.parent.children'
  | 'remoteFile.childImageSharp.parent.id'
  | 'remoteFile.childImageSharp.resize.aspectRatio'
  | 'remoteFile.childImageSharp.resize.height'
  | 'remoteFile.childImageSharp.resize.originalName'
  | 'remoteFile.childImageSharp.resize.src'
  | 'remoteFile.childImageSharp.resize.tracedSVG'
  | 'remoteFile.childImageSharp.resize.width'
  | 'remoteFile.children'
  | 'remoteFile.childrenImageSharp'
  | 'remoteFile.childrenImageSharp.children'
  | 'remoteFile.childrenImageSharp.children.children'
  | 'remoteFile.childrenImageSharp.children.id'
  | 'remoteFile.childrenImageSharp.fixed.aspectRatio'
  | 'remoteFile.childrenImageSharp.fixed.base64'
  | 'remoteFile.childrenImageSharp.fixed.height'
  | 'remoteFile.childrenImageSharp.fixed.originalName'
  | 'remoteFile.childrenImageSharp.fixed.src'
  | 'remoteFile.childrenImageSharp.fixed.srcSet'
  | 'remoteFile.childrenImageSharp.fixed.srcSetWebp'
  | 'remoteFile.childrenImageSharp.fixed.srcWebp'
  | 'remoteFile.childrenImageSharp.fixed.tracedSVG'
  | 'remoteFile.childrenImageSharp.fixed.width'
  | 'remoteFile.childrenImageSharp.fluid.aspectRatio'
  | 'remoteFile.childrenImageSharp.fluid.base64'
  | 'remoteFile.childrenImageSharp.fluid.originalImg'
  | 'remoteFile.childrenImageSharp.fluid.originalName'
  | 'remoteFile.childrenImageSharp.fluid.presentationHeight'
  | 'remoteFile.childrenImageSharp.fluid.presentationWidth'
  | 'remoteFile.childrenImageSharp.fluid.sizes'
  | 'remoteFile.childrenImageSharp.fluid.src'
  | 'remoteFile.childrenImageSharp.fluid.srcSet'
  | 'remoteFile.childrenImageSharp.fluid.srcSetWebp'
  | 'remoteFile.childrenImageSharp.fluid.srcWebp'
  | 'remoteFile.childrenImageSharp.fluid.tracedSVG'
  | 'remoteFile.childrenImageSharp.gatsbyImageData'
  | 'remoteFile.childrenImageSharp.id'
  | 'remoteFile.childrenImageSharp.internal.content'
  | 'remoteFile.childrenImageSharp.internal.contentDigest'
  | 'remoteFile.childrenImageSharp.internal.contentFilePath'
  | 'remoteFile.childrenImageSharp.internal.description'
  | 'remoteFile.childrenImageSharp.internal.fieldOwners'
  | 'remoteFile.childrenImageSharp.internal.ignoreType'
  | 'remoteFile.childrenImageSharp.internal.mediaType'
  | 'remoteFile.childrenImageSharp.internal.owner'
  | 'remoteFile.childrenImageSharp.internal.type'
  | 'remoteFile.childrenImageSharp.original.height'
  | 'remoteFile.childrenImageSharp.original.src'
  | 'remoteFile.childrenImageSharp.original.width'
  | 'remoteFile.childrenImageSharp.parent.children'
  | 'remoteFile.childrenImageSharp.parent.id'
  | 'remoteFile.childrenImageSharp.resize.aspectRatio'
  | 'remoteFile.childrenImageSharp.resize.height'
  | 'remoteFile.childrenImageSharp.resize.originalName'
  | 'remoteFile.childrenImageSharp.resize.src'
  | 'remoteFile.childrenImageSharp.resize.tracedSVG'
  | 'remoteFile.childrenImageSharp.resize.width'
  | 'remoteFile.children.children'
  | 'remoteFile.children.children.children'
  | 'remoteFile.children.children.id'
  | 'remoteFile.children.id'
  | 'remoteFile.children.internal.content'
  | 'remoteFile.children.internal.contentDigest'
  | 'remoteFile.children.internal.contentFilePath'
  | 'remoteFile.children.internal.description'
  | 'remoteFile.children.internal.fieldOwners'
  | 'remoteFile.children.internal.ignoreType'
  | 'remoteFile.children.internal.mediaType'
  | 'remoteFile.children.internal.owner'
  | 'remoteFile.children.internal.type'
  | 'remoteFile.children.parent.children'
  | 'remoteFile.children.parent.id'
  | 'remoteFile.ctime'
  | 'remoteFile.ctimeMs'
  | 'remoteFile.dev'
  | 'remoteFile.dir'
  | 'remoteFile.ext'
  | 'remoteFile.extension'
  | 'remoteFile.gid'
  | 'remoteFile.hash'
  | 'remoteFile.id'
  | 'remoteFile.ino'
  | 'remoteFile.internal.content'
  | 'remoteFile.internal.contentDigest'
  | 'remoteFile.internal.contentFilePath'
  | 'remoteFile.internal.description'
  | 'remoteFile.internal.fieldOwners'
  | 'remoteFile.internal.ignoreType'
  | 'remoteFile.internal.mediaType'
  | 'remoteFile.internal.owner'
  | 'remoteFile.internal.type'
  | 'remoteFile.mode'
  | 'remoteFile.modifiedTime'
  | 'remoteFile.mtime'
  | 'remoteFile.mtimeMs'
  | 'remoteFile.name'
  | 'remoteFile.nlink'
  | 'remoteFile.parent.children'
  | 'remoteFile.parent.children.children'
  | 'remoteFile.parent.children.id'
  | 'remoteFile.parent.id'
  | 'remoteFile.parent.internal.content'
  | 'remoteFile.parent.internal.contentDigest'
  | 'remoteFile.parent.internal.contentFilePath'
  | 'remoteFile.parent.internal.description'
  | 'remoteFile.parent.internal.fieldOwners'
  | 'remoteFile.parent.internal.ignoreType'
  | 'remoteFile.parent.internal.mediaType'
  | 'remoteFile.parent.internal.owner'
  | 'remoteFile.parent.internal.type'
  | 'remoteFile.parent.parent.children'
  | 'remoteFile.parent.parent.id'
  | 'remoteFile.prettySize'
  | 'remoteFile.publicURL'
  | 'remoteFile.rdev'
  | 'remoteFile.relativeDirectory'
  | 'remoteFile.relativePath'
  | 'remoteFile.root'
  | 'remoteFile.size'
  | 'remoteFile.sourceInstanceName'
  | 'remoteFile.uid'
  | 'resize.height'
  | 'resize.src'
  | 'resize.width'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.readingTime'
  | 'seo.schema.articleType'
  | 'seo.schema.pageType'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'sizes'
  | 'slug'
  | 'sourceUrl'
  | 'srcSet'
  | 'status'
  | 'template.templateName'
  | 'title'
  | 'uri'
  | 'width'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentTypeName'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.date'
  | 'wpChildren.nodes.dateGmt'
  | 'wpChildren.nodes.desiredSlug'
  | 'wpChildren.nodes.enclosure'
  | 'wpChildren.nodes.guid'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.modified'
  | 'wpChildren.nodes.modifiedGmt'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.readingTime'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.status'
  | 'wpChildren.nodes.template.templateName'
  | 'wpChildren.nodes.uri'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentTypeName'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.date'
  | 'wpParent.node.dateGmt'
  | 'wpParent.node.desiredSlug'
  | 'wpParent.node.enclosure'
  | 'wpParent.node.guid'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.modified'
  | 'wpParent.node.modifiedGmt'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.readingTime'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.status'
  | 'wpParent.node.template.templateName'
  | 'wpParent.node.uri';

type tsMediaItemFilterInput = {
  readonly altText: InputMaybe<StringQueryOperatorInput>;
  readonly ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  readonly author: InputMaybe<tsNodeWithAuthorToUserConnectionEdgeFilterInput>;
  readonly authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly authorId: InputMaybe<IDQueryOperatorInput>;
  readonly caption: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly commentCount: InputMaybe<IntQueryOperatorInput>;
  readonly commentStatus: InputMaybe<StringQueryOperatorInput>;
  readonly comments: InputMaybe<tsMediaItemToCommentConnectionFilterInput>;
  readonly contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
  readonly enclosure: InputMaybe<StringQueryOperatorInput>;
  readonly fileSize: InputMaybe<IntQueryOperatorInput>;
  readonly filename: InputMaybe<StringQueryOperatorInput>;
  readonly filesize: InputMaybe<IntQueryOperatorInput>;
  readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly guid: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly mediaDetails: InputMaybe<tsMediaDetailsFilterInput>;
  readonly mediaItemUrl: InputMaybe<StringQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
  readonly remoteFile: InputMaybe<FileFilterInput>;
  readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
  readonly seo: InputMaybe<tsPostTypeSEOFilterInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly sourceUrl: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly template: InputMaybe<tsContentTemplateFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};

type tsMediaItemFilterListInput = {
  readonly elemMatch: InputMaybe<tsMediaItemFilterInput>;
};

type tsMediaItemGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsMediaItemEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsMediaItemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsMediaItem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsMediaItemGroupConnection_distinctArgs = {
  field: tsMediaItemFieldsEnum;
};


type tsMediaItemGroupConnection_groupArgs = {
  field: tsMediaItemFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsMediaItemGroupConnection_maxArgs = {
  field: tsMediaItemFieldsEnum;
};


type tsMediaItemGroupConnection_minArgs = {
  field: tsMediaItemFieldsEnum;
};


type tsMediaItemGroupConnection_sumArgs = {
  field: tsMediaItemFieldsEnum;
};

/** Meta connected to a MediaItem */
type tsMediaItemMeta = {
  /** Aperture measurement of the media item. */
  readonly aperture: Maybe<Scalars['Float']>;
  /** Information about the camera used to create the media item. */
  readonly camera: Maybe<Scalars['String']>;
  /** The text string description associated with the media item. */
  readonly caption: Maybe<Scalars['String']>;
  /** Copyright information associated with the media item. */
  readonly copyright: Maybe<Scalars['String']>;
  /** The date/time when the media was created. */
  readonly createdTimestamp: Maybe<Scalars['Int']>;
  /** The original creator of the media item. */
  readonly credit: Maybe<Scalars['String']>;
  /** The focal length value of the media item. */
  readonly focalLength: Maybe<Scalars['Float']>;
  /** The ISO (International Organization for Standardization) value of the media item. */
  readonly iso: Maybe<Scalars['Int']>;
  /** List of keywords used to describe or identfy the media item. */
  readonly keywords: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** The vertical or horizontal aspect of the media item. */
  readonly orientation: Maybe<Scalars['String']>;
  /** The shutter speed information of the media item. */
  readonly shutterSpeed: Maybe<Scalars['Float']>;
  /** A useful title for the media item. */
  readonly title: Maybe<Scalars['String']>;
};

type tsMediaItemMetaFilterInput = {
  readonly aperture: InputMaybe<FloatQueryOperatorInput>;
  readonly camera: InputMaybe<StringQueryOperatorInput>;
  readonly caption: InputMaybe<StringQueryOperatorInput>;
  readonly copyright: InputMaybe<StringQueryOperatorInput>;
  readonly createdTimestamp: InputMaybe<IntQueryOperatorInput>;
  readonly credit: InputMaybe<StringQueryOperatorInput>;
  readonly focalLength: InputMaybe<FloatQueryOperatorInput>;
  readonly iso: InputMaybe<IntQueryOperatorInput>;
  readonly keywords: InputMaybe<StringQueryOperatorInput>;
  readonly orientation: InputMaybe<StringQueryOperatorInput>;
  readonly shutterSpeed: InputMaybe<FloatQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type tsMediaItemSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsMediaItemFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the mediaItem type and the Comment type */
type tsMediaItemToCommentConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsComment>>>;
};

type tsMediaItemToCommentConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCommentFilterListInput>;
};

/** Details of an available size for a media item */
type tsMediaSize = {
  /** The filename of the referenced size */
  readonly file: Maybe<Scalars['String']>;
  /** The filesize of the resource */
  readonly fileSize: Maybe<Scalars['Int']>;
  /** The height of the referenced size */
  readonly height: Maybe<Scalars['String']>;
  /** The mime type of the referenced size */
  readonly mimeType: Maybe<Scalars['String']>;
  /** The referenced size name */
  readonly name: Maybe<Scalars['String']>;
  /** The url of the referenced size */
  readonly sourceUrl: Maybe<Scalars['String']>;
  /** The width of the referenced size */
  readonly width: Maybe<Scalars['String']>;
};

type tsMediaSizeFilterInput = {
  readonly file: InputMaybe<StringQueryOperatorInput>;
  readonly fileSize: InputMaybe<IntQueryOperatorInput>;
  readonly height: InputMaybe<StringQueryOperatorInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly sourceUrl: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<StringQueryOperatorInput>;
};

type tsMediaSizeFilterListInput = {
  readonly elemMatch: InputMaybe<tsMediaSizeFilterInput>;
};

/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */
type tsMenu = Node & tsDatabaseIdentifier & tsNode & {
  readonly children: ReadonlyArray<Node>;
  /** The number of items in the menu */
  readonly count: Maybe<Scalars['Int']>;
  /** The unique identifier stored in the database */
  readonly databaseId: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** The locations a menu is assigned to */
  readonly locations: Maybe<ReadonlyArray<Maybe<tsMenuLocationEnum>>>;
  /** Connection between the Menu type and the MenuItem type */
  readonly menuItems: Maybe<tsMenuToMenuItemConnection>;
  /** Display name of the menu. Equivalent to WP_Term-&gt;name. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** The url friendly name of the menu. Equivalent to WP_Term-&gt;slug */
  readonly slug: Maybe<Scalars['String']>;
};

type tsMenuConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsMenuEdge>;
  readonly group: ReadonlyArray<tsMenuGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsMenu>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsMenuConnection_distinctArgs = {
  field: tsMenuFieldsEnum;
};


type tsMenuConnection_groupArgs = {
  field: tsMenuFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsMenuConnection_maxArgs = {
  field: tsMenuFieldsEnum;
};


type tsMenuConnection_minArgs = {
  field: tsMenuFieldsEnum;
};


type tsMenuConnection_sumArgs = {
  field: tsMenuFieldsEnum;
};

type tsMenuEdge = {
  readonly next: Maybe<tsMenu>;
  readonly node: tsMenu;
  readonly previous: Maybe<tsMenu>;
};

type tsMenuFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'count'
  | 'databaseId'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'locations'
  | 'menuItems.nodes'
  | 'menuItems.nodes.childItems.nodes'
  | 'menuItems.nodes.children'
  | 'menuItems.nodes.children.children'
  | 'menuItems.nodes.children.id'
  | 'menuItems.nodes.cssClasses'
  | 'menuItems.nodes.databaseId'
  | 'menuItems.nodes.description'
  | 'menuItems.nodes.id'
  | 'menuItems.nodes.internal.content'
  | 'menuItems.nodes.internal.contentDigest'
  | 'menuItems.nodes.internal.contentFilePath'
  | 'menuItems.nodes.internal.description'
  | 'menuItems.nodes.internal.fieldOwners'
  | 'menuItems.nodes.internal.ignoreType'
  | 'menuItems.nodes.internal.mediaType'
  | 'menuItems.nodes.internal.owner'
  | 'menuItems.nodes.internal.type'
  | 'menuItems.nodes.label'
  | 'menuItems.nodes.linkRelationship'
  | 'menuItems.nodes.locations'
  | 'menuItems.nodes.nodeType'
  | 'menuItems.nodes.order'
  | 'menuItems.nodes.parentDatabaseId'
  | 'menuItems.nodes.parentId'
  | 'menuItems.nodes.parent.children'
  | 'menuItems.nodes.parent.id'
  | 'menuItems.nodes.path'
  | 'menuItems.nodes.target'
  | 'menuItems.nodes.title'
  | 'menuItems.nodes.uri'
  | 'menuItems.nodes.url'
  | 'name'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'slug';

type tsMenuFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locations: InputMaybe<tsMenuLocationEnumQueryOperatorInput>;
  readonly menuItems: InputMaybe<tsMenuToMenuItemConnectionFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
};

type tsMenuGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsMenuEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsMenuGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsMenu>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsMenuGroupConnection_distinctArgs = {
  field: tsMenuFieldsEnum;
};


type tsMenuGroupConnection_groupArgs = {
  field: tsMenuFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsMenuGroupConnection_maxArgs = {
  field: tsMenuFieldsEnum;
};


type tsMenuGroupConnection_minArgs = {
  field: tsMenuFieldsEnum;
};


type tsMenuGroupConnection_sumArgs = {
  field: tsMenuFieldsEnum;
};

/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
type tsMenuItem = Node & tsDatabaseIdentifier & tsNode & {
  /** Connection between the MenuItem type and the MenuItem type */
  readonly childItems: Maybe<tsMenuItemToMenuItemConnection>;
  readonly children: ReadonlyArray<Node>;
  /** Connection from MenuItem to it&#039;s connected node */
  readonly connectedNode: Maybe<tsMenuItemToMenuItemLinkableConnectionEdge>;
  /** Class attribute for the menu item link */
  readonly cssClasses: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** The unique identifier stored in the database */
  readonly databaseId: Scalars['Int'];
  /** Description of the menu item. */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Label or title of the menu item. */
  readonly label: Maybe<Scalars['String']>;
  /** Link relationship (XFN) of the menu item. */
  readonly linkRelationship: Maybe<Scalars['String']>;
  /** The locations the menu item&#039;s Menu is assigned to */
  readonly locations: Maybe<ReadonlyArray<Maybe<tsMenuLocationEnum>>>;
  /** The Menu a MenuItem is part of */
  readonly menu: Maybe<tsMenuItemToMenuConnectionEdge>;
  readonly nodeType: Maybe<Scalars['String']>;
  /** Menu item order */
  readonly order: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  /** The database id of the parent menu item or null if it is the root */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent nav menu item object. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** Path for the resource. Relative path for internal resources. Absolute path for external resources. */
  readonly path: Maybe<Scalars['String']>;
  /** Target attribute for the menu item link. */
  readonly target: Maybe<Scalars['String']>;
  /** Title attribute for the menu item link */
  readonly title: Maybe<Scalars['String']>;
  /** The uri of the resource the menu item links to */
  readonly uri: Maybe<Scalars['String']>;
  /** URL or destination of the menu item. */
  readonly url: Maybe<Scalars['String']>;
};

type tsMenuItemConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsMenuItemEdge>;
  readonly group: ReadonlyArray<tsMenuItemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsMenuItem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsMenuItemConnection_distinctArgs = {
  field: tsMenuItemFieldsEnum;
};


type tsMenuItemConnection_groupArgs = {
  field: tsMenuItemFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsMenuItemConnection_maxArgs = {
  field: tsMenuItemFieldsEnum;
};


type tsMenuItemConnection_minArgs = {
  field: tsMenuItemFieldsEnum;
};


type tsMenuItemConnection_sumArgs = {
  field: tsMenuItemFieldsEnum;
};

type tsMenuItemEdge = {
  readonly next: Maybe<tsMenuItem>;
  readonly node: tsMenuItem;
  readonly previous: Maybe<tsMenuItem>;
};

type tsMenuItemFieldsEnum =
  | 'childItems.nodes'
  | 'childItems.nodes.childItems.nodes'
  | 'childItems.nodes.children'
  | 'childItems.nodes.children.children'
  | 'childItems.nodes.children.id'
  | 'childItems.nodes.cssClasses'
  | 'childItems.nodes.databaseId'
  | 'childItems.nodes.description'
  | 'childItems.nodes.id'
  | 'childItems.nodes.internal.content'
  | 'childItems.nodes.internal.contentDigest'
  | 'childItems.nodes.internal.contentFilePath'
  | 'childItems.nodes.internal.description'
  | 'childItems.nodes.internal.fieldOwners'
  | 'childItems.nodes.internal.ignoreType'
  | 'childItems.nodes.internal.mediaType'
  | 'childItems.nodes.internal.owner'
  | 'childItems.nodes.internal.type'
  | 'childItems.nodes.label'
  | 'childItems.nodes.linkRelationship'
  | 'childItems.nodes.locations'
  | 'childItems.nodes.nodeType'
  | 'childItems.nodes.order'
  | 'childItems.nodes.parentDatabaseId'
  | 'childItems.nodes.parentId'
  | 'childItems.nodes.parent.children'
  | 'childItems.nodes.parent.id'
  | 'childItems.nodes.path'
  | 'childItems.nodes.target'
  | 'childItems.nodes.title'
  | 'childItems.nodes.uri'
  | 'childItems.nodes.url'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'connectedNode.node.databaseId'
  | 'connectedNode.node.id'
  | 'connectedNode.node.uri'
  | 'cssClasses'
  | 'databaseId'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'label'
  | 'linkRelationship'
  | 'locations'
  | 'menu.node.children'
  | 'menu.node.children.children'
  | 'menu.node.children.id'
  | 'menu.node.count'
  | 'menu.node.databaseId'
  | 'menu.node.id'
  | 'menu.node.internal.content'
  | 'menu.node.internal.contentDigest'
  | 'menu.node.internal.contentFilePath'
  | 'menu.node.internal.description'
  | 'menu.node.internal.fieldOwners'
  | 'menu.node.internal.ignoreType'
  | 'menu.node.internal.mediaType'
  | 'menu.node.internal.owner'
  | 'menu.node.internal.type'
  | 'menu.node.locations'
  | 'menu.node.menuItems.nodes'
  | 'menu.node.name'
  | 'menu.node.nodeType'
  | 'menu.node.parent.children'
  | 'menu.node.parent.id'
  | 'menu.node.slug'
  | 'nodeType'
  | 'order'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'target'
  | 'title'
  | 'uri'
  | 'url';

type tsMenuItemFilterInput = {
  readonly childItems: InputMaybe<tsMenuItemToMenuItemConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly connectedNode: InputMaybe<tsMenuItemToMenuItemLinkableConnectionEdgeFilterInput>;
  readonly cssClasses: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly linkRelationship: InputMaybe<StringQueryOperatorInput>;
  readonly locations: InputMaybe<tsMenuLocationEnumQueryOperatorInput>;
  readonly menu: InputMaybe<tsMenuItemToMenuConnectionEdgeFilterInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly target: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsMenuItemFilterListInput = {
  readonly elemMatch: InputMaybe<tsMenuItemFilterInput>;
};

type tsMenuItemGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsMenuItemEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsMenuItemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsMenuItem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsMenuItemGroupConnection_distinctArgs = {
  field: tsMenuItemFieldsEnum;
};


type tsMenuItemGroupConnection_groupArgs = {
  field: tsMenuItemFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsMenuItemGroupConnection_maxArgs = {
  field: tsMenuItemFieldsEnum;
};


type tsMenuItemGroupConnection_minArgs = {
  field: tsMenuItemFieldsEnum;
};


type tsMenuItemGroupConnection_sumArgs = {
  field: tsMenuItemFieldsEnum;
};

type tsMenuItemLinkable = {
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** The unique resource identifier path */
  readonly id: Scalars['ID'];
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};

type tsMenuItemLinkableFilterInput = {
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<IDQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type tsMenuItemSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsMenuItemFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the MenuItem type and the Menu type */
type tsMenuItemToMenuConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsMenu>;
};

type tsMenuItemToMenuConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsMenuFilterInput>;
};

/** Connection between the MenuItem type and the MenuItem type */
type tsMenuItemToMenuItemConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsMenuItem>>>;
};

type tsMenuItemToMenuItemConnectionFilterInput = {
  readonly nodes: InputMaybe<tsMenuItemFilterListInput>;
};

/** Connection between the MenuItem type and the MenuItemLinkable type */
type tsMenuItemToMenuItemLinkableConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsMenuItemLinkable>;
};

type tsMenuItemToMenuItemLinkableConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsMenuItemLinkableFilterInput>;
};

/** Registered menu locations */
type tsMenuLocationEnum =
  | 'GATSBY_FOOTER_MENU'
  | 'GATSBY_HEADER_MENU'
  | 'MENU_1'
  | 'SERVICES_MENU';

type tsMenuLocationEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsMenuLocationEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsMenuLocationEnum>>>;
  readonly ne: InputMaybe<tsMenuLocationEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsMenuLocationEnum>>>;
};

type tsMenuSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsMenuFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the Menu type and the MenuItem type */
type tsMenuToMenuItemConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsMenuItem>>>;
};

type tsMenuToMenuItemConnectionFilterInput = {
  readonly nodes: InputMaybe<tsMenuItemFilterListInput>;
};

/** A Gravity Forms multiselect field. */
type tsMultiSelectField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithEnableEnhancedUI & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the multiselect field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsMultiSelectFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields. */
  readonly hasEnhancedUI: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** An array of field values. */
  readonly values: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** MultiSelectFieldChoice choice values. */
type tsMultiSelectFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** A Gravity Forms name field. */
type tsNameField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSubLabelPlacement & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the name field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsNameFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the name field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsNameInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Name field value. */
  readonly nameValues: Maybe<tsNameFieldValue>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** NameFieldChoice choice values. */
type tsNameFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithName & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** The individual properties for each element of the Name value field. */
type tsNameFieldValue = {
  /** First name. */
  readonly first: Maybe<Scalars['String']>;
  /** Last name. */
  readonly last: Maybe<Scalars['String']>;
  /** Middle name. */
  readonly middle: Maybe<Scalars['String']>;
  /** Prefix, such as Mr., Mrs. etc. */
  readonly prefix: Maybe<Scalars['String']>;
  /** Suffix, such as Sr., Jr. etc. */
  readonly suffix: Maybe<Scalars['String']>;
};

/** NameInputProperty input values. */
type tsNameInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithName & {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The nested NameFieldChoice choice. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsNameFieldChoice>>>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** Whether or not this field should be hidden. */
  readonly isHidden: Maybe<Scalars['Boolean']>;
  /** Key used to identify this input. */
  readonly key: Maybe<Scalars['String']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

type tsNode = {
  /** The globally unique ID for the object */
  readonly id: Scalars['ID'];
};

type tsNodeWithAuthor = {
  /** Connection between the NodeWithAuthor type and the User type */
  readonly author: Maybe<tsNodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  readonly authorDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  readonly authorId: Maybe<Scalars['ID']>;
};

/** Connection between the NodeWithAuthor type and the User type */
type tsNodeWithAuthorToUserConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsUser>;
};

type tsNodeWithAuthorToUserConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsUserFilterInput>;
};

type tsNodeWithComments = {
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  readonly commentCount: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  readonly commentStatus: Maybe<Scalars['String']>;
};

type tsNodeWithContentEditor = {
  /** The content of the post. */
  readonly content: Maybe<Scalars['String']>;
};

type tsNodeWithExcerpt = {
  /** The excerpt of the post. */
  readonly excerpt: Maybe<Scalars['String']>;
};

type tsNodeWithFeaturedImage = {
  /** Connection between the ContentNode type and the ContentType type */
  readonly contentType: Maybe<tsContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  readonly contentTypeName: Scalars['String'];
  /** The unique identifier stored in the database */
  readonly databaseId: Scalars['Int'];
  /** Post publishing date. */
  readonly date: Maybe<Scalars['Date']>;
  /** The publishing date set in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** The desired slug of the post */
  readonly desiredSlug: Maybe<Scalars['String']>;
  /** The RSS enclosure for the object */
  readonly enclosure: Maybe<Scalars['String']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  readonly featuredImage: Maybe<tsNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  readonly featuredImageId: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  readonly guid: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  readonly id: Scalars['ID'];
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  readonly lastEditedBy: Maybe<tsContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  readonly link: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  readonly modified: Maybe<Scalars['Date']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  readonly modifiedGmt: Maybe<Scalars['Date']>;
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  readonly slug: Maybe<Scalars['String']>;
  /** The current status of the object */
  readonly status: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  readonly template: Maybe<tsContentTemplate>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};

/** Connection between the NodeWithFeaturedImage type and the MediaItem type */
type tsNodeWithFeaturedImageToMediaItemConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsMediaItem>;
};

type tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsMediaItemFilterInput>;
};

type tsNodeWithForm = {
  /** The form object of the node. */
  readonly form: Maybe<tsGfForm>;
  /** The database identifier of the form of the node. */
  readonly formDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the form of the node. */
  readonly formId: Maybe<Scalars['ID']>;
};

type tsNodeWithPageAttributes = {
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  readonly menuOrder: Maybe<Scalars['Int']>;
};

type tsNodeWithRevisions = {
  /** True if the node is a revision of another node */
  readonly isRevision: Maybe<Scalars['Boolean']>;
};

/** Connection between the NodeWithRevisions type and the ContentNode type */
type tsNodeWithRevisionsToContentNodeConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsContentNode>;
};

type tsNodeWithTemplate = {
  /** The template assigned to the node */
  readonly template: Maybe<tsContentTemplate>;
};

type tsNodeWithTitle = {
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  readonly title: Maybe<Scalars['String']>;
};

type tsNodeWithTrackbacks = {
  /** Whether the pings are open or closed for this particular post. */
  readonly pingStatus: Maybe<Scalars['String']>;
  /** URLs that have been pinged. */
  readonly pinged: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** URLs queued to be pinged. */
  readonly toPing: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};

/** A Gravity Forms number field. */
type tsNumberField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithCalculation & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithNumberFormat & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRange & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The formula used for the number field. */
  readonly calculationFormula: Maybe<Scalars['String']>;
  /** Specifies to how many decimal places the number should be rounded. This is available when isCalculation is true, but is not available when the chosen format is “Currency”. */
  readonly calculationRounding: Maybe<Scalars['Int']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Indicates whether the number field is a calculation. */
  readonly isCalculation: Maybe<Scalars['Boolean']>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Specifies the format allowed for the number field. */
  readonly numberFormat: Maybe<tsNumberFieldFormatEnum>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Maximum allowed value for a number field. Values higher than the number specified by this property will cause the field to fail validation. */
  readonly rangeMax: Maybe<Scalars['Float']>;
  /** Minimum allowed value for a number field. Values lower than the number specified by this property will cause the field to fail validation. */
  readonly rangeMin: Maybe<Scalars['Float']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** The format allowed for the number field. . */
type tsNumberFieldFormatEnum =
  | 'CURRENCY'
  | 'DECIMAL_COMMA'
  | 'DECIMAL_DOT';

type tsPage = Node & tsContentNode & tsDatabaseIdentifier & tsHierarchicalContentNode & tsMenuItemLinkable & tsNode & tsNodeWithAuthor & tsNodeWithComments & tsNodeWithContentEditor & tsNodeWithFeaturedImage & tsNodeWithPageAttributes & tsNodeWithRevisions & tsNodeWithTemplate & tsNodeWithTitle & tsUniformResourceIdentifiable & {
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  readonly author: Maybe<tsNodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  readonly authorDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  readonly authorId: Maybe<Scalars['ID']>;
  readonly children: ReadonlyArray<Node>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  readonly commentCount: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  readonly commentStatus: Maybe<Scalars['String']>;
  /** Connection between the page type and the Comment type */
  readonly comments: Maybe<tsPageToCommentConnection>;
  /** The content of the post. */
  readonly content: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  readonly contentType: Maybe<tsContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  readonly contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** Post publishing date. */
  readonly date: Maybe<Scalars['Date']>;
  /** The publishing date set in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** The desired slug of the post */
  readonly desiredSlug: Maybe<Scalars['String']>;
  /** The RSS enclosure for the object */
  readonly enclosure: Maybe<Scalars['String']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  readonly featuredImage: Maybe<tsNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  readonly featuredImageId: Maybe<Scalars['ID']>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Flexible Content&quot; was set to Show in GraphQL. */
  readonly flexibleContent: Maybe<tsPage_Flexiblecontent>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  readonly guid: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether this page is set to the static front page. */
  readonly isFrontPage: Scalars['Boolean'];
  /** Whether this page is set to the blog posts page. */
  readonly isPostsPage: Scalars['Boolean'];
  /** Whether this page is set to the privacy page. */
  readonly isPrivacyPage: Scalars['Boolean'];
  /** True if the node is a revision of another node */
  readonly isRevision: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  readonly lastEditedBy: Maybe<tsContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  readonly link: Maybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  readonly menuOrder: Maybe<Scalars['Int']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  readonly modified: Maybe<Scalars['Date']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  readonly modifiedGmt: Maybe<Scalars['Date']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  readonly slug: Maybe<Scalars['String']>;
  /** The current status of the object */
  readonly status: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  readonly template: Maybe<tsContentTemplate>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  readonly title: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  readonly wpChildren: Maybe<tsHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The parent of the node. The parent object can be of various types */
  readonly wpParent: Maybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdge>;
};


type tsPage_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsPage_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsPage_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsPage_modifiedGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type tsPageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsPageEdge>;
  readonly group: ReadonlyArray<tsPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsPageConnection_distinctArgs = {
  field: tsPageFieldsEnum;
};


type tsPageConnection_groupArgs = {
  field: tsPageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsPageConnection_maxArgs = {
  field: tsPageFieldsEnum;
};


type tsPageConnection_minArgs = {
  field: tsPageFieldsEnum;
};


type tsPageConnection_sumArgs = {
  field: tsPageFieldsEnum;
};

type tsPageEdge = {
  readonly next: Maybe<tsPage>;
  readonly node: tsPage;
  readonly previous: Maybe<tsPage>;
};

/** A Gravity Forms page field. */
type tsPageField = tsFormField & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithNextButton & tsGfFieldWithPreviousButton & {
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** An array containing the the individual properties for the &quot;Next&quot; button. */
  readonly nextButton: Maybe<tsFormButton>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** An array containing the the individual properties for the &quot;Previous&quot; button. */
  readonly previousButton: Maybe<tsFormButton>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

type tsPageFieldsEnum =
  | 'ancestors.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentTypeName'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.date'
  | 'ancestors.nodes.dateGmt'
  | 'ancestors.nodes.desiredSlug'
  | 'ancestors.nodes.enclosure'
  | 'ancestors.nodes.guid'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.modified'
  | 'ancestors.nodes.modifiedGmt'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.readingTime'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.status'
  | 'ancestors.nodes.template.templateName'
  | 'ancestors.nodes.uri'
  | 'authorDatabaseId'
  | 'authorId'
  | 'author.node.authorProfile.fieldGroupName'
  | 'author.node.avatar.default'
  | 'author.node.avatar.extraAttr'
  | 'author.node.avatar.forceDefault'
  | 'author.node.avatar.foundAvatar'
  | 'author.node.avatar.height'
  | 'author.node.avatar.rating'
  | 'author.node.avatar.scheme'
  | 'author.node.avatar.size'
  | 'author.node.avatar.url'
  | 'author.node.avatar.width'
  | 'author.node.capKey'
  | 'author.node.capabilities'
  | 'author.node.children'
  | 'author.node.children.children'
  | 'author.node.children.id'
  | 'author.node.comments.nodes'
  | 'author.node.databaseId'
  | 'author.node.description'
  | 'author.node.email'
  | 'author.node.extraCapabilities'
  | 'author.node.firstName'
  | 'author.node.id'
  | 'author.node.internal.content'
  | 'author.node.internal.contentDigest'
  | 'author.node.internal.contentFilePath'
  | 'author.node.internal.description'
  | 'author.node.internal.fieldOwners'
  | 'author.node.internal.ignoreType'
  | 'author.node.internal.mediaType'
  | 'author.node.internal.owner'
  | 'author.node.internal.type'
  | 'author.node.isContentNode'
  | 'author.node.isTermNode'
  | 'author.node.lastName'
  | 'author.node.locale'
  | 'author.node.name'
  | 'author.node.nicename'
  | 'author.node.nickname'
  | 'author.node.nodeType'
  | 'author.node.pages.nodes'
  | 'author.node.parent.children'
  | 'author.node.parent.id'
  | 'author.node.posts.nodes'
  | 'author.node.registeredDate'
  | 'author.node.roles.nodes'
  | 'author.node.seo.breadcrumbTitle'
  | 'author.node.seo.canonical'
  | 'author.node.seo.fullHead'
  | 'author.node.seo.language'
  | 'author.node.seo.metaDesc'
  | 'author.node.seo.metaRobotsNofollow'
  | 'author.node.seo.metaRobotsNoindex'
  | 'author.node.seo.opengraphDescription'
  | 'author.node.seo.opengraphTitle'
  | 'author.node.seo.region'
  | 'author.node.seo.title'
  | 'author.node.seo.twitterDescription'
  | 'author.node.seo.twitterTitle'
  | 'author.node.slug'
  | 'author.node.uri'
  | 'author.node.url'
  | 'author.node.username'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'commentCount'
  | 'commentStatus'
  | 'comments.nodes'
  | 'comments.nodes.agent'
  | 'comments.nodes.approved'
  | 'comments.nodes.authorIp'
  | 'comments.nodes.children'
  | 'comments.nodes.children.children'
  | 'comments.nodes.children.id'
  | 'comments.nodes.content'
  | 'comments.nodes.databaseId'
  | 'comments.nodes.date'
  | 'comments.nodes.dateGmt'
  | 'comments.nodes.id'
  | 'comments.nodes.internal.content'
  | 'comments.nodes.internal.contentDigest'
  | 'comments.nodes.internal.contentFilePath'
  | 'comments.nodes.internal.description'
  | 'comments.nodes.internal.fieldOwners'
  | 'comments.nodes.internal.ignoreType'
  | 'comments.nodes.internal.mediaType'
  | 'comments.nodes.internal.owner'
  | 'comments.nodes.internal.type'
  | 'comments.nodes.karma'
  | 'comments.nodes.nodeType'
  | 'comments.nodes.parentDatabaseId'
  | 'comments.nodes.parentId'
  | 'comments.nodes.parent.children'
  | 'comments.nodes.parent.id'
  | 'comments.nodes.replies.nodes'
  | 'comments.nodes.type'
  | 'content'
  | 'contentTypeName'
  | 'contentType.node.archivePath'
  | 'contentType.node.canExport'
  | 'contentType.node.children'
  | 'contentType.node.children.children'
  | 'contentType.node.children.id'
  | 'contentType.node.connectedTaxonomies.nodes'
  | 'contentType.node.contentNodes.nodes'
  | 'contentType.node.deleteWithUser'
  | 'contentType.node.description'
  | 'contentType.node.excludeFromSearch'
  | 'contentType.node.graphqlPluralName'
  | 'contentType.node.graphqlSingleName'
  | 'contentType.node.hasArchive'
  | 'contentType.node.hierarchical'
  | 'contentType.node.id'
  | 'contentType.node.internal.content'
  | 'contentType.node.internal.contentDigest'
  | 'contentType.node.internal.contentFilePath'
  | 'contentType.node.internal.description'
  | 'contentType.node.internal.fieldOwners'
  | 'contentType.node.internal.ignoreType'
  | 'contentType.node.internal.mediaType'
  | 'contentType.node.internal.owner'
  | 'contentType.node.internal.type'
  | 'contentType.node.isContentNode'
  | 'contentType.node.isFrontPage'
  | 'contentType.node.isPostsPage'
  | 'contentType.node.isTermNode'
  | 'contentType.node.label'
  | 'contentType.node.labels.addNew'
  | 'contentType.node.labels.addNewItem'
  | 'contentType.node.labels.allItems'
  | 'contentType.node.labels.archives'
  | 'contentType.node.labels.attributes'
  | 'contentType.node.labels.editItem'
  | 'contentType.node.labels.featuredImage'
  | 'contentType.node.labels.filterItemsList'
  | 'contentType.node.labels.insertIntoItem'
  | 'contentType.node.labels.itemsList'
  | 'contentType.node.labels.itemsListNavigation'
  | 'contentType.node.labels.menuName'
  | 'contentType.node.labels.name'
  | 'contentType.node.labels.newItem'
  | 'contentType.node.labels.notFound'
  | 'contentType.node.labels.notFoundInTrash'
  | 'contentType.node.labels.parentItemColon'
  | 'contentType.node.labels.removeFeaturedImage'
  | 'contentType.node.labels.searchItems'
  | 'contentType.node.labels.setFeaturedImage'
  | 'contentType.node.labels.singularName'
  | 'contentType.node.labels.uploadedToThisItem'
  | 'contentType.node.labels.useFeaturedImage'
  | 'contentType.node.labels.viewItem'
  | 'contentType.node.labels.viewItems'
  | 'contentType.node.menuIcon'
  | 'contentType.node.menuPosition'
  | 'contentType.node.name'
  | 'contentType.node.nodeType'
  | 'contentType.node.parent.children'
  | 'contentType.node.parent.id'
  | 'contentType.node.public'
  | 'contentType.node.publiclyQueryable'
  | 'contentType.node.restBase'
  | 'contentType.node.restControllerClass'
  | 'contentType.node.showInAdminBar'
  | 'contentType.node.showInGraphql'
  | 'contentType.node.showInMenu'
  | 'contentType.node.showInNavMenus'
  | 'contentType.node.showInRest'
  | 'contentType.node.showUi'
  | 'contentType.node.uri'
  | 'databaseId'
  | 'date'
  | 'dateGmt'
  | 'desiredSlug'
  | 'enclosure'
  | 'featuredImageDatabaseId'
  | 'featuredImageId'
  | 'featuredImage.node.altText'
  | 'featuredImage.node.ancestors.nodes'
  | 'featuredImage.node.authorDatabaseId'
  | 'featuredImage.node.authorId'
  | 'featuredImage.node.caption'
  | 'featuredImage.node.children'
  | 'featuredImage.node.children.children'
  | 'featuredImage.node.children.id'
  | 'featuredImage.node.commentCount'
  | 'featuredImage.node.commentStatus'
  | 'featuredImage.node.comments.nodes'
  | 'featuredImage.node.contentTypeName'
  | 'featuredImage.node.databaseId'
  | 'featuredImage.node.date'
  | 'featuredImage.node.dateGmt'
  | 'featuredImage.node.description'
  | 'featuredImage.node.desiredSlug'
  | 'featuredImage.node.enclosure'
  | 'featuredImage.node.fileSize'
  | 'featuredImage.node.filename'
  | 'featuredImage.node.filesize'
  | 'featuredImage.node.gatsbyImage'
  | 'featuredImage.node.guid'
  | 'featuredImage.node.height'
  | 'featuredImage.node.id'
  | 'featuredImage.node.internal.content'
  | 'featuredImage.node.internal.contentDigest'
  | 'featuredImage.node.internal.contentFilePath'
  | 'featuredImage.node.internal.description'
  | 'featuredImage.node.internal.fieldOwners'
  | 'featuredImage.node.internal.ignoreType'
  | 'featuredImage.node.internal.mediaType'
  | 'featuredImage.node.internal.owner'
  | 'featuredImage.node.internal.type'
  | 'featuredImage.node.isContentNode'
  | 'featuredImage.node.isTermNode'
  | 'featuredImage.node.link'
  | 'featuredImage.node.localFile.absolutePath'
  | 'featuredImage.node.localFile.accessTime'
  | 'featuredImage.node.localFile.atime'
  | 'featuredImage.node.localFile.atimeMs'
  | 'featuredImage.node.localFile.base'
  | 'featuredImage.node.localFile.birthTime'
  | 'featuredImage.node.localFile.birthtime'
  | 'featuredImage.node.localFile.birthtimeMs'
  | 'featuredImage.node.localFile.blksize'
  | 'featuredImage.node.localFile.blocks'
  | 'featuredImage.node.localFile.changeTime'
  | 'featuredImage.node.localFile.children'
  | 'featuredImage.node.localFile.childrenImageSharp'
  | 'featuredImage.node.localFile.ctime'
  | 'featuredImage.node.localFile.ctimeMs'
  | 'featuredImage.node.localFile.dev'
  | 'featuredImage.node.localFile.dir'
  | 'featuredImage.node.localFile.ext'
  | 'featuredImage.node.localFile.extension'
  | 'featuredImage.node.localFile.gid'
  | 'featuredImage.node.localFile.hash'
  | 'featuredImage.node.localFile.id'
  | 'featuredImage.node.localFile.ino'
  | 'featuredImage.node.localFile.mode'
  | 'featuredImage.node.localFile.modifiedTime'
  | 'featuredImage.node.localFile.mtime'
  | 'featuredImage.node.localFile.mtimeMs'
  | 'featuredImage.node.localFile.name'
  | 'featuredImage.node.localFile.nlink'
  | 'featuredImage.node.localFile.prettySize'
  | 'featuredImage.node.localFile.publicURL'
  | 'featuredImage.node.localFile.rdev'
  | 'featuredImage.node.localFile.relativeDirectory'
  | 'featuredImage.node.localFile.relativePath'
  | 'featuredImage.node.localFile.root'
  | 'featuredImage.node.localFile.size'
  | 'featuredImage.node.localFile.sourceInstanceName'
  | 'featuredImage.node.localFile.uid'
  | 'featuredImage.node.mediaDetails.file'
  | 'featuredImage.node.mediaDetails.height'
  | 'featuredImage.node.mediaDetails.sizes'
  | 'featuredImage.node.mediaDetails.width'
  | 'featuredImage.node.mediaItemUrl'
  | 'featuredImage.node.mediaType'
  | 'featuredImage.node.mimeType'
  | 'featuredImage.node.modified'
  | 'featuredImage.node.modifiedGmt'
  | 'featuredImage.node.nodeType'
  | 'featuredImage.node.parentDatabaseId'
  | 'featuredImage.node.parentId'
  | 'featuredImage.node.parent.children'
  | 'featuredImage.node.parent.id'
  | 'featuredImage.node.publicUrl'
  | 'featuredImage.node.remoteFile.absolutePath'
  | 'featuredImage.node.remoteFile.accessTime'
  | 'featuredImage.node.remoteFile.atime'
  | 'featuredImage.node.remoteFile.atimeMs'
  | 'featuredImage.node.remoteFile.base'
  | 'featuredImage.node.remoteFile.birthTime'
  | 'featuredImage.node.remoteFile.birthtime'
  | 'featuredImage.node.remoteFile.birthtimeMs'
  | 'featuredImage.node.remoteFile.blksize'
  | 'featuredImage.node.remoteFile.blocks'
  | 'featuredImage.node.remoteFile.changeTime'
  | 'featuredImage.node.remoteFile.children'
  | 'featuredImage.node.remoteFile.childrenImageSharp'
  | 'featuredImage.node.remoteFile.ctime'
  | 'featuredImage.node.remoteFile.ctimeMs'
  | 'featuredImage.node.remoteFile.dev'
  | 'featuredImage.node.remoteFile.dir'
  | 'featuredImage.node.remoteFile.ext'
  | 'featuredImage.node.remoteFile.extension'
  | 'featuredImage.node.remoteFile.gid'
  | 'featuredImage.node.remoteFile.hash'
  | 'featuredImage.node.remoteFile.id'
  | 'featuredImage.node.remoteFile.ino'
  | 'featuredImage.node.remoteFile.mode'
  | 'featuredImage.node.remoteFile.modifiedTime'
  | 'featuredImage.node.remoteFile.mtime'
  | 'featuredImage.node.remoteFile.mtimeMs'
  | 'featuredImage.node.remoteFile.name'
  | 'featuredImage.node.remoteFile.nlink'
  | 'featuredImage.node.remoteFile.prettySize'
  | 'featuredImage.node.remoteFile.publicURL'
  | 'featuredImage.node.remoteFile.rdev'
  | 'featuredImage.node.remoteFile.relativeDirectory'
  | 'featuredImage.node.remoteFile.relativePath'
  | 'featuredImage.node.remoteFile.root'
  | 'featuredImage.node.remoteFile.size'
  | 'featuredImage.node.remoteFile.sourceInstanceName'
  | 'featuredImage.node.remoteFile.uid'
  | 'featuredImage.node.resize.height'
  | 'featuredImage.node.resize.src'
  | 'featuredImage.node.resize.width'
  | 'featuredImage.node.seo.breadcrumbs'
  | 'featuredImage.node.seo.canonical'
  | 'featuredImage.node.seo.cornerstone'
  | 'featuredImage.node.seo.focuskw'
  | 'featuredImage.node.seo.fullHead'
  | 'featuredImage.node.seo.metaDesc'
  | 'featuredImage.node.seo.metaKeywords'
  | 'featuredImage.node.seo.metaRobotsNofollow'
  | 'featuredImage.node.seo.metaRobotsNoindex'
  | 'featuredImage.node.seo.opengraphAuthor'
  | 'featuredImage.node.seo.opengraphDescription'
  | 'featuredImage.node.seo.opengraphModifiedTime'
  | 'featuredImage.node.seo.opengraphPublishedTime'
  | 'featuredImage.node.seo.opengraphPublisher'
  | 'featuredImage.node.seo.opengraphSiteName'
  | 'featuredImage.node.seo.opengraphTitle'
  | 'featuredImage.node.seo.opengraphType'
  | 'featuredImage.node.seo.opengraphUrl'
  | 'featuredImage.node.seo.readingTime'
  | 'featuredImage.node.seo.title'
  | 'featuredImage.node.seo.twitterDescription'
  | 'featuredImage.node.seo.twitterTitle'
  | 'featuredImage.node.sizes'
  | 'featuredImage.node.slug'
  | 'featuredImage.node.sourceUrl'
  | 'featuredImage.node.srcSet'
  | 'featuredImage.node.status'
  | 'featuredImage.node.template.templateName'
  | 'featuredImage.node.title'
  | 'featuredImage.node.uri'
  | 'featuredImage.node.width'
  | 'featuredImage.node.wpChildren.nodes'
  | 'flexibleContent.fieldGroupName'
  | 'guid'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isFrontPage'
  | 'isPostsPage'
  | 'isPrivacyPage'
  | 'isRevision'
  | 'isTermNode'
  | 'lastEditedBy.node.authorProfile.fieldGroupName'
  | 'lastEditedBy.node.avatar.default'
  | 'lastEditedBy.node.avatar.extraAttr'
  | 'lastEditedBy.node.avatar.forceDefault'
  | 'lastEditedBy.node.avatar.foundAvatar'
  | 'lastEditedBy.node.avatar.height'
  | 'lastEditedBy.node.avatar.rating'
  | 'lastEditedBy.node.avatar.scheme'
  | 'lastEditedBy.node.avatar.size'
  | 'lastEditedBy.node.avatar.url'
  | 'lastEditedBy.node.avatar.width'
  | 'lastEditedBy.node.capKey'
  | 'lastEditedBy.node.capabilities'
  | 'lastEditedBy.node.children'
  | 'lastEditedBy.node.children.children'
  | 'lastEditedBy.node.children.id'
  | 'lastEditedBy.node.comments.nodes'
  | 'lastEditedBy.node.databaseId'
  | 'lastEditedBy.node.description'
  | 'lastEditedBy.node.email'
  | 'lastEditedBy.node.extraCapabilities'
  | 'lastEditedBy.node.firstName'
  | 'lastEditedBy.node.id'
  | 'lastEditedBy.node.internal.content'
  | 'lastEditedBy.node.internal.contentDigest'
  | 'lastEditedBy.node.internal.contentFilePath'
  | 'lastEditedBy.node.internal.description'
  | 'lastEditedBy.node.internal.fieldOwners'
  | 'lastEditedBy.node.internal.ignoreType'
  | 'lastEditedBy.node.internal.mediaType'
  | 'lastEditedBy.node.internal.owner'
  | 'lastEditedBy.node.internal.type'
  | 'lastEditedBy.node.isContentNode'
  | 'lastEditedBy.node.isTermNode'
  | 'lastEditedBy.node.lastName'
  | 'lastEditedBy.node.locale'
  | 'lastEditedBy.node.name'
  | 'lastEditedBy.node.nicename'
  | 'lastEditedBy.node.nickname'
  | 'lastEditedBy.node.nodeType'
  | 'lastEditedBy.node.pages.nodes'
  | 'lastEditedBy.node.parent.children'
  | 'lastEditedBy.node.parent.id'
  | 'lastEditedBy.node.posts.nodes'
  | 'lastEditedBy.node.registeredDate'
  | 'lastEditedBy.node.roles.nodes'
  | 'lastEditedBy.node.seo.breadcrumbTitle'
  | 'lastEditedBy.node.seo.canonical'
  | 'lastEditedBy.node.seo.fullHead'
  | 'lastEditedBy.node.seo.language'
  | 'lastEditedBy.node.seo.metaDesc'
  | 'lastEditedBy.node.seo.metaRobotsNofollow'
  | 'lastEditedBy.node.seo.metaRobotsNoindex'
  | 'lastEditedBy.node.seo.opengraphDescription'
  | 'lastEditedBy.node.seo.opengraphTitle'
  | 'lastEditedBy.node.seo.region'
  | 'lastEditedBy.node.seo.title'
  | 'lastEditedBy.node.seo.twitterDescription'
  | 'lastEditedBy.node.seo.twitterTitle'
  | 'lastEditedBy.node.slug'
  | 'lastEditedBy.node.uri'
  | 'lastEditedBy.node.url'
  | 'lastEditedBy.node.username'
  | 'link'
  | 'menuOrder'
  | 'modified'
  | 'modifiedGmt'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.readingTime'
  | 'seo.schema.articleType'
  | 'seo.schema.pageType'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'status'
  | 'template.templateName'
  | 'title'
  | 'uri'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentTypeName'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.date'
  | 'wpChildren.nodes.dateGmt'
  | 'wpChildren.nodes.desiredSlug'
  | 'wpChildren.nodes.enclosure'
  | 'wpChildren.nodes.guid'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.modified'
  | 'wpChildren.nodes.modifiedGmt'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.readingTime'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.status'
  | 'wpChildren.nodes.template.templateName'
  | 'wpChildren.nodes.uri'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentTypeName'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.date'
  | 'wpParent.node.dateGmt'
  | 'wpParent.node.desiredSlug'
  | 'wpParent.node.enclosure'
  | 'wpParent.node.guid'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.modified'
  | 'wpParent.node.modifiedGmt'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.readingTime'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.status'
  | 'wpParent.node.template.templateName'
  | 'wpParent.node.uri';

type tsPageFilterInput = {
  readonly ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  readonly author: InputMaybe<tsNodeWithAuthorToUserConnectionEdgeFilterInput>;
  readonly authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly authorId: InputMaybe<IDQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly commentCount: InputMaybe<IntQueryOperatorInput>;
  readonly commentStatus: InputMaybe<StringQueryOperatorInput>;
  readonly comments: InputMaybe<tsPageToCommentConnectionFilterInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
  readonly enclosure: InputMaybe<StringQueryOperatorInput>;
  readonly featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  readonly featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly featuredImageId: InputMaybe<IDQueryOperatorInput>;
  readonly flexibleContent: InputMaybe<tsPage_FlexiblecontentFilterInput>;
  readonly guid: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isFrontPage: InputMaybe<BooleanQueryOperatorInput>;
  readonly isPostsPage: InputMaybe<BooleanQueryOperatorInput>;
  readonly isPrivacyPage: InputMaybe<BooleanQueryOperatorInput>;
  readonly isRevision: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly menuOrder: InputMaybe<IntQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly seo: InputMaybe<tsPostTypeSEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly template: InputMaybe<tsContentTemplateFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};

type tsPageFilterListInput = {
  readonly elemMatch: InputMaybe<tsPageFilterInput>;
};

type tsPageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsPageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsPageGroupConnection_distinctArgs = {
  field: tsPageFieldsEnum;
};


type tsPageGroupConnection_groupArgs = {
  field: tsPageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsPageGroupConnection_maxArgs = {
  field: tsPageFieldsEnum;
};


type tsPageGroupConnection_minArgs = {
  field: tsPageFieldsEnum;
};


type tsPageGroupConnection_sumArgs = {
  field: tsPageFieldsEnum;
};

type tsPageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsPageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the page type and the Comment type */
type tsPageToCommentConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsComment>>>;
};

type tsPageToCommentConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCommentFilterListInput>;
};

/** Field Group */
type tsPage_Flexiblecontent = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly flexibleContent: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent>>>;
};

type tsPage_FlexiblecontentFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
};

type tsPage_Flexiblecontent_FlexibleContent = tsPage_Flexiblecontent_FlexibleContent_AboutSection | tsPage_Flexiblecontent_FlexibleContent_BenefitsSection | tsPage_Flexiblecontent_FlexibleContent_CoreSpecialtiesSection | tsPage_Flexiblecontent_FlexibleContent_FeaturedWorkSection | tsPage_Flexiblecontent_FlexibleContent_FormModelSection | tsPage_Flexiblecontent_FlexibleContent_GrowthStages | tsPage_Flexiblecontent_FlexibleContent_HeadingContentListsWithGallery | tsPage_Flexiblecontent_FlexibleContent_HeadingImageContent | tsPage_Flexiblecontent_FlexibleContent_HeadingWithContentListsSection | tsPage_Flexiblecontent_FlexibleContent_HeroBanner | tsPage_Flexiblecontent_FlexibleContent_LocationSection | tsPage_Flexiblecontent_FlexibleContent_MoscowPrioritizationVaried | tsPage_Flexiblecontent_FlexibleContent_MvpDevelopment | tsPage_Flexiblecontent_FlexibleContent_MvpIndustries | tsPage_Flexiblecontent_FlexibleContent_MvpPagesBanner | tsPage_Flexiblecontent_FlexibleContent_OpenRolesSection | tsPage_Flexiblecontent_FlexibleContent_OurAccomplishmentsSection | tsPage_Flexiblecontent_FlexibleContent_OurValuesSection | tsPage_Flexiblecontent_FlexibleContent_PartnersSection | tsPage_Flexiblecontent_FlexibleContent_Process | tsPage_Flexiblecontent_FlexibleContent_ServicesSection | tsPage_Flexiblecontent_FlexibleContent_TeamSection | tsPage_Flexiblecontent_FlexibleContent_TestimonialSection | tsPage_Flexiblecontent_FlexibleContent_ThoughtspaceSection | tsPage_Flexiblecontent_FlexibleContent_WhatWeOfferSection | tsPage_Flexiblecontent_FlexibleContent_WorkSection;

type tsPage_Flexiblecontent_FlexibleContent_AboutSection = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly gallery: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
  readonly heading: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly pointsLists: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_AboutSection_pointsLists>>>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_AboutSection_pointsLists = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly pointContent: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_BenefitsSection = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly benefitsContents: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_BenefitsSection_benefitsContents>>>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly needLine: Maybe<Scalars['Boolean']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_BenefitsSection_benefitsContents = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
};

type tsPage_Flexiblecontent_FlexibleContent_CoreSpecialtiesSection = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly coreSpecialtiesPages: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_CoreSpecialtiesSection_CoreSpecialtiesPages>>>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_CoreSpecialtiesSection_CoreSpecialtiesPages = tsPage;

type tsPage_Flexiblecontent_FlexibleContent_FeaturedWorkSection = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  readonly featuredWorks: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_FeaturedWorkSection_FeaturedWorks>>>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly needLine: Maybe<Scalars['Boolean']>;
};

type tsPage_Flexiblecontent_FlexibleContent_FeaturedWorkSection_FeaturedWorks = tsCaseStudy;

type tsPage_Flexiblecontent_FlexibleContent_FormModelSection = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly formHeading: Maybe<Scalars['String']>;
  readonly fromShortcode: Maybe<Scalars['String']>;
  readonly getInTouchHeading: Maybe<Scalars['String']>;
  readonly recognitionsHeading: Maybe<Scalars['String']>;
  readonly testimonialsHeading: Maybe<Scalars['String']>;
  readonly trustedByHeading: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_GrowthStages = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly growthStagesCta: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_GrowthStages_growthStagesCta>>>;
  readonly heading: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_GrowthStages_growthStagesCta = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_HeadingContentListsWithGallery = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly contentLists: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_HeadingContentListsWithGallery_contentLists>>>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly imageGallery: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly needGallery: Maybe<Scalars['Boolean']>;
  readonly showCta: Maybe<Scalars['Boolean']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_HeadingContentListsWithGallery_contentLists = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
  readonly needCta: Maybe<Scalars['Boolean']>;
  readonly needHeading: Maybe<Scalars['Boolean']>;
  readonly needImage: Maybe<Scalars['Boolean']>;
};

type tsPage_Flexiblecontent_FlexibleContent_HeadingImageContent = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly needCta: Maybe<Scalars['Boolean']>;
  readonly needLine: Maybe<Scalars['Boolean']>;
};

type tsPage_Flexiblecontent_FlexibleContent_HeadingWithContentListsSection = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly contentLists: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_HeadingWithContentListsSection_contentLists>>>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly showCta: Maybe<Scalars['Boolean']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_HeadingWithContentListsSection_contentLists = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
  readonly needCta: Maybe<Scalars['Boolean']>;
  readonly needHeading: Maybe<Scalars['Boolean']>;
  readonly needImage: Maybe<Scalars['Boolean']>;
};

type tsPage_Flexiblecontent_FlexibleContent_HeroBanner = tsAcfFieldGroup & {
  readonly bannerContent: Maybe<Scalars['String']>;
  readonly bannerImage: Maybe<tsMediaItem>;
  readonly bannerVideoLink: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_LocationSection = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly locationContents: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_LocationSection_locationContents>>>;
  readonly locationImages: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_LocationSection_locationImages>>>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly needLine: Maybe<Scalars['Boolean']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_LocationSection_locationContents = tsAcfFieldGroup & {
  readonly address: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly location: Maybe<Scalars['String']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_LocationSection_locationImages = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly images: Maybe<tsMediaItem>;
};

type tsPage_Flexiblecontent_FlexibleContent_MoscowPrioritizationVaried = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly moscowPrioritizationCtas: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_MoscowPrioritizationVaried_moscowPrioritizationCtas>>>;
  readonly subHeading: Maybe<Scalars['String']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_MoscowPrioritizationVaried_moscowPrioritizationCtas = tsAcfFieldGroup & {
  readonly description: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly initial: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_MvpDevelopment = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly technologyIcons: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
};

type tsPage_Flexiblecontent_FlexibleContent_MvpIndustries = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly industriesLists: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_MvpIndustries_industriesLists>>>;
  readonly lineHeading: Maybe<Scalars['String']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_MvpIndustries_industriesLists = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly logo: Maybe<tsMediaItem>;
  readonly title: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_MvpPagesBanner = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly contentsLists: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly formSection: Maybe<tsPage_Flexiblecontent_FlexibleContent_MvpPagesBanner_FormSection>;
  readonly heading: Maybe<Scalars['String']>;
  readonly subHeading: Maybe<Scalars['String']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_MvpPagesBanner_FormSection = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly formShortcode: Maybe<Scalars['String']>;
  readonly formTitle: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_OpenRolesSection = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly needLine: Maybe<Scalars['Boolean']>;
  readonly openRolesContents: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_OpenRolesSection_openRolesContents>>>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_OpenRolesSection_openRolesContents = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly positionsListing: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_OpenRolesSection_openRolesContents_PositionsListing>>>;
};

type tsPage_Flexiblecontent_FlexibleContent_OpenRolesSection_openRolesContents_PositionsListing = tsCareers;

type tsPage_Flexiblecontent_FlexibleContent_OurAccomplishmentsSection = tsAcfFieldGroup & {
  readonly companySnapshotHeading: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly informationCounts: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_OurAccomplishmentsSection_informationCounts>>>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_OurAccomplishmentsSection_informationCounts = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly counts: Maybe<Scalars['Float']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_OurValuesSection = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly needLine: Maybe<Scalars['Boolean']>;
  readonly ourValueContents: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_OurValuesSection_ourValueContents>>>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_OurValuesSection_ourValueContents = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_PartnersSection = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly needLine: Maybe<Scalars['Boolean']>;
  readonly partnersLogo: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
};

type tsPage_Flexiblecontent_FlexibleContent_Process = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  readonly count: Maybe<Scalars['String']>;
  readonly countTitle: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
  readonly subHeading: Maybe<Scalars['String']>;
  readonly textColor: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_ServicesSection = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly servicesCta: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_ServicesSection_servicesCta>>>;
};

/** Field Group */
type tsPage_Flexiblecontent_FlexibleContent_ServicesSection_servicesCta = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
  readonly serviceRedirectLinks: Maybe<tsAcfLink>;
};

type tsPage_Flexiblecontent_FlexibleContent_TeamSection = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly needLine: Maybe<Scalars['Boolean']>;
  readonly teamMembers: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_TeamSection_TeamMembers>>>;
};

type tsPage_Flexiblecontent_FlexibleContent_TeamSection_TeamMembers = tsTeam;

type tsPage_Flexiblecontent_FlexibleContent_TestimonialSection = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_ThoughtspaceSection = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly relatedPosts: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_ThoughtspaceSection_RelatedPosts>>>;
};

type tsPage_Flexiblecontent_FlexibleContent_ThoughtspaceSection_RelatedPosts = tsPost;

type tsPage_Flexiblecontent_FlexibleContent_WhatWeOfferSection = tsAcfFieldGroup & {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly imageOne: Maybe<tsMediaItem>;
  readonly imageSecond: Maybe<tsMediaItem>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
  readonly needBackgroundColor: Maybe<Scalars['Boolean']>;
  readonly technologyLogo: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
};

type tsPage_Flexiblecontent_FlexibleContent_WorkSection = tsAcfFieldGroup & {
  readonly caseStudy: Maybe<ReadonlyArray<Maybe<tsPage_Flexiblecontent_FlexibleContent_WorkSection_CaseStudy>>>;
  readonly content: Maybe<Scalars['String']>;
  readonly cta: Maybe<tsAcfLink>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly images: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
  readonly lineHeading: Maybe<Scalars['String']>;
  readonly lineNumber: Maybe<Scalars['String']>;
};

type tsPage_Flexiblecontent_FlexibleContent_WorkSection_CaseStudy = tsCaseStudy;

/** A Gravity Forms password field. */
type tsPasswordField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPasswordStrength & tsGfFieldWithPasswordVisibility & tsGfFieldWithPersonalData & tsGfFieldWithRules & tsGfFieldWithSize & tsGfFieldWithSubLabelPlacement & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Indicates whether the field displays the password strength indicator. */
  readonly hasPasswordStrengthIndicator: Maybe<Scalars['Boolean']>;
  /** Whether the Password visibility toggle should be enabled for this field. */
  readonly hasPasswordVisibilityToggle: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the password field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsPasswordInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Indicates how strong the password should be. */
  readonly minPasswordStrength: Maybe<tsPasswordFieldMinStrengthEnum>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** Indicates how strong the password should be. */
type tsPasswordFieldMinStrengthEnum =
  | 'BAD'
  | 'GOOD'
  | 'SHORT'
  | 'STRONG';

/** PasswordInputProperty input values. */
type tsPasswordInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithPassword & {
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** Whether or not this field should be hidden. */
  readonly isHidden: Maybe<Scalars['Boolean']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

/** A Gravity Forms phone field. */
type tsPhoneField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPhoneFormat & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines the allowed format for phones. If the phone value does not conform with the specified format, the field will fail validation. */
  readonly phoneFormat: Maybe<tsPhoneFieldFormatEnum>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** Tthe allowed format for phone numbers. */
type tsPhoneFieldFormatEnum =
  | 'INTERNATIONAL'
  | 'STANDARD';

type tsPost = Node & tsContentNode & tsDatabaseIdentifier & tsMenuItemLinkable & tsNode & tsNodeWithAuthor & tsNodeWithComments & tsNodeWithContentEditor & tsNodeWithExcerpt & tsNodeWithFeaturedImage & tsNodeWithRevisions & tsNodeWithTemplate & tsNodeWithTitle & tsNodeWithTrackbacks & tsUniformResourceIdentifiable & {
  /** Connection between the NodeWithAuthor type and the User type */
  readonly author: Maybe<tsNodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  readonly authorDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  readonly authorId: Maybe<Scalars['ID']>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Case Study&quot; was set to Show in GraphQL. */
  readonly caseStudy: Maybe<tsPost_Casestudy>;
  /** Connection between the post type and the category type */
  readonly categories: Maybe<tsPostToCategoryConnection>;
  readonly children: ReadonlyArray<Node>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  readonly commentCount: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  readonly commentStatus: Maybe<Scalars['String']>;
  /** Connection between the post type and the Comment type */
  readonly comments: Maybe<tsPostToCommentConnection>;
  /** The content of the post. */
  readonly content: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  readonly contentType: Maybe<tsContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  readonly contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** Post publishing date. */
  readonly date: Maybe<Scalars['Date']>;
  /** The publishing date set in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** The desired slug of the post */
  readonly desiredSlug: Maybe<Scalars['String']>;
  /** The RSS enclosure for the object */
  readonly enclosure: Maybe<Scalars['String']>;
  /** The excerpt of the post. */
  readonly excerpt: Maybe<Scalars['String']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  readonly featuredImage: Maybe<tsNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  readonly featuredImageId: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  readonly guid: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** True if the node is a revision of another node */
  readonly isRevision: Maybe<Scalars['Boolean']>;
  /** Whether this page is sticky */
  readonly isSticky: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  readonly lastEditedBy: Maybe<tsContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  readonly link: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  readonly modified: Maybe<Scalars['Date']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  readonly modifiedGmt: Maybe<Scalars['Date']>;
  /** Next post */
  readonly next: Maybe<tsPost>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Whether the pings are open or closed for this particular post. */
  readonly pingStatus: Maybe<Scalars['String']>;
  /** URLs that have been pinged. */
  readonly pinged: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Connection between the post type and the postFormat type */
  readonly postFormats: Maybe<tsPostToPostFormatConnection>;
  /** Previous post */
  readonly previous: Maybe<tsPost>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Select Case Study&quot; was set to Show in GraphQL. */
  readonly selectCaseStudy: Maybe<tsPost_Selectcasestudy>;
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  readonly slug: Maybe<Scalars['String']>;
  /** The current status of the object */
  readonly status: Maybe<Scalars['String']>;
  /** Connection between the post type and the tag type */
  readonly tags: Maybe<tsPostToTagConnection>;
  /** The template assigned to a node of content */
  readonly template: Maybe<tsContentTemplate>;
  /** Connection between the post type and the TermNode type */
  readonly terms: Maybe<tsPostToTermNodeConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  readonly title: Maybe<Scalars['String']>;
  /** URLs queued to be pinged. */
  readonly toPing: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};


type tsPost_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsPost_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsPost_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsPost_modifiedGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

/** A Gravity Forms checkbox post_category field. */
type tsPostCategoryCheckboxField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPostCategoryCheckbox & tsGfFieldWithPostCategoryInitialItem & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSelectAllChoices & tsGfFieldWithSize & tsPostCategoryField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Checkbox field value. */
  readonly checkboxValues: Maybe<ReadonlyArray<Maybe<tsCheckboxFieldValue>>>;
  /** The available choices for the post_category field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCategoryFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** The dropdown placeholder for the field. */
  readonly dropdownPlaceholder: Maybe<Scalars['String']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically. */
  readonly hasAllCategories: Maybe<Scalars['Boolean']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Whether the \&quot;select all\&quot; choice should be displayed. */
  readonly hasSelectAll: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the post_category field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsPostCategoryCheckboxInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCategoryCheckboxInputProperty input values. */
type tsPostCategoryCheckboxInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithSelectAllChoices & {
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
};

type tsPostCategoryField = {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_category field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCategoryFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** The dropdown placeholder for the field. */
  readonly dropdownPlaceholder: Maybe<Scalars['String']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically. */
  readonly hasAllCategories: Maybe<Scalars['Boolean']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCategoryFieldChoice choice values. */
type tsPostCategoryFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** A Gravity Forms multiselect post_category field. */
type tsPostCategoryMultiSelectField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithEnableEnhancedUI & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPostCategoryCheckbox & tsGfFieldWithPostCategoryInitialItem & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCategoryField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_category field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCategoryFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** The dropdown placeholder for the field. */
  readonly dropdownPlaceholder: Maybe<Scalars['String']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically. */
  readonly hasAllCategories: Maybe<Scalars['Boolean']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields. */
  readonly hasEnhancedUI: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** An array of field values. */
  readonly values: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms radio post_category field. */
type tsPostCategoryRadioField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithOtherChoice & tsGfFieldWithPersonalData & tsGfFieldWithPostCategoryCheckbox & tsGfFieldWithPostCategoryInitialItem & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCategoryField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_category field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCategoryFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** The dropdown placeholder for the field. */
  readonly dropdownPlaceholder: Maybe<Scalars['String']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically. */
  readonly hasAllCategories: Maybe<Scalars['Boolean']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor. */
  readonly hasOtherChoice: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms select post_category field. */
type tsPostCategorySelectField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithEnableEnhancedUI & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPostCategoryCheckbox & tsGfFieldWithPostCategoryInitialItem & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCategoryField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_category field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCategoryFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** The dropdown placeholder for the field. */
  readonly dropdownPlaceholder: Maybe<Scalars['String']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically. */
  readonly hasAllCategories: Maybe<Scalars['Boolean']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields. */
  readonly hasEnhancedUI: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

type tsPostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsPostEdge>;
  readonly group: ReadonlyArray<tsPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsPostConnection_distinctArgs = {
  field: tsPostFieldsEnum;
};


type tsPostConnection_groupArgs = {
  field: tsPostFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsPostConnection_maxArgs = {
  field: tsPostFieldsEnum;
};


type tsPostConnection_minArgs = {
  field: tsPostFieldsEnum;
};


type tsPostConnection_sumArgs = {
  field: tsPostFieldsEnum;
};

/** A Gravity Forms post_content field. */
type tsPostContentField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMaxlen & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRichTextEditor & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Indicates whether the field uses the rich text editor interface. */
  readonly hasRichTextEditor: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Specifies the maximum number of characters allowed in a text or textarea (paragraph) field. */
  readonly maxLength: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms checkbox post_custom_field field. */
type tsPostCustomCheckboxField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSelectAllChoices & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Checkbox field value. */
  readonly checkboxValues: Maybe<ReadonlyArray<Maybe<tsCheckboxFieldValue>>>;
  /** The available choices for the post_custom_field field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCustomCheckboxFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Whether the \&quot;select all\&quot; choice should be displayed. */
  readonly hasSelectAll: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the post_custom_field field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsPostCustomCheckboxInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCustomCheckboxFieldChoice choice values. */
type tsPostCustomCheckboxFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** PostCustomCheckboxInputProperty input values. */
type tsPostCustomCheckboxInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithSelectAllChoices & {
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
};

/** A Gravity Forms date post_custom_field field. */
type tsPostCustomDateField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDateFormat & tsGfFieldWithDateInputType & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsGfFieldWithSubLabelPlacement & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines how the date field displays it’s calendar icon. */
  readonly calendarIconType: Maybe<tsFormFieldCalendarIconTypeEnum>;
  /** Contains the URL to the custom calendar icon. Only applicable when calendarIconType is set to custom. */
  readonly calendarIconUrl: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Determines how the date is displayed. */
  readonly dateFormat: Maybe<tsDateFieldFormatEnum>;
  /** The type of date field to display. */
  readonly dateType: Maybe<tsDateFieldTypeEnum>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the post_custom_field field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsPostCustomDateInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCustomDateInputProperty input values. */
type tsPostCustomDateInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithDateFormat & {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

/** A Gravity Forms email post_custom_field field. */
type tsPostCustomEmailField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithEmailConfirm & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsGfFieldWithSubLabelPlacement & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Determines whether the Confirm Email field is active. */
  readonly hasEmailConfirmation: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the post_custom_field field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsPostCustomEmailInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCustomEmailInputProperty input values. */
type tsPostCustomEmailInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithEmailConfirm & {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

type tsPostCustomField = {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms fileupload post_custom_field field. */
type tsPostCustomFileuploadField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithFileExtensions & tsGfFieldWithFileSize & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMultipleFiles & tsGfFieldWithPersonalData & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** A comma-delimited list of the file extensions which may be uploaded. */
  readonly allowedExtensions: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Indicates whether multiple files may be uploaded. */
  readonly canAcceptMultipleFiles: Maybe<Scalars['Boolean']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** File upload value */
  readonly fileUploadValues: Maybe<ReadonlyArray<Maybe<tsFileUploadFieldValue>>>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The maximum size (in MB) an uploaded file may be . */
  readonly maxFileSize: Maybe<Scalars['Int']>;
  /** When the field is set to allow multiple files to be uploaded, this property is available to set a limit on how many may be uploaded. */
  readonly maxFiles: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms hidden post_custom_field field. */
type tsPostCustomHiddenField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms list post_custom_field field. */
type tsPostCustomListField = tsFormField & tsGfFieldWithAddIconUrl & tsGfFieldWithAdminLabel & tsGfFieldWithColumns & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDeleteIconUrl & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMaxrows & tsGfFieldWithPersonalData & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** The URL of the image to be used for the add row button. */
  readonly addIconUrl: Maybe<Scalars['String']>;
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_custom_field field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCustomListFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** The URL of the image to be used for the delete row button. */
  readonly deleteIconUrl: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field should use multiple columns. Default is false. */
  readonly hasColumns: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** List field value. */
  readonly listValues: Maybe<ReadonlyArray<Maybe<tsListFieldValue>>>;
  /** The maximum number of rows the user can add to the field. */
  readonly maxRows: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCustomListFieldChoice choice values. */
type tsPostCustomListFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithColumns & {
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** A Gravity Forms multiselect post_custom_field field. */
type tsPostCustomMultiSelectField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithEnableEnhancedUI & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_custom_field field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCustomMultiSelectFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields. */
  readonly hasEnhancedUI: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** An array of field values. */
  readonly values: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCustomMultiSelectFieldChoice choice values. */
type tsPostCustomMultiSelectFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** A Gravity Forms number post_custom_field field. */
type tsPostCustomNumberField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithCalculation & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithNumberFormat & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRange & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The formula used for the number field. */
  readonly calculationFormula: Maybe<Scalars['String']>;
  /** Specifies to how many decimal places the number should be rounded. This is available when isCalculation is true, but is not available when the chosen format is “Currency”. */
  readonly calculationRounding: Maybe<Scalars['Int']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Indicates whether the number field is a calculation. */
  readonly isCalculation: Maybe<Scalars['Boolean']>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Specifies the format allowed for the number field. */
  readonly numberFormat: Maybe<tsNumberFieldFormatEnum>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Maximum allowed value for a number field. Values higher than the number specified by this property will cause the field to fail validation. */
  readonly rangeMax: Maybe<Scalars['Float']>;
  /** Minimum allowed value for a number field. Values lower than the number specified by this property will cause the field to fail validation. */
  readonly rangeMin: Maybe<Scalars['Float']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms phone post_custom_field field. */
type tsPostCustomPhoneField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPhoneFormat & tsGfFieldWithPlaceholder & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines the allowed format for phones. If the phone value does not conform with the specified format, the field will fail validation. */
  readonly phoneFormat: Maybe<tsPhoneFieldFormatEnum>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms radio post_custom_field field. */
type tsPostCustomRadioField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithOtherChoice & tsGfFieldWithPersonalData & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_custom_field field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCustomRadioFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor. */
  readonly hasOtherChoice: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCustomRadioFieldChoice choice values. */
type tsPostCustomRadioFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & tsGfFieldChoiceWithOtherChoice & {
  /** Indicates the radio button item is the “Other” choice. */
  readonly isOtherChoice: Maybe<Scalars['Boolean']>;
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** A Gravity Forms select post_custom_field field. */
type tsPostCustomSelectField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithEnableEnhancedUI & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_custom_field field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostCustomSelectFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields. */
  readonly hasEnhancedUI: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCustomSelectFieldChoice choice values. */
type tsPostCustomSelectFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** A Gravity Forms textarea post_custom_field field. */
type tsPostCustomTextAreaField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMaxlen & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRichTextEditor & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Indicates whether the field uses the rich text editor interface. */
  readonly hasRichTextEditor: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Specifies the maximum number of characters allowed in a text or textarea (paragraph) field. */
  readonly maxLength: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms text post_custom_field field. */
type tsPostCustomTextField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithInputMask & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMaxlen & tsGfFieldWithPasswordField & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Whether the field has an input mask. */
  readonly hasInputMask: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The pattern used for the input mask. */
  readonly inputMaskValue: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if a text field input tag should be created with a &quot;password&quot; type. */
  readonly isPasswordInput: Maybe<Scalars['Boolean']>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Specifies the maximum number of characters allowed in a text or textarea (paragraph) field. */
  readonly maxLength: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms time post_custom_field field. */
type tsPostCustomTimeField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsGfFieldWithSubLabelPlacement & tsGfFieldWithTimeFormat & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the post_custom_field field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsPostCustomTimeInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** Determines how the time is displayed. */
  readonly timeFormat: Maybe<tsTimeFieldFormatEnum>;
  /** Time field value. */
  readonly timeValues: Maybe<tsTimeFieldValue>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostCustomTimeInputProperty input values. */
type tsPostCustomTimeInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithTimeFormat & {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

/** A Gravity Forms website post_custom_field field. */
type tsPostCustomWebsiteField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPostCustomField & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostCustomField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** The post meta key to which the value should be assigned. */
  readonly postMetaFieldName: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

type tsPostEdge = {
  readonly next: Maybe<tsPost>;
  readonly node: tsPost;
  readonly previous: Maybe<tsPost>;
};

/** A Gravity Forms post_excerpt field. */
type tsPostExcerptField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMaxlen & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Specifies the maximum number of characters allowed in a text or textarea (paragraph) field. */
  readonly maxLength: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

type tsPostFieldsEnum =
  | 'authorDatabaseId'
  | 'authorId'
  | 'author.node.authorProfile.fieldGroupName'
  | 'author.node.avatar.default'
  | 'author.node.avatar.extraAttr'
  | 'author.node.avatar.forceDefault'
  | 'author.node.avatar.foundAvatar'
  | 'author.node.avatar.height'
  | 'author.node.avatar.rating'
  | 'author.node.avatar.scheme'
  | 'author.node.avatar.size'
  | 'author.node.avatar.url'
  | 'author.node.avatar.width'
  | 'author.node.capKey'
  | 'author.node.capabilities'
  | 'author.node.children'
  | 'author.node.children.children'
  | 'author.node.children.id'
  | 'author.node.comments.nodes'
  | 'author.node.databaseId'
  | 'author.node.description'
  | 'author.node.email'
  | 'author.node.extraCapabilities'
  | 'author.node.firstName'
  | 'author.node.id'
  | 'author.node.internal.content'
  | 'author.node.internal.contentDigest'
  | 'author.node.internal.contentFilePath'
  | 'author.node.internal.description'
  | 'author.node.internal.fieldOwners'
  | 'author.node.internal.ignoreType'
  | 'author.node.internal.mediaType'
  | 'author.node.internal.owner'
  | 'author.node.internal.type'
  | 'author.node.isContentNode'
  | 'author.node.isTermNode'
  | 'author.node.lastName'
  | 'author.node.locale'
  | 'author.node.name'
  | 'author.node.nicename'
  | 'author.node.nickname'
  | 'author.node.nodeType'
  | 'author.node.pages.nodes'
  | 'author.node.parent.children'
  | 'author.node.parent.id'
  | 'author.node.posts.nodes'
  | 'author.node.registeredDate'
  | 'author.node.roles.nodes'
  | 'author.node.seo.breadcrumbTitle'
  | 'author.node.seo.canonical'
  | 'author.node.seo.fullHead'
  | 'author.node.seo.language'
  | 'author.node.seo.metaDesc'
  | 'author.node.seo.metaRobotsNofollow'
  | 'author.node.seo.metaRobotsNoindex'
  | 'author.node.seo.opengraphDescription'
  | 'author.node.seo.opengraphTitle'
  | 'author.node.seo.region'
  | 'author.node.seo.title'
  | 'author.node.seo.twitterDescription'
  | 'author.node.seo.twitterTitle'
  | 'author.node.slug'
  | 'author.node.uri'
  | 'author.node.url'
  | 'author.node.username'
  | 'caseStudy.appGallery'
  | 'caseStudy.appGallery.altText'
  | 'caseStudy.appGallery.ancestors.nodes'
  | 'caseStudy.appGallery.authorDatabaseId'
  | 'caseStudy.appGallery.authorId'
  | 'caseStudy.appGallery.caption'
  | 'caseStudy.appGallery.children'
  | 'caseStudy.appGallery.children.children'
  | 'caseStudy.appGallery.children.id'
  | 'caseStudy.appGallery.commentCount'
  | 'caseStudy.appGallery.commentStatus'
  | 'caseStudy.appGallery.comments.nodes'
  | 'caseStudy.appGallery.contentTypeName'
  | 'caseStudy.appGallery.databaseId'
  | 'caseStudy.appGallery.date'
  | 'caseStudy.appGallery.dateGmt'
  | 'caseStudy.appGallery.description'
  | 'caseStudy.appGallery.desiredSlug'
  | 'caseStudy.appGallery.enclosure'
  | 'caseStudy.appGallery.fileSize'
  | 'caseStudy.appGallery.filename'
  | 'caseStudy.appGallery.filesize'
  | 'caseStudy.appGallery.gatsbyImage'
  | 'caseStudy.appGallery.guid'
  | 'caseStudy.appGallery.height'
  | 'caseStudy.appGallery.id'
  | 'caseStudy.appGallery.internal.content'
  | 'caseStudy.appGallery.internal.contentDigest'
  | 'caseStudy.appGallery.internal.contentFilePath'
  | 'caseStudy.appGallery.internal.description'
  | 'caseStudy.appGallery.internal.fieldOwners'
  | 'caseStudy.appGallery.internal.ignoreType'
  | 'caseStudy.appGallery.internal.mediaType'
  | 'caseStudy.appGallery.internal.owner'
  | 'caseStudy.appGallery.internal.type'
  | 'caseStudy.appGallery.isContentNode'
  | 'caseStudy.appGallery.isTermNode'
  | 'caseStudy.appGallery.link'
  | 'caseStudy.appGallery.localFile.absolutePath'
  | 'caseStudy.appGallery.localFile.accessTime'
  | 'caseStudy.appGallery.localFile.atime'
  | 'caseStudy.appGallery.localFile.atimeMs'
  | 'caseStudy.appGallery.localFile.base'
  | 'caseStudy.appGallery.localFile.birthTime'
  | 'caseStudy.appGallery.localFile.birthtime'
  | 'caseStudy.appGallery.localFile.birthtimeMs'
  | 'caseStudy.appGallery.localFile.blksize'
  | 'caseStudy.appGallery.localFile.blocks'
  | 'caseStudy.appGallery.localFile.changeTime'
  | 'caseStudy.appGallery.localFile.children'
  | 'caseStudy.appGallery.localFile.childrenImageSharp'
  | 'caseStudy.appGallery.localFile.ctime'
  | 'caseStudy.appGallery.localFile.ctimeMs'
  | 'caseStudy.appGallery.localFile.dev'
  | 'caseStudy.appGallery.localFile.dir'
  | 'caseStudy.appGallery.localFile.ext'
  | 'caseStudy.appGallery.localFile.extension'
  | 'caseStudy.appGallery.localFile.gid'
  | 'caseStudy.appGallery.localFile.hash'
  | 'caseStudy.appGallery.localFile.id'
  | 'caseStudy.appGallery.localFile.ino'
  | 'caseStudy.appGallery.localFile.mode'
  | 'caseStudy.appGallery.localFile.modifiedTime'
  | 'caseStudy.appGallery.localFile.mtime'
  | 'caseStudy.appGallery.localFile.mtimeMs'
  | 'caseStudy.appGallery.localFile.name'
  | 'caseStudy.appGallery.localFile.nlink'
  | 'caseStudy.appGallery.localFile.prettySize'
  | 'caseStudy.appGallery.localFile.publicURL'
  | 'caseStudy.appGallery.localFile.rdev'
  | 'caseStudy.appGallery.localFile.relativeDirectory'
  | 'caseStudy.appGallery.localFile.relativePath'
  | 'caseStudy.appGallery.localFile.root'
  | 'caseStudy.appGallery.localFile.size'
  | 'caseStudy.appGallery.localFile.sourceInstanceName'
  | 'caseStudy.appGallery.localFile.uid'
  | 'caseStudy.appGallery.mediaDetails.file'
  | 'caseStudy.appGallery.mediaDetails.height'
  | 'caseStudy.appGallery.mediaDetails.sizes'
  | 'caseStudy.appGallery.mediaDetails.width'
  | 'caseStudy.appGallery.mediaItemUrl'
  | 'caseStudy.appGallery.mediaType'
  | 'caseStudy.appGallery.mimeType'
  | 'caseStudy.appGallery.modified'
  | 'caseStudy.appGallery.modifiedGmt'
  | 'caseStudy.appGallery.nodeType'
  | 'caseStudy.appGallery.parentDatabaseId'
  | 'caseStudy.appGallery.parentId'
  | 'caseStudy.appGallery.parent.children'
  | 'caseStudy.appGallery.parent.id'
  | 'caseStudy.appGallery.publicUrl'
  | 'caseStudy.appGallery.remoteFile.absolutePath'
  | 'caseStudy.appGallery.remoteFile.accessTime'
  | 'caseStudy.appGallery.remoteFile.atime'
  | 'caseStudy.appGallery.remoteFile.atimeMs'
  | 'caseStudy.appGallery.remoteFile.base'
  | 'caseStudy.appGallery.remoteFile.birthTime'
  | 'caseStudy.appGallery.remoteFile.birthtime'
  | 'caseStudy.appGallery.remoteFile.birthtimeMs'
  | 'caseStudy.appGallery.remoteFile.blksize'
  | 'caseStudy.appGallery.remoteFile.blocks'
  | 'caseStudy.appGallery.remoteFile.changeTime'
  | 'caseStudy.appGallery.remoteFile.children'
  | 'caseStudy.appGallery.remoteFile.childrenImageSharp'
  | 'caseStudy.appGallery.remoteFile.ctime'
  | 'caseStudy.appGallery.remoteFile.ctimeMs'
  | 'caseStudy.appGallery.remoteFile.dev'
  | 'caseStudy.appGallery.remoteFile.dir'
  | 'caseStudy.appGallery.remoteFile.ext'
  | 'caseStudy.appGallery.remoteFile.extension'
  | 'caseStudy.appGallery.remoteFile.gid'
  | 'caseStudy.appGallery.remoteFile.hash'
  | 'caseStudy.appGallery.remoteFile.id'
  | 'caseStudy.appGallery.remoteFile.ino'
  | 'caseStudy.appGallery.remoteFile.mode'
  | 'caseStudy.appGallery.remoteFile.modifiedTime'
  | 'caseStudy.appGallery.remoteFile.mtime'
  | 'caseStudy.appGallery.remoteFile.mtimeMs'
  | 'caseStudy.appGallery.remoteFile.name'
  | 'caseStudy.appGallery.remoteFile.nlink'
  | 'caseStudy.appGallery.remoteFile.prettySize'
  | 'caseStudy.appGallery.remoteFile.publicURL'
  | 'caseStudy.appGallery.remoteFile.rdev'
  | 'caseStudy.appGallery.remoteFile.relativeDirectory'
  | 'caseStudy.appGallery.remoteFile.relativePath'
  | 'caseStudy.appGallery.remoteFile.root'
  | 'caseStudy.appGallery.remoteFile.size'
  | 'caseStudy.appGallery.remoteFile.sourceInstanceName'
  | 'caseStudy.appGallery.remoteFile.uid'
  | 'caseStudy.appGallery.resize.height'
  | 'caseStudy.appGallery.resize.src'
  | 'caseStudy.appGallery.resize.width'
  | 'caseStudy.appGallery.seo.breadcrumbs'
  | 'caseStudy.appGallery.seo.canonical'
  | 'caseStudy.appGallery.seo.cornerstone'
  | 'caseStudy.appGallery.seo.focuskw'
  | 'caseStudy.appGallery.seo.fullHead'
  | 'caseStudy.appGallery.seo.metaDesc'
  | 'caseStudy.appGallery.seo.metaKeywords'
  | 'caseStudy.appGallery.seo.metaRobotsNofollow'
  | 'caseStudy.appGallery.seo.metaRobotsNoindex'
  | 'caseStudy.appGallery.seo.opengraphAuthor'
  | 'caseStudy.appGallery.seo.opengraphDescription'
  | 'caseStudy.appGallery.seo.opengraphModifiedTime'
  | 'caseStudy.appGallery.seo.opengraphPublishedTime'
  | 'caseStudy.appGallery.seo.opengraphPublisher'
  | 'caseStudy.appGallery.seo.opengraphSiteName'
  | 'caseStudy.appGallery.seo.opengraphTitle'
  | 'caseStudy.appGallery.seo.opengraphType'
  | 'caseStudy.appGallery.seo.opengraphUrl'
  | 'caseStudy.appGallery.seo.readingTime'
  | 'caseStudy.appGallery.seo.title'
  | 'caseStudy.appGallery.seo.twitterDescription'
  | 'caseStudy.appGallery.seo.twitterTitle'
  | 'caseStudy.appGallery.sizes'
  | 'caseStudy.appGallery.slug'
  | 'caseStudy.appGallery.sourceUrl'
  | 'caseStudy.appGallery.srcSet'
  | 'caseStudy.appGallery.status'
  | 'caseStudy.appGallery.template.templateName'
  | 'caseStudy.appGallery.title'
  | 'caseStudy.appGallery.uri'
  | 'caseStudy.appGallery.width'
  | 'caseStudy.appGallery.wpChildren.nodes'
  | 'caseStudy.detailPageImage.altText'
  | 'caseStudy.detailPageImage.ancestors.nodes'
  | 'caseStudy.detailPageImage.authorDatabaseId'
  | 'caseStudy.detailPageImage.authorId'
  | 'caseStudy.detailPageImage.caption'
  | 'caseStudy.detailPageImage.children'
  | 'caseStudy.detailPageImage.children.children'
  | 'caseStudy.detailPageImage.children.id'
  | 'caseStudy.detailPageImage.commentCount'
  | 'caseStudy.detailPageImage.commentStatus'
  | 'caseStudy.detailPageImage.comments.nodes'
  | 'caseStudy.detailPageImage.contentTypeName'
  | 'caseStudy.detailPageImage.databaseId'
  | 'caseStudy.detailPageImage.date'
  | 'caseStudy.detailPageImage.dateGmt'
  | 'caseStudy.detailPageImage.description'
  | 'caseStudy.detailPageImage.desiredSlug'
  | 'caseStudy.detailPageImage.enclosure'
  | 'caseStudy.detailPageImage.fileSize'
  | 'caseStudy.detailPageImage.filename'
  | 'caseStudy.detailPageImage.filesize'
  | 'caseStudy.detailPageImage.gatsbyImage'
  | 'caseStudy.detailPageImage.guid'
  | 'caseStudy.detailPageImage.height'
  | 'caseStudy.detailPageImage.id'
  | 'caseStudy.detailPageImage.internal.content'
  | 'caseStudy.detailPageImage.internal.contentDigest'
  | 'caseStudy.detailPageImage.internal.contentFilePath'
  | 'caseStudy.detailPageImage.internal.description'
  | 'caseStudy.detailPageImage.internal.fieldOwners'
  | 'caseStudy.detailPageImage.internal.ignoreType'
  | 'caseStudy.detailPageImage.internal.mediaType'
  | 'caseStudy.detailPageImage.internal.owner'
  | 'caseStudy.detailPageImage.internal.type'
  | 'caseStudy.detailPageImage.isContentNode'
  | 'caseStudy.detailPageImage.isTermNode'
  | 'caseStudy.detailPageImage.link'
  | 'caseStudy.detailPageImage.localFile.absolutePath'
  | 'caseStudy.detailPageImage.localFile.accessTime'
  | 'caseStudy.detailPageImage.localFile.atime'
  | 'caseStudy.detailPageImage.localFile.atimeMs'
  | 'caseStudy.detailPageImage.localFile.base'
  | 'caseStudy.detailPageImage.localFile.birthTime'
  | 'caseStudy.detailPageImage.localFile.birthtime'
  | 'caseStudy.detailPageImage.localFile.birthtimeMs'
  | 'caseStudy.detailPageImage.localFile.blksize'
  | 'caseStudy.detailPageImage.localFile.blocks'
  | 'caseStudy.detailPageImage.localFile.changeTime'
  | 'caseStudy.detailPageImage.localFile.children'
  | 'caseStudy.detailPageImage.localFile.childrenImageSharp'
  | 'caseStudy.detailPageImage.localFile.ctime'
  | 'caseStudy.detailPageImage.localFile.ctimeMs'
  | 'caseStudy.detailPageImage.localFile.dev'
  | 'caseStudy.detailPageImage.localFile.dir'
  | 'caseStudy.detailPageImage.localFile.ext'
  | 'caseStudy.detailPageImage.localFile.extension'
  | 'caseStudy.detailPageImage.localFile.gid'
  | 'caseStudy.detailPageImage.localFile.hash'
  | 'caseStudy.detailPageImage.localFile.id'
  | 'caseStudy.detailPageImage.localFile.ino'
  | 'caseStudy.detailPageImage.localFile.mode'
  | 'caseStudy.detailPageImage.localFile.modifiedTime'
  | 'caseStudy.detailPageImage.localFile.mtime'
  | 'caseStudy.detailPageImage.localFile.mtimeMs'
  | 'caseStudy.detailPageImage.localFile.name'
  | 'caseStudy.detailPageImage.localFile.nlink'
  | 'caseStudy.detailPageImage.localFile.prettySize'
  | 'caseStudy.detailPageImage.localFile.publicURL'
  | 'caseStudy.detailPageImage.localFile.rdev'
  | 'caseStudy.detailPageImage.localFile.relativeDirectory'
  | 'caseStudy.detailPageImage.localFile.relativePath'
  | 'caseStudy.detailPageImage.localFile.root'
  | 'caseStudy.detailPageImage.localFile.size'
  | 'caseStudy.detailPageImage.localFile.sourceInstanceName'
  | 'caseStudy.detailPageImage.localFile.uid'
  | 'caseStudy.detailPageImage.mediaDetails.file'
  | 'caseStudy.detailPageImage.mediaDetails.height'
  | 'caseStudy.detailPageImage.mediaDetails.sizes'
  | 'caseStudy.detailPageImage.mediaDetails.width'
  | 'caseStudy.detailPageImage.mediaItemUrl'
  | 'caseStudy.detailPageImage.mediaType'
  | 'caseStudy.detailPageImage.mimeType'
  | 'caseStudy.detailPageImage.modified'
  | 'caseStudy.detailPageImage.modifiedGmt'
  | 'caseStudy.detailPageImage.nodeType'
  | 'caseStudy.detailPageImage.parentDatabaseId'
  | 'caseStudy.detailPageImage.parentId'
  | 'caseStudy.detailPageImage.parent.children'
  | 'caseStudy.detailPageImage.parent.id'
  | 'caseStudy.detailPageImage.publicUrl'
  | 'caseStudy.detailPageImage.remoteFile.absolutePath'
  | 'caseStudy.detailPageImage.remoteFile.accessTime'
  | 'caseStudy.detailPageImage.remoteFile.atime'
  | 'caseStudy.detailPageImage.remoteFile.atimeMs'
  | 'caseStudy.detailPageImage.remoteFile.base'
  | 'caseStudy.detailPageImage.remoteFile.birthTime'
  | 'caseStudy.detailPageImage.remoteFile.birthtime'
  | 'caseStudy.detailPageImage.remoteFile.birthtimeMs'
  | 'caseStudy.detailPageImage.remoteFile.blksize'
  | 'caseStudy.detailPageImage.remoteFile.blocks'
  | 'caseStudy.detailPageImage.remoteFile.changeTime'
  | 'caseStudy.detailPageImage.remoteFile.children'
  | 'caseStudy.detailPageImage.remoteFile.childrenImageSharp'
  | 'caseStudy.detailPageImage.remoteFile.ctime'
  | 'caseStudy.detailPageImage.remoteFile.ctimeMs'
  | 'caseStudy.detailPageImage.remoteFile.dev'
  | 'caseStudy.detailPageImage.remoteFile.dir'
  | 'caseStudy.detailPageImage.remoteFile.ext'
  | 'caseStudy.detailPageImage.remoteFile.extension'
  | 'caseStudy.detailPageImage.remoteFile.gid'
  | 'caseStudy.detailPageImage.remoteFile.hash'
  | 'caseStudy.detailPageImage.remoteFile.id'
  | 'caseStudy.detailPageImage.remoteFile.ino'
  | 'caseStudy.detailPageImage.remoteFile.mode'
  | 'caseStudy.detailPageImage.remoteFile.modifiedTime'
  | 'caseStudy.detailPageImage.remoteFile.mtime'
  | 'caseStudy.detailPageImage.remoteFile.mtimeMs'
  | 'caseStudy.detailPageImage.remoteFile.name'
  | 'caseStudy.detailPageImage.remoteFile.nlink'
  | 'caseStudy.detailPageImage.remoteFile.prettySize'
  | 'caseStudy.detailPageImage.remoteFile.publicURL'
  | 'caseStudy.detailPageImage.remoteFile.rdev'
  | 'caseStudy.detailPageImage.remoteFile.relativeDirectory'
  | 'caseStudy.detailPageImage.remoteFile.relativePath'
  | 'caseStudy.detailPageImage.remoteFile.root'
  | 'caseStudy.detailPageImage.remoteFile.size'
  | 'caseStudy.detailPageImage.remoteFile.sourceInstanceName'
  | 'caseStudy.detailPageImage.remoteFile.uid'
  | 'caseStudy.detailPageImage.resize.height'
  | 'caseStudy.detailPageImage.resize.src'
  | 'caseStudy.detailPageImage.resize.width'
  | 'caseStudy.detailPageImage.seo.breadcrumbs'
  | 'caseStudy.detailPageImage.seo.canonical'
  | 'caseStudy.detailPageImage.seo.cornerstone'
  | 'caseStudy.detailPageImage.seo.focuskw'
  | 'caseStudy.detailPageImage.seo.fullHead'
  | 'caseStudy.detailPageImage.seo.metaDesc'
  | 'caseStudy.detailPageImage.seo.metaKeywords'
  | 'caseStudy.detailPageImage.seo.metaRobotsNofollow'
  | 'caseStudy.detailPageImage.seo.metaRobotsNoindex'
  | 'caseStudy.detailPageImage.seo.opengraphAuthor'
  | 'caseStudy.detailPageImage.seo.opengraphDescription'
  | 'caseStudy.detailPageImage.seo.opengraphModifiedTime'
  | 'caseStudy.detailPageImage.seo.opengraphPublishedTime'
  | 'caseStudy.detailPageImage.seo.opengraphPublisher'
  | 'caseStudy.detailPageImage.seo.opengraphSiteName'
  | 'caseStudy.detailPageImage.seo.opengraphTitle'
  | 'caseStudy.detailPageImage.seo.opengraphType'
  | 'caseStudy.detailPageImage.seo.opengraphUrl'
  | 'caseStudy.detailPageImage.seo.readingTime'
  | 'caseStudy.detailPageImage.seo.title'
  | 'caseStudy.detailPageImage.seo.twitterDescription'
  | 'caseStudy.detailPageImage.seo.twitterTitle'
  | 'caseStudy.detailPageImage.sizes'
  | 'caseStudy.detailPageImage.slug'
  | 'caseStudy.detailPageImage.sourceUrl'
  | 'caseStudy.detailPageImage.srcSet'
  | 'caseStudy.detailPageImage.status'
  | 'caseStudy.detailPageImage.template.templateName'
  | 'caseStudy.detailPageImage.title'
  | 'caseStudy.detailPageImage.uri'
  | 'caseStudy.detailPageImage.width'
  | 'caseStudy.detailPageImage.wpChildren.nodes'
  | 'caseStudy.fieldGroupName'
  | 'caseStudy.gallery'
  | 'caseStudy.gallery.altText'
  | 'caseStudy.gallery.ancestors.nodes'
  | 'caseStudy.gallery.authorDatabaseId'
  | 'caseStudy.gallery.authorId'
  | 'caseStudy.gallery.caption'
  | 'caseStudy.gallery.children'
  | 'caseStudy.gallery.children.children'
  | 'caseStudy.gallery.children.id'
  | 'caseStudy.gallery.commentCount'
  | 'caseStudy.gallery.commentStatus'
  | 'caseStudy.gallery.comments.nodes'
  | 'caseStudy.gallery.contentTypeName'
  | 'caseStudy.gallery.databaseId'
  | 'caseStudy.gallery.date'
  | 'caseStudy.gallery.dateGmt'
  | 'caseStudy.gallery.description'
  | 'caseStudy.gallery.desiredSlug'
  | 'caseStudy.gallery.enclosure'
  | 'caseStudy.gallery.fileSize'
  | 'caseStudy.gallery.filename'
  | 'caseStudy.gallery.filesize'
  | 'caseStudy.gallery.gatsbyImage'
  | 'caseStudy.gallery.guid'
  | 'caseStudy.gallery.height'
  | 'caseStudy.gallery.id'
  | 'caseStudy.gallery.internal.content'
  | 'caseStudy.gallery.internal.contentDigest'
  | 'caseStudy.gallery.internal.contentFilePath'
  | 'caseStudy.gallery.internal.description'
  | 'caseStudy.gallery.internal.fieldOwners'
  | 'caseStudy.gallery.internal.ignoreType'
  | 'caseStudy.gallery.internal.mediaType'
  | 'caseStudy.gallery.internal.owner'
  | 'caseStudy.gallery.internal.type'
  | 'caseStudy.gallery.isContentNode'
  | 'caseStudy.gallery.isTermNode'
  | 'caseStudy.gallery.link'
  | 'caseStudy.gallery.localFile.absolutePath'
  | 'caseStudy.gallery.localFile.accessTime'
  | 'caseStudy.gallery.localFile.atime'
  | 'caseStudy.gallery.localFile.atimeMs'
  | 'caseStudy.gallery.localFile.base'
  | 'caseStudy.gallery.localFile.birthTime'
  | 'caseStudy.gallery.localFile.birthtime'
  | 'caseStudy.gallery.localFile.birthtimeMs'
  | 'caseStudy.gallery.localFile.blksize'
  | 'caseStudy.gallery.localFile.blocks'
  | 'caseStudy.gallery.localFile.changeTime'
  | 'caseStudy.gallery.localFile.children'
  | 'caseStudy.gallery.localFile.childrenImageSharp'
  | 'caseStudy.gallery.localFile.ctime'
  | 'caseStudy.gallery.localFile.ctimeMs'
  | 'caseStudy.gallery.localFile.dev'
  | 'caseStudy.gallery.localFile.dir'
  | 'caseStudy.gallery.localFile.ext'
  | 'caseStudy.gallery.localFile.extension'
  | 'caseStudy.gallery.localFile.gid'
  | 'caseStudy.gallery.localFile.hash'
  | 'caseStudy.gallery.localFile.id'
  | 'caseStudy.gallery.localFile.ino'
  | 'caseStudy.gallery.localFile.mode'
  | 'caseStudy.gallery.localFile.modifiedTime'
  | 'caseStudy.gallery.localFile.mtime'
  | 'caseStudy.gallery.localFile.mtimeMs'
  | 'caseStudy.gallery.localFile.name'
  | 'caseStudy.gallery.localFile.nlink'
  | 'caseStudy.gallery.localFile.prettySize'
  | 'caseStudy.gallery.localFile.publicURL'
  | 'caseStudy.gallery.localFile.rdev'
  | 'caseStudy.gallery.localFile.relativeDirectory'
  | 'caseStudy.gallery.localFile.relativePath'
  | 'caseStudy.gallery.localFile.root'
  | 'caseStudy.gallery.localFile.size'
  | 'caseStudy.gallery.localFile.sourceInstanceName'
  | 'caseStudy.gallery.localFile.uid'
  | 'caseStudy.gallery.mediaDetails.file'
  | 'caseStudy.gallery.mediaDetails.height'
  | 'caseStudy.gallery.mediaDetails.sizes'
  | 'caseStudy.gallery.mediaDetails.width'
  | 'caseStudy.gallery.mediaItemUrl'
  | 'caseStudy.gallery.mediaType'
  | 'caseStudy.gallery.mimeType'
  | 'caseStudy.gallery.modified'
  | 'caseStudy.gallery.modifiedGmt'
  | 'caseStudy.gallery.nodeType'
  | 'caseStudy.gallery.parentDatabaseId'
  | 'caseStudy.gallery.parentId'
  | 'caseStudy.gallery.parent.children'
  | 'caseStudy.gallery.parent.id'
  | 'caseStudy.gallery.publicUrl'
  | 'caseStudy.gallery.remoteFile.absolutePath'
  | 'caseStudy.gallery.remoteFile.accessTime'
  | 'caseStudy.gallery.remoteFile.atime'
  | 'caseStudy.gallery.remoteFile.atimeMs'
  | 'caseStudy.gallery.remoteFile.base'
  | 'caseStudy.gallery.remoteFile.birthTime'
  | 'caseStudy.gallery.remoteFile.birthtime'
  | 'caseStudy.gallery.remoteFile.birthtimeMs'
  | 'caseStudy.gallery.remoteFile.blksize'
  | 'caseStudy.gallery.remoteFile.blocks'
  | 'caseStudy.gallery.remoteFile.changeTime'
  | 'caseStudy.gallery.remoteFile.children'
  | 'caseStudy.gallery.remoteFile.childrenImageSharp'
  | 'caseStudy.gallery.remoteFile.ctime'
  | 'caseStudy.gallery.remoteFile.ctimeMs'
  | 'caseStudy.gallery.remoteFile.dev'
  | 'caseStudy.gallery.remoteFile.dir'
  | 'caseStudy.gallery.remoteFile.ext'
  | 'caseStudy.gallery.remoteFile.extension'
  | 'caseStudy.gallery.remoteFile.gid'
  | 'caseStudy.gallery.remoteFile.hash'
  | 'caseStudy.gallery.remoteFile.id'
  | 'caseStudy.gallery.remoteFile.ino'
  | 'caseStudy.gallery.remoteFile.mode'
  | 'caseStudy.gallery.remoteFile.modifiedTime'
  | 'caseStudy.gallery.remoteFile.mtime'
  | 'caseStudy.gallery.remoteFile.mtimeMs'
  | 'caseStudy.gallery.remoteFile.name'
  | 'caseStudy.gallery.remoteFile.nlink'
  | 'caseStudy.gallery.remoteFile.prettySize'
  | 'caseStudy.gallery.remoteFile.publicURL'
  | 'caseStudy.gallery.remoteFile.rdev'
  | 'caseStudy.gallery.remoteFile.relativeDirectory'
  | 'caseStudy.gallery.remoteFile.relativePath'
  | 'caseStudy.gallery.remoteFile.root'
  | 'caseStudy.gallery.remoteFile.size'
  | 'caseStudy.gallery.remoteFile.sourceInstanceName'
  | 'caseStudy.gallery.remoteFile.uid'
  | 'caseStudy.gallery.resize.height'
  | 'caseStudy.gallery.resize.src'
  | 'caseStudy.gallery.resize.width'
  | 'caseStudy.gallery.seo.breadcrumbs'
  | 'caseStudy.gallery.seo.canonical'
  | 'caseStudy.gallery.seo.cornerstone'
  | 'caseStudy.gallery.seo.focuskw'
  | 'caseStudy.gallery.seo.fullHead'
  | 'caseStudy.gallery.seo.metaDesc'
  | 'caseStudy.gallery.seo.metaKeywords'
  | 'caseStudy.gallery.seo.metaRobotsNofollow'
  | 'caseStudy.gallery.seo.metaRobotsNoindex'
  | 'caseStudy.gallery.seo.opengraphAuthor'
  | 'caseStudy.gallery.seo.opengraphDescription'
  | 'caseStudy.gallery.seo.opengraphModifiedTime'
  | 'caseStudy.gallery.seo.opengraphPublishedTime'
  | 'caseStudy.gallery.seo.opengraphPublisher'
  | 'caseStudy.gallery.seo.opengraphSiteName'
  | 'caseStudy.gallery.seo.opengraphTitle'
  | 'caseStudy.gallery.seo.opengraphType'
  | 'caseStudy.gallery.seo.opengraphUrl'
  | 'caseStudy.gallery.seo.readingTime'
  | 'caseStudy.gallery.seo.title'
  | 'caseStudy.gallery.seo.twitterDescription'
  | 'caseStudy.gallery.seo.twitterTitle'
  | 'caseStudy.gallery.sizes'
  | 'caseStudy.gallery.slug'
  | 'caseStudy.gallery.sourceUrl'
  | 'caseStudy.gallery.srcSet'
  | 'caseStudy.gallery.status'
  | 'caseStudy.gallery.template.templateName'
  | 'caseStudy.gallery.title'
  | 'caseStudy.gallery.uri'
  | 'caseStudy.gallery.width'
  | 'caseStudy.gallery.wpChildren.nodes'
  | 'caseStudy.ourRole'
  | 'caseStudy.problem'
  | 'caseStudy.problemStrategyResultLayout'
  | 'caseStudy.result'
  | 'caseStudy.secondoryImage.altText'
  | 'caseStudy.secondoryImage.ancestors.nodes'
  | 'caseStudy.secondoryImage.authorDatabaseId'
  | 'caseStudy.secondoryImage.authorId'
  | 'caseStudy.secondoryImage.caption'
  | 'caseStudy.secondoryImage.children'
  | 'caseStudy.secondoryImage.children.children'
  | 'caseStudy.secondoryImage.children.id'
  | 'caseStudy.secondoryImage.commentCount'
  | 'caseStudy.secondoryImage.commentStatus'
  | 'caseStudy.secondoryImage.comments.nodes'
  | 'caseStudy.secondoryImage.contentTypeName'
  | 'caseStudy.secondoryImage.databaseId'
  | 'caseStudy.secondoryImage.date'
  | 'caseStudy.secondoryImage.dateGmt'
  | 'caseStudy.secondoryImage.description'
  | 'caseStudy.secondoryImage.desiredSlug'
  | 'caseStudy.secondoryImage.enclosure'
  | 'caseStudy.secondoryImage.fileSize'
  | 'caseStudy.secondoryImage.filename'
  | 'caseStudy.secondoryImage.filesize'
  | 'caseStudy.secondoryImage.gatsbyImage'
  | 'caseStudy.secondoryImage.guid'
  | 'caseStudy.secondoryImage.height'
  | 'caseStudy.secondoryImage.id'
  | 'caseStudy.secondoryImage.internal.content'
  | 'caseStudy.secondoryImage.internal.contentDigest'
  | 'caseStudy.secondoryImage.internal.contentFilePath'
  | 'caseStudy.secondoryImage.internal.description'
  | 'caseStudy.secondoryImage.internal.fieldOwners'
  | 'caseStudy.secondoryImage.internal.ignoreType'
  | 'caseStudy.secondoryImage.internal.mediaType'
  | 'caseStudy.secondoryImage.internal.owner'
  | 'caseStudy.secondoryImage.internal.type'
  | 'caseStudy.secondoryImage.isContentNode'
  | 'caseStudy.secondoryImage.isTermNode'
  | 'caseStudy.secondoryImage.link'
  | 'caseStudy.secondoryImage.localFile.absolutePath'
  | 'caseStudy.secondoryImage.localFile.accessTime'
  | 'caseStudy.secondoryImage.localFile.atime'
  | 'caseStudy.secondoryImage.localFile.atimeMs'
  | 'caseStudy.secondoryImage.localFile.base'
  | 'caseStudy.secondoryImage.localFile.birthTime'
  | 'caseStudy.secondoryImage.localFile.birthtime'
  | 'caseStudy.secondoryImage.localFile.birthtimeMs'
  | 'caseStudy.secondoryImage.localFile.blksize'
  | 'caseStudy.secondoryImage.localFile.blocks'
  | 'caseStudy.secondoryImage.localFile.changeTime'
  | 'caseStudy.secondoryImage.localFile.children'
  | 'caseStudy.secondoryImage.localFile.childrenImageSharp'
  | 'caseStudy.secondoryImage.localFile.ctime'
  | 'caseStudy.secondoryImage.localFile.ctimeMs'
  | 'caseStudy.secondoryImage.localFile.dev'
  | 'caseStudy.secondoryImage.localFile.dir'
  | 'caseStudy.secondoryImage.localFile.ext'
  | 'caseStudy.secondoryImage.localFile.extension'
  | 'caseStudy.secondoryImage.localFile.gid'
  | 'caseStudy.secondoryImage.localFile.hash'
  | 'caseStudy.secondoryImage.localFile.id'
  | 'caseStudy.secondoryImage.localFile.ino'
  | 'caseStudy.secondoryImage.localFile.mode'
  | 'caseStudy.secondoryImage.localFile.modifiedTime'
  | 'caseStudy.secondoryImage.localFile.mtime'
  | 'caseStudy.secondoryImage.localFile.mtimeMs'
  | 'caseStudy.secondoryImage.localFile.name'
  | 'caseStudy.secondoryImage.localFile.nlink'
  | 'caseStudy.secondoryImage.localFile.prettySize'
  | 'caseStudy.secondoryImage.localFile.publicURL'
  | 'caseStudy.secondoryImage.localFile.rdev'
  | 'caseStudy.secondoryImage.localFile.relativeDirectory'
  | 'caseStudy.secondoryImage.localFile.relativePath'
  | 'caseStudy.secondoryImage.localFile.root'
  | 'caseStudy.secondoryImage.localFile.size'
  | 'caseStudy.secondoryImage.localFile.sourceInstanceName'
  | 'caseStudy.secondoryImage.localFile.uid'
  | 'caseStudy.secondoryImage.mediaDetails.file'
  | 'caseStudy.secondoryImage.mediaDetails.height'
  | 'caseStudy.secondoryImage.mediaDetails.sizes'
  | 'caseStudy.secondoryImage.mediaDetails.width'
  | 'caseStudy.secondoryImage.mediaItemUrl'
  | 'caseStudy.secondoryImage.mediaType'
  | 'caseStudy.secondoryImage.mimeType'
  | 'caseStudy.secondoryImage.modified'
  | 'caseStudy.secondoryImage.modifiedGmt'
  | 'caseStudy.secondoryImage.nodeType'
  | 'caseStudy.secondoryImage.parentDatabaseId'
  | 'caseStudy.secondoryImage.parentId'
  | 'caseStudy.secondoryImage.parent.children'
  | 'caseStudy.secondoryImage.parent.id'
  | 'caseStudy.secondoryImage.publicUrl'
  | 'caseStudy.secondoryImage.remoteFile.absolutePath'
  | 'caseStudy.secondoryImage.remoteFile.accessTime'
  | 'caseStudy.secondoryImage.remoteFile.atime'
  | 'caseStudy.secondoryImage.remoteFile.atimeMs'
  | 'caseStudy.secondoryImage.remoteFile.base'
  | 'caseStudy.secondoryImage.remoteFile.birthTime'
  | 'caseStudy.secondoryImage.remoteFile.birthtime'
  | 'caseStudy.secondoryImage.remoteFile.birthtimeMs'
  | 'caseStudy.secondoryImage.remoteFile.blksize'
  | 'caseStudy.secondoryImage.remoteFile.blocks'
  | 'caseStudy.secondoryImage.remoteFile.changeTime'
  | 'caseStudy.secondoryImage.remoteFile.children'
  | 'caseStudy.secondoryImage.remoteFile.childrenImageSharp'
  | 'caseStudy.secondoryImage.remoteFile.ctime'
  | 'caseStudy.secondoryImage.remoteFile.ctimeMs'
  | 'caseStudy.secondoryImage.remoteFile.dev'
  | 'caseStudy.secondoryImage.remoteFile.dir'
  | 'caseStudy.secondoryImage.remoteFile.ext'
  | 'caseStudy.secondoryImage.remoteFile.extension'
  | 'caseStudy.secondoryImage.remoteFile.gid'
  | 'caseStudy.secondoryImage.remoteFile.hash'
  | 'caseStudy.secondoryImage.remoteFile.id'
  | 'caseStudy.secondoryImage.remoteFile.ino'
  | 'caseStudy.secondoryImage.remoteFile.mode'
  | 'caseStudy.secondoryImage.remoteFile.modifiedTime'
  | 'caseStudy.secondoryImage.remoteFile.mtime'
  | 'caseStudy.secondoryImage.remoteFile.mtimeMs'
  | 'caseStudy.secondoryImage.remoteFile.name'
  | 'caseStudy.secondoryImage.remoteFile.nlink'
  | 'caseStudy.secondoryImage.remoteFile.prettySize'
  | 'caseStudy.secondoryImage.remoteFile.publicURL'
  | 'caseStudy.secondoryImage.remoteFile.rdev'
  | 'caseStudy.secondoryImage.remoteFile.relativeDirectory'
  | 'caseStudy.secondoryImage.remoteFile.relativePath'
  | 'caseStudy.secondoryImage.remoteFile.root'
  | 'caseStudy.secondoryImage.remoteFile.size'
  | 'caseStudy.secondoryImage.remoteFile.sourceInstanceName'
  | 'caseStudy.secondoryImage.remoteFile.uid'
  | 'caseStudy.secondoryImage.resize.height'
  | 'caseStudy.secondoryImage.resize.src'
  | 'caseStudy.secondoryImage.resize.width'
  | 'caseStudy.secondoryImage.seo.breadcrumbs'
  | 'caseStudy.secondoryImage.seo.canonical'
  | 'caseStudy.secondoryImage.seo.cornerstone'
  | 'caseStudy.secondoryImage.seo.focuskw'
  | 'caseStudy.secondoryImage.seo.fullHead'
  | 'caseStudy.secondoryImage.seo.metaDesc'
  | 'caseStudy.secondoryImage.seo.metaKeywords'
  | 'caseStudy.secondoryImage.seo.metaRobotsNofollow'
  | 'caseStudy.secondoryImage.seo.metaRobotsNoindex'
  | 'caseStudy.secondoryImage.seo.opengraphAuthor'
  | 'caseStudy.secondoryImage.seo.opengraphDescription'
  | 'caseStudy.secondoryImage.seo.opengraphModifiedTime'
  | 'caseStudy.secondoryImage.seo.opengraphPublishedTime'
  | 'caseStudy.secondoryImage.seo.opengraphPublisher'
  | 'caseStudy.secondoryImage.seo.opengraphSiteName'
  | 'caseStudy.secondoryImage.seo.opengraphTitle'
  | 'caseStudy.secondoryImage.seo.opengraphType'
  | 'caseStudy.secondoryImage.seo.opengraphUrl'
  | 'caseStudy.secondoryImage.seo.readingTime'
  | 'caseStudy.secondoryImage.seo.title'
  | 'caseStudy.secondoryImage.seo.twitterDescription'
  | 'caseStudy.secondoryImage.seo.twitterTitle'
  | 'caseStudy.secondoryImage.sizes'
  | 'caseStudy.secondoryImage.slug'
  | 'caseStudy.secondoryImage.sourceUrl'
  | 'caseStudy.secondoryImage.srcSet'
  | 'caseStudy.secondoryImage.status'
  | 'caseStudy.secondoryImage.template.templateName'
  | 'caseStudy.secondoryImage.title'
  | 'caseStudy.secondoryImage.uri'
  | 'caseStudy.secondoryImage.width'
  | 'caseStudy.secondoryImage.wpChildren.nodes'
  | 'caseStudy.strategy'
  | 'caseStudy.technology'
  | 'caseStudy.technology.fieldGroupName'
  | 'caseStudy.technology.name'
  | 'caseStudy.technology.svgIcon'
  | 'caseStudy.type'
  | 'categories.nodes'
  | 'categories.nodes.ancestors.nodes'
  | 'categories.nodes.children'
  | 'categories.nodes.children.children'
  | 'categories.nodes.children.id'
  | 'categories.nodes.contentNodes.nodes'
  | 'categories.nodes.count'
  | 'categories.nodes.databaseId'
  | 'categories.nodes.description'
  | 'categories.nodes.id'
  | 'categories.nodes.internal.content'
  | 'categories.nodes.internal.contentDigest'
  | 'categories.nodes.internal.contentFilePath'
  | 'categories.nodes.internal.description'
  | 'categories.nodes.internal.fieldOwners'
  | 'categories.nodes.internal.ignoreType'
  | 'categories.nodes.internal.mediaType'
  | 'categories.nodes.internal.owner'
  | 'categories.nodes.internal.type'
  | 'categories.nodes.isContentNode'
  | 'categories.nodes.isTermNode'
  | 'categories.nodes.link'
  | 'categories.nodes.name'
  | 'categories.nodes.nodeType'
  | 'categories.nodes.parentDatabaseId'
  | 'categories.nodes.parentId'
  | 'categories.nodes.parent.children'
  | 'categories.nodes.parent.id'
  | 'categories.nodes.posts.nodes'
  | 'categories.nodes.seo.breadcrumbs'
  | 'categories.nodes.seo.canonical'
  | 'categories.nodes.seo.cornerstone'
  | 'categories.nodes.seo.focuskw'
  | 'categories.nodes.seo.fullHead'
  | 'categories.nodes.seo.metaDesc'
  | 'categories.nodes.seo.metaKeywords'
  | 'categories.nodes.seo.metaRobotsNofollow'
  | 'categories.nodes.seo.metaRobotsNoindex'
  | 'categories.nodes.seo.opengraphAuthor'
  | 'categories.nodes.seo.opengraphDescription'
  | 'categories.nodes.seo.opengraphModifiedTime'
  | 'categories.nodes.seo.opengraphPublishedTime'
  | 'categories.nodes.seo.opengraphPublisher'
  | 'categories.nodes.seo.opengraphSiteName'
  | 'categories.nodes.seo.opengraphTitle'
  | 'categories.nodes.seo.opengraphType'
  | 'categories.nodes.seo.opengraphUrl'
  | 'categories.nodes.seo.title'
  | 'categories.nodes.seo.twitterDescription'
  | 'categories.nodes.seo.twitterTitle'
  | 'categories.nodes.slug'
  | 'categories.nodes.taxonomyName'
  | 'categories.nodes.termGroupId'
  | 'categories.nodes.termTaxonomyId'
  | 'categories.nodes.uri'
  | 'categories.nodes.wpChildren.nodes'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'commentCount'
  | 'commentStatus'
  | 'comments.nodes'
  | 'comments.nodes.agent'
  | 'comments.nodes.approved'
  | 'comments.nodes.authorIp'
  | 'comments.nodes.children'
  | 'comments.nodes.children.children'
  | 'comments.nodes.children.id'
  | 'comments.nodes.content'
  | 'comments.nodes.databaseId'
  | 'comments.nodes.date'
  | 'comments.nodes.dateGmt'
  | 'comments.nodes.id'
  | 'comments.nodes.internal.content'
  | 'comments.nodes.internal.contentDigest'
  | 'comments.nodes.internal.contentFilePath'
  | 'comments.nodes.internal.description'
  | 'comments.nodes.internal.fieldOwners'
  | 'comments.nodes.internal.ignoreType'
  | 'comments.nodes.internal.mediaType'
  | 'comments.nodes.internal.owner'
  | 'comments.nodes.internal.type'
  | 'comments.nodes.karma'
  | 'comments.nodes.nodeType'
  | 'comments.nodes.parentDatabaseId'
  | 'comments.nodes.parentId'
  | 'comments.nodes.parent.children'
  | 'comments.nodes.parent.id'
  | 'comments.nodes.replies.nodes'
  | 'comments.nodes.type'
  | 'content'
  | 'contentTypeName'
  | 'contentType.node.archivePath'
  | 'contentType.node.canExport'
  | 'contentType.node.children'
  | 'contentType.node.children.children'
  | 'contentType.node.children.id'
  | 'contentType.node.connectedTaxonomies.nodes'
  | 'contentType.node.contentNodes.nodes'
  | 'contentType.node.deleteWithUser'
  | 'contentType.node.description'
  | 'contentType.node.excludeFromSearch'
  | 'contentType.node.graphqlPluralName'
  | 'contentType.node.graphqlSingleName'
  | 'contentType.node.hasArchive'
  | 'contentType.node.hierarchical'
  | 'contentType.node.id'
  | 'contentType.node.internal.content'
  | 'contentType.node.internal.contentDigest'
  | 'contentType.node.internal.contentFilePath'
  | 'contentType.node.internal.description'
  | 'contentType.node.internal.fieldOwners'
  | 'contentType.node.internal.ignoreType'
  | 'contentType.node.internal.mediaType'
  | 'contentType.node.internal.owner'
  | 'contentType.node.internal.type'
  | 'contentType.node.isContentNode'
  | 'contentType.node.isFrontPage'
  | 'contentType.node.isPostsPage'
  | 'contentType.node.isTermNode'
  | 'contentType.node.label'
  | 'contentType.node.labels.addNew'
  | 'contentType.node.labels.addNewItem'
  | 'contentType.node.labels.allItems'
  | 'contentType.node.labels.archives'
  | 'contentType.node.labels.attributes'
  | 'contentType.node.labels.editItem'
  | 'contentType.node.labels.featuredImage'
  | 'contentType.node.labels.filterItemsList'
  | 'contentType.node.labels.insertIntoItem'
  | 'contentType.node.labels.itemsList'
  | 'contentType.node.labels.itemsListNavigation'
  | 'contentType.node.labels.menuName'
  | 'contentType.node.labels.name'
  | 'contentType.node.labels.newItem'
  | 'contentType.node.labels.notFound'
  | 'contentType.node.labels.notFoundInTrash'
  | 'contentType.node.labels.parentItemColon'
  | 'contentType.node.labels.removeFeaturedImage'
  | 'contentType.node.labels.searchItems'
  | 'contentType.node.labels.setFeaturedImage'
  | 'contentType.node.labels.singularName'
  | 'contentType.node.labels.uploadedToThisItem'
  | 'contentType.node.labels.useFeaturedImage'
  | 'contentType.node.labels.viewItem'
  | 'contentType.node.labels.viewItems'
  | 'contentType.node.menuIcon'
  | 'contentType.node.menuPosition'
  | 'contentType.node.name'
  | 'contentType.node.nodeType'
  | 'contentType.node.parent.children'
  | 'contentType.node.parent.id'
  | 'contentType.node.public'
  | 'contentType.node.publiclyQueryable'
  | 'contentType.node.restBase'
  | 'contentType.node.restControllerClass'
  | 'contentType.node.showInAdminBar'
  | 'contentType.node.showInGraphql'
  | 'contentType.node.showInMenu'
  | 'contentType.node.showInNavMenus'
  | 'contentType.node.showInRest'
  | 'contentType.node.showUi'
  | 'contentType.node.uri'
  | 'databaseId'
  | 'date'
  | 'dateGmt'
  | 'desiredSlug'
  | 'enclosure'
  | 'excerpt'
  | 'featuredImageDatabaseId'
  | 'featuredImageId'
  | 'featuredImage.node.altText'
  | 'featuredImage.node.ancestors.nodes'
  | 'featuredImage.node.authorDatabaseId'
  | 'featuredImage.node.authorId'
  | 'featuredImage.node.caption'
  | 'featuredImage.node.children'
  | 'featuredImage.node.children.children'
  | 'featuredImage.node.children.id'
  | 'featuredImage.node.commentCount'
  | 'featuredImage.node.commentStatus'
  | 'featuredImage.node.comments.nodes'
  | 'featuredImage.node.contentTypeName'
  | 'featuredImage.node.databaseId'
  | 'featuredImage.node.date'
  | 'featuredImage.node.dateGmt'
  | 'featuredImage.node.description'
  | 'featuredImage.node.desiredSlug'
  | 'featuredImage.node.enclosure'
  | 'featuredImage.node.fileSize'
  | 'featuredImage.node.filename'
  | 'featuredImage.node.filesize'
  | 'featuredImage.node.gatsbyImage'
  | 'featuredImage.node.guid'
  | 'featuredImage.node.height'
  | 'featuredImage.node.id'
  | 'featuredImage.node.internal.content'
  | 'featuredImage.node.internal.contentDigest'
  | 'featuredImage.node.internal.contentFilePath'
  | 'featuredImage.node.internal.description'
  | 'featuredImage.node.internal.fieldOwners'
  | 'featuredImage.node.internal.ignoreType'
  | 'featuredImage.node.internal.mediaType'
  | 'featuredImage.node.internal.owner'
  | 'featuredImage.node.internal.type'
  | 'featuredImage.node.isContentNode'
  | 'featuredImage.node.isTermNode'
  | 'featuredImage.node.link'
  | 'featuredImage.node.localFile.absolutePath'
  | 'featuredImage.node.localFile.accessTime'
  | 'featuredImage.node.localFile.atime'
  | 'featuredImage.node.localFile.atimeMs'
  | 'featuredImage.node.localFile.base'
  | 'featuredImage.node.localFile.birthTime'
  | 'featuredImage.node.localFile.birthtime'
  | 'featuredImage.node.localFile.birthtimeMs'
  | 'featuredImage.node.localFile.blksize'
  | 'featuredImage.node.localFile.blocks'
  | 'featuredImage.node.localFile.changeTime'
  | 'featuredImage.node.localFile.children'
  | 'featuredImage.node.localFile.childrenImageSharp'
  | 'featuredImage.node.localFile.ctime'
  | 'featuredImage.node.localFile.ctimeMs'
  | 'featuredImage.node.localFile.dev'
  | 'featuredImage.node.localFile.dir'
  | 'featuredImage.node.localFile.ext'
  | 'featuredImage.node.localFile.extension'
  | 'featuredImage.node.localFile.gid'
  | 'featuredImage.node.localFile.hash'
  | 'featuredImage.node.localFile.id'
  | 'featuredImage.node.localFile.ino'
  | 'featuredImage.node.localFile.mode'
  | 'featuredImage.node.localFile.modifiedTime'
  | 'featuredImage.node.localFile.mtime'
  | 'featuredImage.node.localFile.mtimeMs'
  | 'featuredImage.node.localFile.name'
  | 'featuredImage.node.localFile.nlink'
  | 'featuredImage.node.localFile.prettySize'
  | 'featuredImage.node.localFile.publicURL'
  | 'featuredImage.node.localFile.rdev'
  | 'featuredImage.node.localFile.relativeDirectory'
  | 'featuredImage.node.localFile.relativePath'
  | 'featuredImage.node.localFile.root'
  | 'featuredImage.node.localFile.size'
  | 'featuredImage.node.localFile.sourceInstanceName'
  | 'featuredImage.node.localFile.uid'
  | 'featuredImage.node.mediaDetails.file'
  | 'featuredImage.node.mediaDetails.height'
  | 'featuredImage.node.mediaDetails.sizes'
  | 'featuredImage.node.mediaDetails.width'
  | 'featuredImage.node.mediaItemUrl'
  | 'featuredImage.node.mediaType'
  | 'featuredImage.node.mimeType'
  | 'featuredImage.node.modified'
  | 'featuredImage.node.modifiedGmt'
  | 'featuredImage.node.nodeType'
  | 'featuredImage.node.parentDatabaseId'
  | 'featuredImage.node.parentId'
  | 'featuredImage.node.parent.children'
  | 'featuredImage.node.parent.id'
  | 'featuredImage.node.publicUrl'
  | 'featuredImage.node.remoteFile.absolutePath'
  | 'featuredImage.node.remoteFile.accessTime'
  | 'featuredImage.node.remoteFile.atime'
  | 'featuredImage.node.remoteFile.atimeMs'
  | 'featuredImage.node.remoteFile.base'
  | 'featuredImage.node.remoteFile.birthTime'
  | 'featuredImage.node.remoteFile.birthtime'
  | 'featuredImage.node.remoteFile.birthtimeMs'
  | 'featuredImage.node.remoteFile.blksize'
  | 'featuredImage.node.remoteFile.blocks'
  | 'featuredImage.node.remoteFile.changeTime'
  | 'featuredImage.node.remoteFile.children'
  | 'featuredImage.node.remoteFile.childrenImageSharp'
  | 'featuredImage.node.remoteFile.ctime'
  | 'featuredImage.node.remoteFile.ctimeMs'
  | 'featuredImage.node.remoteFile.dev'
  | 'featuredImage.node.remoteFile.dir'
  | 'featuredImage.node.remoteFile.ext'
  | 'featuredImage.node.remoteFile.extension'
  | 'featuredImage.node.remoteFile.gid'
  | 'featuredImage.node.remoteFile.hash'
  | 'featuredImage.node.remoteFile.id'
  | 'featuredImage.node.remoteFile.ino'
  | 'featuredImage.node.remoteFile.mode'
  | 'featuredImage.node.remoteFile.modifiedTime'
  | 'featuredImage.node.remoteFile.mtime'
  | 'featuredImage.node.remoteFile.mtimeMs'
  | 'featuredImage.node.remoteFile.name'
  | 'featuredImage.node.remoteFile.nlink'
  | 'featuredImage.node.remoteFile.prettySize'
  | 'featuredImage.node.remoteFile.publicURL'
  | 'featuredImage.node.remoteFile.rdev'
  | 'featuredImage.node.remoteFile.relativeDirectory'
  | 'featuredImage.node.remoteFile.relativePath'
  | 'featuredImage.node.remoteFile.root'
  | 'featuredImage.node.remoteFile.size'
  | 'featuredImage.node.remoteFile.sourceInstanceName'
  | 'featuredImage.node.remoteFile.uid'
  | 'featuredImage.node.resize.height'
  | 'featuredImage.node.resize.src'
  | 'featuredImage.node.resize.width'
  | 'featuredImage.node.seo.breadcrumbs'
  | 'featuredImage.node.seo.canonical'
  | 'featuredImage.node.seo.cornerstone'
  | 'featuredImage.node.seo.focuskw'
  | 'featuredImage.node.seo.fullHead'
  | 'featuredImage.node.seo.metaDesc'
  | 'featuredImage.node.seo.metaKeywords'
  | 'featuredImage.node.seo.metaRobotsNofollow'
  | 'featuredImage.node.seo.metaRobotsNoindex'
  | 'featuredImage.node.seo.opengraphAuthor'
  | 'featuredImage.node.seo.opengraphDescription'
  | 'featuredImage.node.seo.opengraphModifiedTime'
  | 'featuredImage.node.seo.opengraphPublishedTime'
  | 'featuredImage.node.seo.opengraphPublisher'
  | 'featuredImage.node.seo.opengraphSiteName'
  | 'featuredImage.node.seo.opengraphTitle'
  | 'featuredImage.node.seo.opengraphType'
  | 'featuredImage.node.seo.opengraphUrl'
  | 'featuredImage.node.seo.readingTime'
  | 'featuredImage.node.seo.title'
  | 'featuredImage.node.seo.twitterDescription'
  | 'featuredImage.node.seo.twitterTitle'
  | 'featuredImage.node.sizes'
  | 'featuredImage.node.slug'
  | 'featuredImage.node.sourceUrl'
  | 'featuredImage.node.srcSet'
  | 'featuredImage.node.status'
  | 'featuredImage.node.template.templateName'
  | 'featuredImage.node.title'
  | 'featuredImage.node.uri'
  | 'featuredImage.node.width'
  | 'featuredImage.node.wpChildren.nodes'
  | 'guid'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isRevision'
  | 'isSticky'
  | 'isTermNode'
  | 'lastEditedBy.node.authorProfile.fieldGroupName'
  | 'lastEditedBy.node.avatar.default'
  | 'lastEditedBy.node.avatar.extraAttr'
  | 'lastEditedBy.node.avatar.forceDefault'
  | 'lastEditedBy.node.avatar.foundAvatar'
  | 'lastEditedBy.node.avatar.height'
  | 'lastEditedBy.node.avatar.rating'
  | 'lastEditedBy.node.avatar.scheme'
  | 'lastEditedBy.node.avatar.size'
  | 'lastEditedBy.node.avatar.url'
  | 'lastEditedBy.node.avatar.width'
  | 'lastEditedBy.node.capKey'
  | 'lastEditedBy.node.capabilities'
  | 'lastEditedBy.node.children'
  | 'lastEditedBy.node.children.children'
  | 'lastEditedBy.node.children.id'
  | 'lastEditedBy.node.comments.nodes'
  | 'lastEditedBy.node.databaseId'
  | 'lastEditedBy.node.description'
  | 'lastEditedBy.node.email'
  | 'lastEditedBy.node.extraCapabilities'
  | 'lastEditedBy.node.firstName'
  | 'lastEditedBy.node.id'
  | 'lastEditedBy.node.internal.content'
  | 'lastEditedBy.node.internal.contentDigest'
  | 'lastEditedBy.node.internal.contentFilePath'
  | 'lastEditedBy.node.internal.description'
  | 'lastEditedBy.node.internal.fieldOwners'
  | 'lastEditedBy.node.internal.ignoreType'
  | 'lastEditedBy.node.internal.mediaType'
  | 'lastEditedBy.node.internal.owner'
  | 'lastEditedBy.node.internal.type'
  | 'lastEditedBy.node.isContentNode'
  | 'lastEditedBy.node.isTermNode'
  | 'lastEditedBy.node.lastName'
  | 'lastEditedBy.node.locale'
  | 'lastEditedBy.node.name'
  | 'lastEditedBy.node.nicename'
  | 'lastEditedBy.node.nickname'
  | 'lastEditedBy.node.nodeType'
  | 'lastEditedBy.node.pages.nodes'
  | 'lastEditedBy.node.parent.children'
  | 'lastEditedBy.node.parent.id'
  | 'lastEditedBy.node.posts.nodes'
  | 'lastEditedBy.node.registeredDate'
  | 'lastEditedBy.node.roles.nodes'
  | 'lastEditedBy.node.seo.breadcrumbTitle'
  | 'lastEditedBy.node.seo.canonical'
  | 'lastEditedBy.node.seo.fullHead'
  | 'lastEditedBy.node.seo.language'
  | 'lastEditedBy.node.seo.metaDesc'
  | 'lastEditedBy.node.seo.metaRobotsNofollow'
  | 'lastEditedBy.node.seo.metaRobotsNoindex'
  | 'lastEditedBy.node.seo.opengraphDescription'
  | 'lastEditedBy.node.seo.opengraphTitle'
  | 'lastEditedBy.node.seo.region'
  | 'lastEditedBy.node.seo.title'
  | 'lastEditedBy.node.seo.twitterDescription'
  | 'lastEditedBy.node.seo.twitterTitle'
  | 'lastEditedBy.node.slug'
  | 'lastEditedBy.node.uri'
  | 'lastEditedBy.node.url'
  | 'lastEditedBy.node.username'
  | 'link'
  | 'modified'
  | 'modifiedGmt'
  | 'next.authorDatabaseId'
  | 'next.authorId'
  | 'next.author.node.capKey'
  | 'next.author.node.capabilities'
  | 'next.author.node.children'
  | 'next.author.node.databaseId'
  | 'next.author.node.description'
  | 'next.author.node.email'
  | 'next.author.node.extraCapabilities'
  | 'next.author.node.firstName'
  | 'next.author.node.id'
  | 'next.author.node.isContentNode'
  | 'next.author.node.isTermNode'
  | 'next.author.node.lastName'
  | 'next.author.node.locale'
  | 'next.author.node.name'
  | 'next.author.node.nicename'
  | 'next.author.node.nickname'
  | 'next.author.node.nodeType'
  | 'next.author.node.registeredDate'
  | 'next.author.node.slug'
  | 'next.author.node.uri'
  | 'next.author.node.url'
  | 'next.author.node.username'
  | 'next.caseStudy.appGallery'
  | 'next.caseStudy.appGallery.altText'
  | 'next.caseStudy.appGallery.authorDatabaseId'
  | 'next.caseStudy.appGallery.authorId'
  | 'next.caseStudy.appGallery.caption'
  | 'next.caseStudy.appGallery.children'
  | 'next.caseStudy.appGallery.commentCount'
  | 'next.caseStudy.appGallery.commentStatus'
  | 'next.caseStudy.appGallery.contentTypeName'
  | 'next.caseStudy.appGallery.databaseId'
  | 'next.caseStudy.appGallery.date'
  | 'next.caseStudy.appGallery.dateGmt'
  | 'next.caseStudy.appGallery.description'
  | 'next.caseStudy.appGallery.desiredSlug'
  | 'next.caseStudy.appGallery.enclosure'
  | 'next.caseStudy.appGallery.fileSize'
  | 'next.caseStudy.appGallery.filename'
  | 'next.caseStudy.appGallery.filesize'
  | 'next.caseStudy.appGallery.gatsbyImage'
  | 'next.caseStudy.appGallery.guid'
  | 'next.caseStudy.appGallery.height'
  | 'next.caseStudy.appGallery.id'
  | 'next.caseStudy.appGallery.isContentNode'
  | 'next.caseStudy.appGallery.isTermNode'
  | 'next.caseStudy.appGallery.link'
  | 'next.caseStudy.appGallery.mediaItemUrl'
  | 'next.caseStudy.appGallery.mediaType'
  | 'next.caseStudy.appGallery.mimeType'
  | 'next.caseStudy.appGallery.modified'
  | 'next.caseStudy.appGallery.modifiedGmt'
  | 'next.caseStudy.appGallery.nodeType'
  | 'next.caseStudy.appGallery.parentDatabaseId'
  | 'next.caseStudy.appGallery.parentId'
  | 'next.caseStudy.appGallery.publicUrl'
  | 'next.caseStudy.appGallery.sizes'
  | 'next.caseStudy.appGallery.slug'
  | 'next.caseStudy.appGallery.sourceUrl'
  | 'next.caseStudy.appGallery.srcSet'
  | 'next.caseStudy.appGallery.status'
  | 'next.caseStudy.appGallery.title'
  | 'next.caseStudy.appGallery.uri'
  | 'next.caseStudy.appGallery.width'
  | 'next.caseStudy.detailPageImage.altText'
  | 'next.caseStudy.detailPageImage.authorDatabaseId'
  | 'next.caseStudy.detailPageImage.authorId'
  | 'next.caseStudy.detailPageImage.caption'
  | 'next.caseStudy.detailPageImage.children'
  | 'next.caseStudy.detailPageImage.commentCount'
  | 'next.caseStudy.detailPageImage.commentStatus'
  | 'next.caseStudy.detailPageImage.contentTypeName'
  | 'next.caseStudy.detailPageImage.databaseId'
  | 'next.caseStudy.detailPageImage.date'
  | 'next.caseStudy.detailPageImage.dateGmt'
  | 'next.caseStudy.detailPageImage.description'
  | 'next.caseStudy.detailPageImage.desiredSlug'
  | 'next.caseStudy.detailPageImage.enclosure'
  | 'next.caseStudy.detailPageImage.fileSize'
  | 'next.caseStudy.detailPageImage.filename'
  | 'next.caseStudy.detailPageImage.filesize'
  | 'next.caseStudy.detailPageImage.gatsbyImage'
  | 'next.caseStudy.detailPageImage.guid'
  | 'next.caseStudy.detailPageImage.height'
  | 'next.caseStudy.detailPageImage.id'
  | 'next.caseStudy.detailPageImage.isContentNode'
  | 'next.caseStudy.detailPageImage.isTermNode'
  | 'next.caseStudy.detailPageImage.link'
  | 'next.caseStudy.detailPageImage.mediaItemUrl'
  | 'next.caseStudy.detailPageImage.mediaType'
  | 'next.caseStudy.detailPageImage.mimeType'
  | 'next.caseStudy.detailPageImage.modified'
  | 'next.caseStudy.detailPageImage.modifiedGmt'
  | 'next.caseStudy.detailPageImage.nodeType'
  | 'next.caseStudy.detailPageImage.parentDatabaseId'
  | 'next.caseStudy.detailPageImage.parentId'
  | 'next.caseStudy.detailPageImage.publicUrl'
  | 'next.caseStudy.detailPageImage.sizes'
  | 'next.caseStudy.detailPageImage.slug'
  | 'next.caseStudy.detailPageImage.sourceUrl'
  | 'next.caseStudy.detailPageImage.srcSet'
  | 'next.caseStudy.detailPageImage.status'
  | 'next.caseStudy.detailPageImage.title'
  | 'next.caseStudy.detailPageImage.uri'
  | 'next.caseStudy.detailPageImage.width'
  | 'next.caseStudy.fieldGroupName'
  | 'next.caseStudy.gallery'
  | 'next.caseStudy.gallery.altText'
  | 'next.caseStudy.gallery.authorDatabaseId'
  | 'next.caseStudy.gallery.authorId'
  | 'next.caseStudy.gallery.caption'
  | 'next.caseStudy.gallery.children'
  | 'next.caseStudy.gallery.commentCount'
  | 'next.caseStudy.gallery.commentStatus'
  | 'next.caseStudy.gallery.contentTypeName'
  | 'next.caseStudy.gallery.databaseId'
  | 'next.caseStudy.gallery.date'
  | 'next.caseStudy.gallery.dateGmt'
  | 'next.caseStudy.gallery.description'
  | 'next.caseStudy.gallery.desiredSlug'
  | 'next.caseStudy.gallery.enclosure'
  | 'next.caseStudy.gallery.fileSize'
  | 'next.caseStudy.gallery.filename'
  | 'next.caseStudy.gallery.filesize'
  | 'next.caseStudy.gallery.gatsbyImage'
  | 'next.caseStudy.gallery.guid'
  | 'next.caseStudy.gallery.height'
  | 'next.caseStudy.gallery.id'
  | 'next.caseStudy.gallery.isContentNode'
  | 'next.caseStudy.gallery.isTermNode'
  | 'next.caseStudy.gallery.link'
  | 'next.caseStudy.gallery.mediaItemUrl'
  | 'next.caseStudy.gallery.mediaType'
  | 'next.caseStudy.gallery.mimeType'
  | 'next.caseStudy.gallery.modified'
  | 'next.caseStudy.gallery.modifiedGmt'
  | 'next.caseStudy.gallery.nodeType'
  | 'next.caseStudy.gallery.parentDatabaseId'
  | 'next.caseStudy.gallery.parentId'
  | 'next.caseStudy.gallery.publicUrl'
  | 'next.caseStudy.gallery.sizes'
  | 'next.caseStudy.gallery.slug'
  | 'next.caseStudy.gallery.sourceUrl'
  | 'next.caseStudy.gallery.srcSet'
  | 'next.caseStudy.gallery.status'
  | 'next.caseStudy.gallery.title'
  | 'next.caseStudy.gallery.uri'
  | 'next.caseStudy.gallery.width'
  | 'next.caseStudy.ourRole'
  | 'next.caseStudy.problem'
  | 'next.caseStudy.problemStrategyResultLayout'
  | 'next.caseStudy.result'
  | 'next.caseStudy.secondoryImage.altText'
  | 'next.caseStudy.secondoryImage.authorDatabaseId'
  | 'next.caseStudy.secondoryImage.authorId'
  | 'next.caseStudy.secondoryImage.caption'
  | 'next.caseStudy.secondoryImage.children'
  | 'next.caseStudy.secondoryImage.commentCount'
  | 'next.caseStudy.secondoryImage.commentStatus'
  | 'next.caseStudy.secondoryImage.contentTypeName'
  | 'next.caseStudy.secondoryImage.databaseId'
  | 'next.caseStudy.secondoryImage.date'
  | 'next.caseStudy.secondoryImage.dateGmt'
  | 'next.caseStudy.secondoryImage.description'
  | 'next.caseStudy.secondoryImage.desiredSlug'
  | 'next.caseStudy.secondoryImage.enclosure'
  | 'next.caseStudy.secondoryImage.fileSize'
  | 'next.caseStudy.secondoryImage.filename'
  | 'next.caseStudy.secondoryImage.filesize'
  | 'next.caseStudy.secondoryImage.gatsbyImage'
  | 'next.caseStudy.secondoryImage.guid'
  | 'next.caseStudy.secondoryImage.height'
  | 'next.caseStudy.secondoryImage.id'
  | 'next.caseStudy.secondoryImage.isContentNode'
  | 'next.caseStudy.secondoryImage.isTermNode'
  | 'next.caseStudy.secondoryImage.link'
  | 'next.caseStudy.secondoryImage.mediaItemUrl'
  | 'next.caseStudy.secondoryImage.mediaType'
  | 'next.caseStudy.secondoryImage.mimeType'
  | 'next.caseStudy.secondoryImage.modified'
  | 'next.caseStudy.secondoryImage.modifiedGmt'
  | 'next.caseStudy.secondoryImage.nodeType'
  | 'next.caseStudy.secondoryImage.parentDatabaseId'
  | 'next.caseStudy.secondoryImage.parentId'
  | 'next.caseStudy.secondoryImage.publicUrl'
  | 'next.caseStudy.secondoryImage.sizes'
  | 'next.caseStudy.secondoryImage.slug'
  | 'next.caseStudy.secondoryImage.sourceUrl'
  | 'next.caseStudy.secondoryImage.srcSet'
  | 'next.caseStudy.secondoryImage.status'
  | 'next.caseStudy.secondoryImage.title'
  | 'next.caseStudy.secondoryImage.uri'
  | 'next.caseStudy.secondoryImage.width'
  | 'next.caseStudy.strategy'
  | 'next.caseStudy.technology'
  | 'next.caseStudy.technology.fieldGroupName'
  | 'next.caseStudy.technology.name'
  | 'next.caseStudy.technology.svgIcon'
  | 'next.caseStudy.type'
  | 'next.categories.nodes'
  | 'next.categories.nodes.children'
  | 'next.categories.nodes.count'
  | 'next.categories.nodes.databaseId'
  | 'next.categories.nodes.description'
  | 'next.categories.nodes.id'
  | 'next.categories.nodes.isContentNode'
  | 'next.categories.nodes.isTermNode'
  | 'next.categories.nodes.link'
  | 'next.categories.nodes.name'
  | 'next.categories.nodes.nodeType'
  | 'next.categories.nodes.parentDatabaseId'
  | 'next.categories.nodes.parentId'
  | 'next.categories.nodes.slug'
  | 'next.categories.nodes.taxonomyName'
  | 'next.categories.nodes.termGroupId'
  | 'next.categories.nodes.termTaxonomyId'
  | 'next.categories.nodes.uri'
  | 'next.children'
  | 'next.children.children'
  | 'next.children.children.children'
  | 'next.children.children.id'
  | 'next.children.id'
  | 'next.children.internal.content'
  | 'next.children.internal.contentDigest'
  | 'next.children.internal.contentFilePath'
  | 'next.children.internal.description'
  | 'next.children.internal.fieldOwners'
  | 'next.children.internal.ignoreType'
  | 'next.children.internal.mediaType'
  | 'next.children.internal.owner'
  | 'next.children.internal.type'
  | 'next.children.parent.children'
  | 'next.children.parent.id'
  | 'next.commentCount'
  | 'next.commentStatus'
  | 'next.comments.nodes'
  | 'next.comments.nodes.agent'
  | 'next.comments.nodes.approved'
  | 'next.comments.nodes.authorIp'
  | 'next.comments.nodes.children'
  | 'next.comments.nodes.content'
  | 'next.comments.nodes.databaseId'
  | 'next.comments.nodes.date'
  | 'next.comments.nodes.dateGmt'
  | 'next.comments.nodes.id'
  | 'next.comments.nodes.karma'
  | 'next.comments.nodes.nodeType'
  | 'next.comments.nodes.parentDatabaseId'
  | 'next.comments.nodes.parentId'
  | 'next.comments.nodes.type'
  | 'next.content'
  | 'next.contentTypeName'
  | 'next.contentType.node.archivePath'
  | 'next.contentType.node.canExport'
  | 'next.contentType.node.children'
  | 'next.contentType.node.deleteWithUser'
  | 'next.contentType.node.description'
  | 'next.contentType.node.excludeFromSearch'
  | 'next.contentType.node.graphqlPluralName'
  | 'next.contentType.node.graphqlSingleName'
  | 'next.contentType.node.hasArchive'
  | 'next.contentType.node.hierarchical'
  | 'next.contentType.node.id'
  | 'next.contentType.node.isContentNode'
  | 'next.contentType.node.isFrontPage'
  | 'next.contentType.node.isPostsPage'
  | 'next.contentType.node.isTermNode'
  | 'next.contentType.node.label'
  | 'next.contentType.node.menuIcon'
  | 'next.contentType.node.menuPosition'
  | 'next.contentType.node.name'
  | 'next.contentType.node.nodeType'
  | 'next.contentType.node.public'
  | 'next.contentType.node.publiclyQueryable'
  | 'next.contentType.node.restBase'
  | 'next.contentType.node.restControllerClass'
  | 'next.contentType.node.showInAdminBar'
  | 'next.contentType.node.showInGraphql'
  | 'next.contentType.node.showInMenu'
  | 'next.contentType.node.showInNavMenus'
  | 'next.contentType.node.showInRest'
  | 'next.contentType.node.showUi'
  | 'next.contentType.node.uri'
  | 'next.databaseId'
  | 'next.date'
  | 'next.dateGmt'
  | 'next.desiredSlug'
  | 'next.enclosure'
  | 'next.excerpt'
  | 'next.featuredImageDatabaseId'
  | 'next.featuredImageId'
  | 'next.featuredImage.node.altText'
  | 'next.featuredImage.node.authorDatabaseId'
  | 'next.featuredImage.node.authorId'
  | 'next.featuredImage.node.caption'
  | 'next.featuredImage.node.children'
  | 'next.featuredImage.node.commentCount'
  | 'next.featuredImage.node.commentStatus'
  | 'next.featuredImage.node.contentTypeName'
  | 'next.featuredImage.node.databaseId'
  | 'next.featuredImage.node.date'
  | 'next.featuredImage.node.dateGmt'
  | 'next.featuredImage.node.description'
  | 'next.featuredImage.node.desiredSlug'
  | 'next.featuredImage.node.enclosure'
  | 'next.featuredImage.node.fileSize'
  | 'next.featuredImage.node.filename'
  | 'next.featuredImage.node.filesize'
  | 'next.featuredImage.node.gatsbyImage'
  | 'next.featuredImage.node.guid'
  | 'next.featuredImage.node.height'
  | 'next.featuredImage.node.id'
  | 'next.featuredImage.node.isContentNode'
  | 'next.featuredImage.node.isTermNode'
  | 'next.featuredImage.node.link'
  | 'next.featuredImage.node.mediaItemUrl'
  | 'next.featuredImage.node.mediaType'
  | 'next.featuredImage.node.mimeType'
  | 'next.featuredImage.node.modified'
  | 'next.featuredImage.node.modifiedGmt'
  | 'next.featuredImage.node.nodeType'
  | 'next.featuredImage.node.parentDatabaseId'
  | 'next.featuredImage.node.parentId'
  | 'next.featuredImage.node.publicUrl'
  | 'next.featuredImage.node.sizes'
  | 'next.featuredImage.node.slug'
  | 'next.featuredImage.node.sourceUrl'
  | 'next.featuredImage.node.srcSet'
  | 'next.featuredImage.node.status'
  | 'next.featuredImage.node.title'
  | 'next.featuredImage.node.uri'
  | 'next.featuredImage.node.width'
  | 'next.guid'
  | 'next.id'
  | 'next.internal.content'
  | 'next.internal.contentDigest'
  | 'next.internal.contentFilePath'
  | 'next.internal.description'
  | 'next.internal.fieldOwners'
  | 'next.internal.ignoreType'
  | 'next.internal.mediaType'
  | 'next.internal.owner'
  | 'next.internal.type'
  | 'next.isContentNode'
  | 'next.isRevision'
  | 'next.isSticky'
  | 'next.isTermNode'
  | 'next.lastEditedBy.node.capKey'
  | 'next.lastEditedBy.node.capabilities'
  | 'next.lastEditedBy.node.children'
  | 'next.lastEditedBy.node.databaseId'
  | 'next.lastEditedBy.node.description'
  | 'next.lastEditedBy.node.email'
  | 'next.lastEditedBy.node.extraCapabilities'
  | 'next.lastEditedBy.node.firstName'
  | 'next.lastEditedBy.node.id'
  | 'next.lastEditedBy.node.isContentNode'
  | 'next.lastEditedBy.node.isTermNode'
  | 'next.lastEditedBy.node.lastName'
  | 'next.lastEditedBy.node.locale'
  | 'next.lastEditedBy.node.name'
  | 'next.lastEditedBy.node.nicename'
  | 'next.lastEditedBy.node.nickname'
  | 'next.lastEditedBy.node.nodeType'
  | 'next.lastEditedBy.node.registeredDate'
  | 'next.lastEditedBy.node.slug'
  | 'next.lastEditedBy.node.uri'
  | 'next.lastEditedBy.node.url'
  | 'next.lastEditedBy.node.username'
  | 'next.link'
  | 'next.modified'
  | 'next.modifiedGmt'
  | 'next.next.authorDatabaseId'
  | 'next.next.authorId'
  | 'next.next.caseStudy.appGallery'
  | 'next.next.caseStudy.fieldGroupName'
  | 'next.next.caseStudy.gallery'
  | 'next.next.caseStudy.ourRole'
  | 'next.next.caseStudy.problem'
  | 'next.next.caseStudy.problemStrategyResultLayout'
  | 'next.next.caseStudy.result'
  | 'next.next.caseStudy.strategy'
  | 'next.next.caseStudy.technology'
  | 'next.next.caseStudy.type'
  | 'next.next.categories.nodes'
  | 'next.next.children'
  | 'next.next.children.children'
  | 'next.next.children.id'
  | 'next.next.commentCount'
  | 'next.next.commentStatus'
  | 'next.next.comments.nodes'
  | 'next.next.content'
  | 'next.next.contentTypeName'
  | 'next.next.databaseId'
  | 'next.next.date'
  | 'next.next.dateGmt'
  | 'next.next.desiredSlug'
  | 'next.next.enclosure'
  | 'next.next.excerpt'
  | 'next.next.featuredImageDatabaseId'
  | 'next.next.featuredImageId'
  | 'next.next.guid'
  | 'next.next.id'
  | 'next.next.internal.content'
  | 'next.next.internal.contentDigest'
  | 'next.next.internal.contentFilePath'
  | 'next.next.internal.description'
  | 'next.next.internal.fieldOwners'
  | 'next.next.internal.ignoreType'
  | 'next.next.internal.mediaType'
  | 'next.next.internal.owner'
  | 'next.next.internal.type'
  | 'next.next.isContentNode'
  | 'next.next.isRevision'
  | 'next.next.isSticky'
  | 'next.next.isTermNode'
  | 'next.next.link'
  | 'next.next.modified'
  | 'next.next.modifiedGmt'
  | 'next.next.next.authorDatabaseId'
  | 'next.next.next.authorId'
  | 'next.next.next.children'
  | 'next.next.next.commentCount'
  | 'next.next.next.commentStatus'
  | 'next.next.next.content'
  | 'next.next.next.contentTypeName'
  | 'next.next.next.databaseId'
  | 'next.next.next.date'
  | 'next.next.next.dateGmt'
  | 'next.next.next.desiredSlug'
  | 'next.next.next.enclosure'
  | 'next.next.next.excerpt'
  | 'next.next.next.featuredImageDatabaseId'
  | 'next.next.next.featuredImageId'
  | 'next.next.next.guid'
  | 'next.next.next.id'
  | 'next.next.next.isContentNode'
  | 'next.next.next.isRevision'
  | 'next.next.next.isSticky'
  | 'next.next.next.isTermNode'
  | 'next.next.next.link'
  | 'next.next.next.modified'
  | 'next.next.next.modifiedGmt'
  | 'next.next.next.nodeType'
  | 'next.next.next.pingStatus'
  | 'next.next.next.pinged'
  | 'next.next.next.slug'
  | 'next.next.next.status'
  | 'next.next.next.title'
  | 'next.next.next.toPing'
  | 'next.next.next.uri'
  | 'next.next.nodeType'
  | 'next.next.parent.children'
  | 'next.next.parent.id'
  | 'next.next.pingStatus'
  | 'next.next.pinged'
  | 'next.next.postFormats.nodes'
  | 'next.next.previous.authorDatabaseId'
  | 'next.next.previous.authorId'
  | 'next.next.previous.children'
  | 'next.next.previous.commentCount'
  | 'next.next.previous.commentStatus'
  | 'next.next.previous.content'
  | 'next.next.previous.contentTypeName'
  | 'next.next.previous.databaseId'
  | 'next.next.previous.date'
  | 'next.next.previous.dateGmt'
  | 'next.next.previous.desiredSlug'
  | 'next.next.previous.enclosure'
  | 'next.next.previous.excerpt'
  | 'next.next.previous.featuredImageDatabaseId'
  | 'next.next.previous.featuredImageId'
  | 'next.next.previous.guid'
  | 'next.next.previous.id'
  | 'next.next.previous.isContentNode'
  | 'next.next.previous.isRevision'
  | 'next.next.previous.isSticky'
  | 'next.next.previous.isTermNode'
  | 'next.next.previous.link'
  | 'next.next.previous.modified'
  | 'next.next.previous.modifiedGmt'
  | 'next.next.previous.nodeType'
  | 'next.next.previous.pingStatus'
  | 'next.next.previous.pinged'
  | 'next.next.previous.slug'
  | 'next.next.previous.status'
  | 'next.next.previous.title'
  | 'next.next.previous.toPing'
  | 'next.next.previous.uri'
  | 'next.next.selectCaseStudy.fieldGroupName'
  | 'next.next.seo.breadcrumbs'
  | 'next.next.seo.canonical'
  | 'next.next.seo.cornerstone'
  | 'next.next.seo.focuskw'
  | 'next.next.seo.fullHead'
  | 'next.next.seo.metaDesc'
  | 'next.next.seo.metaKeywords'
  | 'next.next.seo.metaRobotsNofollow'
  | 'next.next.seo.metaRobotsNoindex'
  | 'next.next.seo.opengraphAuthor'
  | 'next.next.seo.opengraphDescription'
  | 'next.next.seo.opengraphModifiedTime'
  | 'next.next.seo.opengraphPublishedTime'
  | 'next.next.seo.opengraphPublisher'
  | 'next.next.seo.opengraphSiteName'
  | 'next.next.seo.opengraphTitle'
  | 'next.next.seo.opengraphType'
  | 'next.next.seo.opengraphUrl'
  | 'next.next.seo.readingTime'
  | 'next.next.seo.title'
  | 'next.next.seo.twitterDescription'
  | 'next.next.seo.twitterTitle'
  | 'next.next.slug'
  | 'next.next.status'
  | 'next.next.tags.nodes'
  | 'next.next.template.templateName'
  | 'next.next.terms.nodes'
  | 'next.next.title'
  | 'next.next.toPing'
  | 'next.next.uri'
  | 'next.nodeType'
  | 'next.parent.children'
  | 'next.parent.children.children'
  | 'next.parent.children.id'
  | 'next.parent.id'
  | 'next.parent.internal.content'
  | 'next.parent.internal.contentDigest'
  | 'next.parent.internal.contentFilePath'
  | 'next.parent.internal.description'
  | 'next.parent.internal.fieldOwners'
  | 'next.parent.internal.ignoreType'
  | 'next.parent.internal.mediaType'
  | 'next.parent.internal.owner'
  | 'next.parent.internal.type'
  | 'next.parent.parent.children'
  | 'next.parent.parent.id'
  | 'next.pingStatus'
  | 'next.pinged'
  | 'next.postFormats.nodes'
  | 'next.postFormats.nodes.children'
  | 'next.postFormats.nodes.count'
  | 'next.postFormats.nodes.databaseId'
  | 'next.postFormats.nodes.description'
  | 'next.postFormats.nodes.id'
  | 'next.postFormats.nodes.isContentNode'
  | 'next.postFormats.nodes.isTermNode'
  | 'next.postFormats.nodes.link'
  | 'next.postFormats.nodes.name'
  | 'next.postFormats.nodes.nodeType'
  | 'next.postFormats.nodes.slug'
  | 'next.postFormats.nodes.taxonomyName'
  | 'next.postFormats.nodes.termGroupId'
  | 'next.postFormats.nodes.termTaxonomyId'
  | 'next.postFormats.nodes.uri'
  | 'next.previous.authorDatabaseId'
  | 'next.previous.authorId'
  | 'next.previous.caseStudy.appGallery'
  | 'next.previous.caseStudy.fieldGroupName'
  | 'next.previous.caseStudy.gallery'
  | 'next.previous.caseStudy.ourRole'
  | 'next.previous.caseStudy.problem'
  | 'next.previous.caseStudy.problemStrategyResultLayout'
  | 'next.previous.caseStudy.result'
  | 'next.previous.caseStudy.strategy'
  | 'next.previous.caseStudy.technology'
  | 'next.previous.caseStudy.type'
  | 'next.previous.categories.nodes'
  | 'next.previous.children'
  | 'next.previous.children.children'
  | 'next.previous.children.id'
  | 'next.previous.commentCount'
  | 'next.previous.commentStatus'
  | 'next.previous.comments.nodes'
  | 'next.previous.content'
  | 'next.previous.contentTypeName'
  | 'next.previous.databaseId'
  | 'next.previous.date'
  | 'next.previous.dateGmt'
  | 'next.previous.desiredSlug'
  | 'next.previous.enclosure'
  | 'next.previous.excerpt'
  | 'next.previous.featuredImageDatabaseId'
  | 'next.previous.featuredImageId'
  | 'next.previous.guid'
  | 'next.previous.id'
  | 'next.previous.internal.content'
  | 'next.previous.internal.contentDigest'
  | 'next.previous.internal.contentFilePath'
  | 'next.previous.internal.description'
  | 'next.previous.internal.fieldOwners'
  | 'next.previous.internal.ignoreType'
  | 'next.previous.internal.mediaType'
  | 'next.previous.internal.owner'
  | 'next.previous.internal.type'
  | 'next.previous.isContentNode'
  | 'next.previous.isRevision'
  | 'next.previous.isSticky'
  | 'next.previous.isTermNode'
  | 'next.previous.link'
  | 'next.previous.modified'
  | 'next.previous.modifiedGmt'
  | 'next.previous.next.authorDatabaseId'
  | 'next.previous.next.authorId'
  | 'next.previous.next.children'
  | 'next.previous.next.commentCount'
  | 'next.previous.next.commentStatus'
  | 'next.previous.next.content'
  | 'next.previous.next.contentTypeName'
  | 'next.previous.next.databaseId'
  | 'next.previous.next.date'
  | 'next.previous.next.dateGmt'
  | 'next.previous.next.desiredSlug'
  | 'next.previous.next.enclosure'
  | 'next.previous.next.excerpt'
  | 'next.previous.next.featuredImageDatabaseId'
  | 'next.previous.next.featuredImageId'
  | 'next.previous.next.guid'
  | 'next.previous.next.id'
  | 'next.previous.next.isContentNode'
  | 'next.previous.next.isRevision'
  | 'next.previous.next.isSticky'
  | 'next.previous.next.isTermNode'
  | 'next.previous.next.link'
  | 'next.previous.next.modified'
  | 'next.previous.next.modifiedGmt'
  | 'next.previous.next.nodeType'
  | 'next.previous.next.pingStatus'
  | 'next.previous.next.pinged'
  | 'next.previous.next.slug'
  | 'next.previous.next.status'
  | 'next.previous.next.title'
  | 'next.previous.next.toPing'
  | 'next.previous.next.uri'
  | 'next.previous.nodeType'
  | 'next.previous.parent.children'
  | 'next.previous.parent.id'
  | 'next.previous.pingStatus'
  | 'next.previous.pinged'
  | 'next.previous.postFormats.nodes'
  | 'next.previous.previous.authorDatabaseId'
  | 'next.previous.previous.authorId'
  | 'next.previous.previous.children'
  | 'next.previous.previous.commentCount'
  | 'next.previous.previous.commentStatus'
  | 'next.previous.previous.content'
  | 'next.previous.previous.contentTypeName'
  | 'next.previous.previous.databaseId'
  | 'next.previous.previous.date'
  | 'next.previous.previous.dateGmt'
  | 'next.previous.previous.desiredSlug'
  | 'next.previous.previous.enclosure'
  | 'next.previous.previous.excerpt'
  | 'next.previous.previous.featuredImageDatabaseId'
  | 'next.previous.previous.featuredImageId'
  | 'next.previous.previous.guid'
  | 'next.previous.previous.id'
  | 'next.previous.previous.isContentNode'
  | 'next.previous.previous.isRevision'
  | 'next.previous.previous.isSticky'
  | 'next.previous.previous.isTermNode'
  | 'next.previous.previous.link'
  | 'next.previous.previous.modified'
  | 'next.previous.previous.modifiedGmt'
  | 'next.previous.previous.nodeType'
  | 'next.previous.previous.pingStatus'
  | 'next.previous.previous.pinged'
  | 'next.previous.previous.slug'
  | 'next.previous.previous.status'
  | 'next.previous.previous.title'
  | 'next.previous.previous.toPing'
  | 'next.previous.previous.uri'
  | 'next.previous.selectCaseStudy.fieldGroupName'
  | 'next.previous.seo.breadcrumbs'
  | 'next.previous.seo.canonical'
  | 'next.previous.seo.cornerstone'
  | 'next.previous.seo.focuskw'
  | 'next.previous.seo.fullHead'
  | 'next.previous.seo.metaDesc'
  | 'next.previous.seo.metaKeywords'
  | 'next.previous.seo.metaRobotsNofollow'
  | 'next.previous.seo.metaRobotsNoindex'
  | 'next.previous.seo.opengraphAuthor'
  | 'next.previous.seo.opengraphDescription'
  | 'next.previous.seo.opengraphModifiedTime'
  | 'next.previous.seo.opengraphPublishedTime'
  | 'next.previous.seo.opengraphPublisher'
  | 'next.previous.seo.opengraphSiteName'
  | 'next.previous.seo.opengraphTitle'
  | 'next.previous.seo.opengraphType'
  | 'next.previous.seo.opengraphUrl'
  | 'next.previous.seo.readingTime'
  | 'next.previous.seo.title'
  | 'next.previous.seo.twitterDescription'
  | 'next.previous.seo.twitterTitle'
  | 'next.previous.slug'
  | 'next.previous.status'
  | 'next.previous.tags.nodes'
  | 'next.previous.template.templateName'
  | 'next.previous.terms.nodes'
  | 'next.previous.title'
  | 'next.previous.toPing'
  | 'next.previous.uri'
  | 'next.selectCaseStudy.fieldGroupName'
  | 'next.selectCaseStudy.listingPageImage.altText'
  | 'next.selectCaseStudy.listingPageImage.authorDatabaseId'
  | 'next.selectCaseStudy.listingPageImage.authorId'
  | 'next.selectCaseStudy.listingPageImage.caption'
  | 'next.selectCaseStudy.listingPageImage.children'
  | 'next.selectCaseStudy.listingPageImage.commentCount'
  | 'next.selectCaseStudy.listingPageImage.commentStatus'
  | 'next.selectCaseStudy.listingPageImage.contentTypeName'
  | 'next.selectCaseStudy.listingPageImage.databaseId'
  | 'next.selectCaseStudy.listingPageImage.date'
  | 'next.selectCaseStudy.listingPageImage.dateGmt'
  | 'next.selectCaseStudy.listingPageImage.description'
  | 'next.selectCaseStudy.listingPageImage.desiredSlug'
  | 'next.selectCaseStudy.listingPageImage.enclosure'
  | 'next.selectCaseStudy.listingPageImage.fileSize'
  | 'next.selectCaseStudy.listingPageImage.filename'
  | 'next.selectCaseStudy.listingPageImage.filesize'
  | 'next.selectCaseStudy.listingPageImage.gatsbyImage'
  | 'next.selectCaseStudy.listingPageImage.guid'
  | 'next.selectCaseStudy.listingPageImage.height'
  | 'next.selectCaseStudy.listingPageImage.id'
  | 'next.selectCaseStudy.listingPageImage.isContentNode'
  | 'next.selectCaseStudy.listingPageImage.isTermNode'
  | 'next.selectCaseStudy.listingPageImage.link'
  | 'next.selectCaseStudy.listingPageImage.mediaItemUrl'
  | 'next.selectCaseStudy.listingPageImage.mediaType'
  | 'next.selectCaseStudy.listingPageImage.mimeType'
  | 'next.selectCaseStudy.listingPageImage.modified'
  | 'next.selectCaseStudy.listingPageImage.modifiedGmt'
  | 'next.selectCaseStudy.listingPageImage.nodeType'
  | 'next.selectCaseStudy.listingPageImage.parentDatabaseId'
  | 'next.selectCaseStudy.listingPageImage.parentId'
  | 'next.selectCaseStudy.listingPageImage.publicUrl'
  | 'next.selectCaseStudy.listingPageImage.sizes'
  | 'next.selectCaseStudy.listingPageImage.slug'
  | 'next.selectCaseStudy.listingPageImage.sourceUrl'
  | 'next.selectCaseStudy.listingPageImage.srcSet'
  | 'next.selectCaseStudy.listingPageImage.status'
  | 'next.selectCaseStudy.listingPageImage.title'
  | 'next.selectCaseStudy.listingPageImage.uri'
  | 'next.selectCaseStudy.listingPageImage.width'
  | 'next.seo.breadcrumbs'
  | 'next.seo.breadcrumbs.text'
  | 'next.seo.breadcrumbs.url'
  | 'next.seo.canonical'
  | 'next.seo.cornerstone'
  | 'next.seo.focuskw'
  | 'next.seo.fullHead'
  | 'next.seo.metaDesc'
  | 'next.seo.metaKeywords'
  | 'next.seo.metaRobotsNofollow'
  | 'next.seo.metaRobotsNoindex'
  | 'next.seo.opengraphAuthor'
  | 'next.seo.opengraphDescription'
  | 'next.seo.opengraphImage.altText'
  | 'next.seo.opengraphImage.authorDatabaseId'
  | 'next.seo.opengraphImage.authorId'
  | 'next.seo.opengraphImage.caption'
  | 'next.seo.opengraphImage.children'
  | 'next.seo.opengraphImage.commentCount'
  | 'next.seo.opengraphImage.commentStatus'
  | 'next.seo.opengraphImage.contentTypeName'
  | 'next.seo.opengraphImage.databaseId'
  | 'next.seo.opengraphImage.date'
  | 'next.seo.opengraphImage.dateGmt'
  | 'next.seo.opengraphImage.description'
  | 'next.seo.opengraphImage.desiredSlug'
  | 'next.seo.opengraphImage.enclosure'
  | 'next.seo.opengraphImage.fileSize'
  | 'next.seo.opengraphImage.filename'
  | 'next.seo.opengraphImage.filesize'
  | 'next.seo.opengraphImage.gatsbyImage'
  | 'next.seo.opengraphImage.guid'
  | 'next.seo.opengraphImage.height'
  | 'next.seo.opengraphImage.id'
  | 'next.seo.opengraphImage.isContentNode'
  | 'next.seo.opengraphImage.isTermNode'
  | 'next.seo.opengraphImage.link'
  | 'next.seo.opengraphImage.mediaItemUrl'
  | 'next.seo.opengraphImage.mediaType'
  | 'next.seo.opengraphImage.mimeType'
  | 'next.seo.opengraphImage.modified'
  | 'next.seo.opengraphImage.modifiedGmt'
  | 'next.seo.opengraphImage.nodeType'
  | 'next.seo.opengraphImage.parentDatabaseId'
  | 'next.seo.opengraphImage.parentId'
  | 'next.seo.opengraphImage.publicUrl'
  | 'next.seo.opengraphImage.sizes'
  | 'next.seo.opengraphImage.slug'
  | 'next.seo.opengraphImage.sourceUrl'
  | 'next.seo.opengraphImage.srcSet'
  | 'next.seo.opengraphImage.status'
  | 'next.seo.opengraphImage.title'
  | 'next.seo.opengraphImage.uri'
  | 'next.seo.opengraphImage.width'
  | 'next.seo.opengraphModifiedTime'
  | 'next.seo.opengraphPublishedTime'
  | 'next.seo.opengraphPublisher'
  | 'next.seo.opengraphSiteName'
  | 'next.seo.opengraphTitle'
  | 'next.seo.opengraphType'
  | 'next.seo.opengraphUrl'
  | 'next.seo.readingTime'
  | 'next.seo.schema.articleType'
  | 'next.seo.schema.pageType'
  | 'next.seo.schema.raw'
  | 'next.seo.title'
  | 'next.seo.twitterDescription'
  | 'next.seo.twitterImage.altText'
  | 'next.seo.twitterImage.authorDatabaseId'
  | 'next.seo.twitterImage.authorId'
  | 'next.seo.twitterImage.caption'
  | 'next.seo.twitterImage.children'
  | 'next.seo.twitterImage.commentCount'
  | 'next.seo.twitterImage.commentStatus'
  | 'next.seo.twitterImage.contentTypeName'
  | 'next.seo.twitterImage.databaseId'
  | 'next.seo.twitterImage.date'
  | 'next.seo.twitterImage.dateGmt'
  | 'next.seo.twitterImage.description'
  | 'next.seo.twitterImage.desiredSlug'
  | 'next.seo.twitterImage.enclosure'
  | 'next.seo.twitterImage.fileSize'
  | 'next.seo.twitterImage.filename'
  | 'next.seo.twitterImage.filesize'
  | 'next.seo.twitterImage.gatsbyImage'
  | 'next.seo.twitterImage.guid'
  | 'next.seo.twitterImage.height'
  | 'next.seo.twitterImage.id'
  | 'next.seo.twitterImage.isContentNode'
  | 'next.seo.twitterImage.isTermNode'
  | 'next.seo.twitterImage.link'
  | 'next.seo.twitterImage.mediaItemUrl'
  | 'next.seo.twitterImage.mediaType'
  | 'next.seo.twitterImage.mimeType'
  | 'next.seo.twitterImage.modified'
  | 'next.seo.twitterImage.modifiedGmt'
  | 'next.seo.twitterImage.nodeType'
  | 'next.seo.twitterImage.parentDatabaseId'
  | 'next.seo.twitterImage.parentId'
  | 'next.seo.twitterImage.publicUrl'
  | 'next.seo.twitterImage.sizes'
  | 'next.seo.twitterImage.slug'
  | 'next.seo.twitterImage.sourceUrl'
  | 'next.seo.twitterImage.srcSet'
  | 'next.seo.twitterImage.status'
  | 'next.seo.twitterImage.title'
  | 'next.seo.twitterImage.uri'
  | 'next.seo.twitterImage.width'
  | 'next.seo.twitterTitle'
  | 'next.slug'
  | 'next.status'
  | 'next.tags.nodes'
  | 'next.tags.nodes.children'
  | 'next.tags.nodes.count'
  | 'next.tags.nodes.databaseId'
  | 'next.tags.nodes.description'
  | 'next.tags.nodes.id'
  | 'next.tags.nodes.isContentNode'
  | 'next.tags.nodes.isTermNode'
  | 'next.tags.nodes.link'
  | 'next.tags.nodes.name'
  | 'next.tags.nodes.nodeType'
  | 'next.tags.nodes.slug'
  | 'next.tags.nodes.taxonomyName'
  | 'next.tags.nodes.termGroupId'
  | 'next.tags.nodes.termTaxonomyId'
  | 'next.tags.nodes.uri'
  | 'next.template.templateName'
  | 'next.terms.nodes'
  | 'next.terms.nodes.children'
  | 'next.terms.nodes.count'
  | 'next.terms.nodes.databaseId'
  | 'next.terms.nodes.description'
  | 'next.terms.nodes.id'
  | 'next.terms.nodes.isContentNode'
  | 'next.terms.nodes.isTermNode'
  | 'next.terms.nodes.link'
  | 'next.terms.nodes.name'
  | 'next.terms.nodes.nodeType'
  | 'next.terms.nodes.slug'
  | 'next.terms.nodes.taxonomyName'
  | 'next.terms.nodes.termGroupId'
  | 'next.terms.nodes.termTaxonomyId'
  | 'next.terms.nodes.uri'
  | 'next.title'
  | 'next.toPing'
  | 'next.uri'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pingStatus'
  | 'pinged'
  | 'postFormats.nodes'
  | 'postFormats.nodes.children'
  | 'postFormats.nodes.children.children'
  | 'postFormats.nodes.children.id'
  | 'postFormats.nodes.contentNodes.nodes'
  | 'postFormats.nodes.count'
  | 'postFormats.nodes.databaseId'
  | 'postFormats.nodes.description'
  | 'postFormats.nodes.id'
  | 'postFormats.nodes.internal.content'
  | 'postFormats.nodes.internal.contentDigest'
  | 'postFormats.nodes.internal.contentFilePath'
  | 'postFormats.nodes.internal.description'
  | 'postFormats.nodes.internal.fieldOwners'
  | 'postFormats.nodes.internal.ignoreType'
  | 'postFormats.nodes.internal.mediaType'
  | 'postFormats.nodes.internal.owner'
  | 'postFormats.nodes.internal.type'
  | 'postFormats.nodes.isContentNode'
  | 'postFormats.nodes.isTermNode'
  | 'postFormats.nodes.link'
  | 'postFormats.nodes.name'
  | 'postFormats.nodes.nodeType'
  | 'postFormats.nodes.parent.children'
  | 'postFormats.nodes.parent.id'
  | 'postFormats.nodes.posts.nodes'
  | 'postFormats.nodes.seo.breadcrumbs'
  | 'postFormats.nodes.seo.canonical'
  | 'postFormats.nodes.seo.cornerstone'
  | 'postFormats.nodes.seo.focuskw'
  | 'postFormats.nodes.seo.fullHead'
  | 'postFormats.nodes.seo.metaDesc'
  | 'postFormats.nodes.seo.metaKeywords'
  | 'postFormats.nodes.seo.metaRobotsNofollow'
  | 'postFormats.nodes.seo.metaRobotsNoindex'
  | 'postFormats.nodes.seo.opengraphAuthor'
  | 'postFormats.nodes.seo.opengraphDescription'
  | 'postFormats.nodes.seo.opengraphModifiedTime'
  | 'postFormats.nodes.seo.opengraphPublishedTime'
  | 'postFormats.nodes.seo.opengraphPublisher'
  | 'postFormats.nodes.seo.opengraphSiteName'
  | 'postFormats.nodes.seo.opengraphTitle'
  | 'postFormats.nodes.seo.opengraphType'
  | 'postFormats.nodes.seo.opengraphUrl'
  | 'postFormats.nodes.seo.title'
  | 'postFormats.nodes.seo.twitterDescription'
  | 'postFormats.nodes.seo.twitterTitle'
  | 'postFormats.nodes.slug'
  | 'postFormats.nodes.taxonomyName'
  | 'postFormats.nodes.termGroupId'
  | 'postFormats.nodes.termTaxonomyId'
  | 'postFormats.nodes.uri'
  | 'previous.authorDatabaseId'
  | 'previous.authorId'
  | 'previous.author.node.capKey'
  | 'previous.author.node.capabilities'
  | 'previous.author.node.children'
  | 'previous.author.node.databaseId'
  | 'previous.author.node.description'
  | 'previous.author.node.email'
  | 'previous.author.node.extraCapabilities'
  | 'previous.author.node.firstName'
  | 'previous.author.node.id'
  | 'previous.author.node.isContentNode'
  | 'previous.author.node.isTermNode'
  | 'previous.author.node.lastName'
  | 'previous.author.node.locale'
  | 'previous.author.node.name'
  | 'previous.author.node.nicename'
  | 'previous.author.node.nickname'
  | 'previous.author.node.nodeType'
  | 'previous.author.node.registeredDate'
  | 'previous.author.node.slug'
  | 'previous.author.node.uri'
  | 'previous.author.node.url'
  | 'previous.author.node.username'
  | 'previous.caseStudy.appGallery'
  | 'previous.caseStudy.appGallery.altText'
  | 'previous.caseStudy.appGallery.authorDatabaseId'
  | 'previous.caseStudy.appGallery.authorId'
  | 'previous.caseStudy.appGallery.caption'
  | 'previous.caseStudy.appGallery.children'
  | 'previous.caseStudy.appGallery.commentCount'
  | 'previous.caseStudy.appGallery.commentStatus'
  | 'previous.caseStudy.appGallery.contentTypeName'
  | 'previous.caseStudy.appGallery.databaseId'
  | 'previous.caseStudy.appGallery.date'
  | 'previous.caseStudy.appGallery.dateGmt'
  | 'previous.caseStudy.appGallery.description'
  | 'previous.caseStudy.appGallery.desiredSlug'
  | 'previous.caseStudy.appGallery.enclosure'
  | 'previous.caseStudy.appGallery.fileSize'
  | 'previous.caseStudy.appGallery.filename'
  | 'previous.caseStudy.appGallery.filesize'
  | 'previous.caseStudy.appGallery.gatsbyImage'
  | 'previous.caseStudy.appGallery.guid'
  | 'previous.caseStudy.appGallery.height'
  | 'previous.caseStudy.appGallery.id'
  | 'previous.caseStudy.appGallery.isContentNode'
  | 'previous.caseStudy.appGallery.isTermNode'
  | 'previous.caseStudy.appGallery.link'
  | 'previous.caseStudy.appGallery.mediaItemUrl'
  | 'previous.caseStudy.appGallery.mediaType'
  | 'previous.caseStudy.appGallery.mimeType'
  | 'previous.caseStudy.appGallery.modified'
  | 'previous.caseStudy.appGallery.modifiedGmt'
  | 'previous.caseStudy.appGallery.nodeType'
  | 'previous.caseStudy.appGallery.parentDatabaseId'
  | 'previous.caseStudy.appGallery.parentId'
  | 'previous.caseStudy.appGallery.publicUrl'
  | 'previous.caseStudy.appGallery.sizes'
  | 'previous.caseStudy.appGallery.slug'
  | 'previous.caseStudy.appGallery.sourceUrl'
  | 'previous.caseStudy.appGallery.srcSet'
  | 'previous.caseStudy.appGallery.status'
  | 'previous.caseStudy.appGallery.title'
  | 'previous.caseStudy.appGallery.uri'
  | 'previous.caseStudy.appGallery.width'
  | 'previous.caseStudy.detailPageImage.altText'
  | 'previous.caseStudy.detailPageImage.authorDatabaseId'
  | 'previous.caseStudy.detailPageImage.authorId'
  | 'previous.caseStudy.detailPageImage.caption'
  | 'previous.caseStudy.detailPageImage.children'
  | 'previous.caseStudy.detailPageImage.commentCount'
  | 'previous.caseStudy.detailPageImage.commentStatus'
  | 'previous.caseStudy.detailPageImage.contentTypeName'
  | 'previous.caseStudy.detailPageImage.databaseId'
  | 'previous.caseStudy.detailPageImage.date'
  | 'previous.caseStudy.detailPageImage.dateGmt'
  | 'previous.caseStudy.detailPageImage.description'
  | 'previous.caseStudy.detailPageImage.desiredSlug'
  | 'previous.caseStudy.detailPageImage.enclosure'
  | 'previous.caseStudy.detailPageImage.fileSize'
  | 'previous.caseStudy.detailPageImage.filename'
  | 'previous.caseStudy.detailPageImage.filesize'
  | 'previous.caseStudy.detailPageImage.gatsbyImage'
  | 'previous.caseStudy.detailPageImage.guid'
  | 'previous.caseStudy.detailPageImage.height'
  | 'previous.caseStudy.detailPageImage.id'
  | 'previous.caseStudy.detailPageImage.isContentNode'
  | 'previous.caseStudy.detailPageImage.isTermNode'
  | 'previous.caseStudy.detailPageImage.link'
  | 'previous.caseStudy.detailPageImage.mediaItemUrl'
  | 'previous.caseStudy.detailPageImage.mediaType'
  | 'previous.caseStudy.detailPageImage.mimeType'
  | 'previous.caseStudy.detailPageImage.modified'
  | 'previous.caseStudy.detailPageImage.modifiedGmt'
  | 'previous.caseStudy.detailPageImage.nodeType'
  | 'previous.caseStudy.detailPageImage.parentDatabaseId'
  | 'previous.caseStudy.detailPageImage.parentId'
  | 'previous.caseStudy.detailPageImage.publicUrl'
  | 'previous.caseStudy.detailPageImage.sizes'
  | 'previous.caseStudy.detailPageImage.slug'
  | 'previous.caseStudy.detailPageImage.sourceUrl'
  | 'previous.caseStudy.detailPageImage.srcSet'
  | 'previous.caseStudy.detailPageImage.status'
  | 'previous.caseStudy.detailPageImage.title'
  | 'previous.caseStudy.detailPageImage.uri'
  | 'previous.caseStudy.detailPageImage.width'
  | 'previous.caseStudy.fieldGroupName'
  | 'previous.caseStudy.gallery'
  | 'previous.caseStudy.gallery.altText'
  | 'previous.caseStudy.gallery.authorDatabaseId'
  | 'previous.caseStudy.gallery.authorId'
  | 'previous.caseStudy.gallery.caption'
  | 'previous.caseStudy.gallery.children'
  | 'previous.caseStudy.gallery.commentCount'
  | 'previous.caseStudy.gallery.commentStatus'
  | 'previous.caseStudy.gallery.contentTypeName'
  | 'previous.caseStudy.gallery.databaseId'
  | 'previous.caseStudy.gallery.date'
  | 'previous.caseStudy.gallery.dateGmt'
  | 'previous.caseStudy.gallery.description'
  | 'previous.caseStudy.gallery.desiredSlug'
  | 'previous.caseStudy.gallery.enclosure'
  | 'previous.caseStudy.gallery.fileSize'
  | 'previous.caseStudy.gallery.filename'
  | 'previous.caseStudy.gallery.filesize'
  | 'previous.caseStudy.gallery.gatsbyImage'
  | 'previous.caseStudy.gallery.guid'
  | 'previous.caseStudy.gallery.height'
  | 'previous.caseStudy.gallery.id'
  | 'previous.caseStudy.gallery.isContentNode'
  | 'previous.caseStudy.gallery.isTermNode'
  | 'previous.caseStudy.gallery.link'
  | 'previous.caseStudy.gallery.mediaItemUrl'
  | 'previous.caseStudy.gallery.mediaType'
  | 'previous.caseStudy.gallery.mimeType'
  | 'previous.caseStudy.gallery.modified'
  | 'previous.caseStudy.gallery.modifiedGmt'
  | 'previous.caseStudy.gallery.nodeType'
  | 'previous.caseStudy.gallery.parentDatabaseId'
  | 'previous.caseStudy.gallery.parentId'
  | 'previous.caseStudy.gallery.publicUrl'
  | 'previous.caseStudy.gallery.sizes'
  | 'previous.caseStudy.gallery.slug'
  | 'previous.caseStudy.gallery.sourceUrl'
  | 'previous.caseStudy.gallery.srcSet'
  | 'previous.caseStudy.gallery.status'
  | 'previous.caseStudy.gallery.title'
  | 'previous.caseStudy.gallery.uri'
  | 'previous.caseStudy.gallery.width'
  | 'previous.caseStudy.ourRole'
  | 'previous.caseStudy.problem'
  | 'previous.caseStudy.problemStrategyResultLayout'
  | 'previous.caseStudy.result'
  | 'previous.caseStudy.secondoryImage.altText'
  | 'previous.caseStudy.secondoryImage.authorDatabaseId'
  | 'previous.caseStudy.secondoryImage.authorId'
  | 'previous.caseStudy.secondoryImage.caption'
  | 'previous.caseStudy.secondoryImage.children'
  | 'previous.caseStudy.secondoryImage.commentCount'
  | 'previous.caseStudy.secondoryImage.commentStatus'
  | 'previous.caseStudy.secondoryImage.contentTypeName'
  | 'previous.caseStudy.secondoryImage.databaseId'
  | 'previous.caseStudy.secondoryImage.date'
  | 'previous.caseStudy.secondoryImage.dateGmt'
  | 'previous.caseStudy.secondoryImage.description'
  | 'previous.caseStudy.secondoryImage.desiredSlug'
  | 'previous.caseStudy.secondoryImage.enclosure'
  | 'previous.caseStudy.secondoryImage.fileSize'
  | 'previous.caseStudy.secondoryImage.filename'
  | 'previous.caseStudy.secondoryImage.filesize'
  | 'previous.caseStudy.secondoryImage.gatsbyImage'
  | 'previous.caseStudy.secondoryImage.guid'
  | 'previous.caseStudy.secondoryImage.height'
  | 'previous.caseStudy.secondoryImage.id'
  | 'previous.caseStudy.secondoryImage.isContentNode'
  | 'previous.caseStudy.secondoryImage.isTermNode'
  | 'previous.caseStudy.secondoryImage.link'
  | 'previous.caseStudy.secondoryImage.mediaItemUrl'
  | 'previous.caseStudy.secondoryImage.mediaType'
  | 'previous.caseStudy.secondoryImage.mimeType'
  | 'previous.caseStudy.secondoryImage.modified'
  | 'previous.caseStudy.secondoryImage.modifiedGmt'
  | 'previous.caseStudy.secondoryImage.nodeType'
  | 'previous.caseStudy.secondoryImage.parentDatabaseId'
  | 'previous.caseStudy.secondoryImage.parentId'
  | 'previous.caseStudy.secondoryImage.publicUrl'
  | 'previous.caseStudy.secondoryImage.sizes'
  | 'previous.caseStudy.secondoryImage.slug'
  | 'previous.caseStudy.secondoryImage.sourceUrl'
  | 'previous.caseStudy.secondoryImage.srcSet'
  | 'previous.caseStudy.secondoryImage.status'
  | 'previous.caseStudy.secondoryImage.title'
  | 'previous.caseStudy.secondoryImage.uri'
  | 'previous.caseStudy.secondoryImage.width'
  | 'previous.caseStudy.strategy'
  | 'previous.caseStudy.technology'
  | 'previous.caseStudy.technology.fieldGroupName'
  | 'previous.caseStudy.technology.name'
  | 'previous.caseStudy.technology.svgIcon'
  | 'previous.caseStudy.type'
  | 'previous.categories.nodes'
  | 'previous.categories.nodes.children'
  | 'previous.categories.nodes.count'
  | 'previous.categories.nodes.databaseId'
  | 'previous.categories.nodes.description'
  | 'previous.categories.nodes.id'
  | 'previous.categories.nodes.isContentNode'
  | 'previous.categories.nodes.isTermNode'
  | 'previous.categories.nodes.link'
  | 'previous.categories.nodes.name'
  | 'previous.categories.nodes.nodeType'
  | 'previous.categories.nodes.parentDatabaseId'
  | 'previous.categories.nodes.parentId'
  | 'previous.categories.nodes.slug'
  | 'previous.categories.nodes.taxonomyName'
  | 'previous.categories.nodes.termGroupId'
  | 'previous.categories.nodes.termTaxonomyId'
  | 'previous.categories.nodes.uri'
  | 'previous.children'
  | 'previous.children.children'
  | 'previous.children.children.children'
  | 'previous.children.children.id'
  | 'previous.children.id'
  | 'previous.children.internal.content'
  | 'previous.children.internal.contentDigest'
  | 'previous.children.internal.contentFilePath'
  | 'previous.children.internal.description'
  | 'previous.children.internal.fieldOwners'
  | 'previous.children.internal.ignoreType'
  | 'previous.children.internal.mediaType'
  | 'previous.children.internal.owner'
  | 'previous.children.internal.type'
  | 'previous.children.parent.children'
  | 'previous.children.parent.id'
  | 'previous.commentCount'
  | 'previous.commentStatus'
  | 'previous.comments.nodes'
  | 'previous.comments.nodes.agent'
  | 'previous.comments.nodes.approved'
  | 'previous.comments.nodes.authorIp'
  | 'previous.comments.nodes.children'
  | 'previous.comments.nodes.content'
  | 'previous.comments.nodes.databaseId'
  | 'previous.comments.nodes.date'
  | 'previous.comments.nodes.dateGmt'
  | 'previous.comments.nodes.id'
  | 'previous.comments.nodes.karma'
  | 'previous.comments.nodes.nodeType'
  | 'previous.comments.nodes.parentDatabaseId'
  | 'previous.comments.nodes.parentId'
  | 'previous.comments.nodes.type'
  | 'previous.content'
  | 'previous.contentTypeName'
  | 'previous.contentType.node.archivePath'
  | 'previous.contentType.node.canExport'
  | 'previous.contentType.node.children'
  | 'previous.contentType.node.deleteWithUser'
  | 'previous.contentType.node.description'
  | 'previous.contentType.node.excludeFromSearch'
  | 'previous.contentType.node.graphqlPluralName'
  | 'previous.contentType.node.graphqlSingleName'
  | 'previous.contentType.node.hasArchive'
  | 'previous.contentType.node.hierarchical'
  | 'previous.contentType.node.id'
  | 'previous.contentType.node.isContentNode'
  | 'previous.contentType.node.isFrontPage'
  | 'previous.contentType.node.isPostsPage'
  | 'previous.contentType.node.isTermNode'
  | 'previous.contentType.node.label'
  | 'previous.contentType.node.menuIcon'
  | 'previous.contentType.node.menuPosition'
  | 'previous.contentType.node.name'
  | 'previous.contentType.node.nodeType'
  | 'previous.contentType.node.public'
  | 'previous.contentType.node.publiclyQueryable'
  | 'previous.contentType.node.restBase'
  | 'previous.contentType.node.restControllerClass'
  | 'previous.contentType.node.showInAdminBar'
  | 'previous.contentType.node.showInGraphql'
  | 'previous.contentType.node.showInMenu'
  | 'previous.contentType.node.showInNavMenus'
  | 'previous.contentType.node.showInRest'
  | 'previous.contentType.node.showUi'
  | 'previous.contentType.node.uri'
  | 'previous.databaseId'
  | 'previous.date'
  | 'previous.dateGmt'
  | 'previous.desiredSlug'
  | 'previous.enclosure'
  | 'previous.excerpt'
  | 'previous.featuredImageDatabaseId'
  | 'previous.featuredImageId'
  | 'previous.featuredImage.node.altText'
  | 'previous.featuredImage.node.authorDatabaseId'
  | 'previous.featuredImage.node.authorId'
  | 'previous.featuredImage.node.caption'
  | 'previous.featuredImage.node.children'
  | 'previous.featuredImage.node.commentCount'
  | 'previous.featuredImage.node.commentStatus'
  | 'previous.featuredImage.node.contentTypeName'
  | 'previous.featuredImage.node.databaseId'
  | 'previous.featuredImage.node.date'
  | 'previous.featuredImage.node.dateGmt'
  | 'previous.featuredImage.node.description'
  | 'previous.featuredImage.node.desiredSlug'
  | 'previous.featuredImage.node.enclosure'
  | 'previous.featuredImage.node.fileSize'
  | 'previous.featuredImage.node.filename'
  | 'previous.featuredImage.node.filesize'
  | 'previous.featuredImage.node.gatsbyImage'
  | 'previous.featuredImage.node.guid'
  | 'previous.featuredImage.node.height'
  | 'previous.featuredImage.node.id'
  | 'previous.featuredImage.node.isContentNode'
  | 'previous.featuredImage.node.isTermNode'
  | 'previous.featuredImage.node.link'
  | 'previous.featuredImage.node.mediaItemUrl'
  | 'previous.featuredImage.node.mediaType'
  | 'previous.featuredImage.node.mimeType'
  | 'previous.featuredImage.node.modified'
  | 'previous.featuredImage.node.modifiedGmt'
  | 'previous.featuredImage.node.nodeType'
  | 'previous.featuredImage.node.parentDatabaseId'
  | 'previous.featuredImage.node.parentId'
  | 'previous.featuredImage.node.publicUrl'
  | 'previous.featuredImage.node.sizes'
  | 'previous.featuredImage.node.slug'
  | 'previous.featuredImage.node.sourceUrl'
  | 'previous.featuredImage.node.srcSet'
  | 'previous.featuredImage.node.status'
  | 'previous.featuredImage.node.title'
  | 'previous.featuredImage.node.uri'
  | 'previous.featuredImage.node.width'
  | 'previous.guid'
  | 'previous.id'
  | 'previous.internal.content'
  | 'previous.internal.contentDigest'
  | 'previous.internal.contentFilePath'
  | 'previous.internal.description'
  | 'previous.internal.fieldOwners'
  | 'previous.internal.ignoreType'
  | 'previous.internal.mediaType'
  | 'previous.internal.owner'
  | 'previous.internal.type'
  | 'previous.isContentNode'
  | 'previous.isRevision'
  | 'previous.isSticky'
  | 'previous.isTermNode'
  | 'previous.lastEditedBy.node.capKey'
  | 'previous.lastEditedBy.node.capabilities'
  | 'previous.lastEditedBy.node.children'
  | 'previous.lastEditedBy.node.databaseId'
  | 'previous.lastEditedBy.node.description'
  | 'previous.lastEditedBy.node.email'
  | 'previous.lastEditedBy.node.extraCapabilities'
  | 'previous.lastEditedBy.node.firstName'
  | 'previous.lastEditedBy.node.id'
  | 'previous.lastEditedBy.node.isContentNode'
  | 'previous.lastEditedBy.node.isTermNode'
  | 'previous.lastEditedBy.node.lastName'
  | 'previous.lastEditedBy.node.locale'
  | 'previous.lastEditedBy.node.name'
  | 'previous.lastEditedBy.node.nicename'
  | 'previous.lastEditedBy.node.nickname'
  | 'previous.lastEditedBy.node.nodeType'
  | 'previous.lastEditedBy.node.registeredDate'
  | 'previous.lastEditedBy.node.slug'
  | 'previous.lastEditedBy.node.uri'
  | 'previous.lastEditedBy.node.url'
  | 'previous.lastEditedBy.node.username'
  | 'previous.link'
  | 'previous.modified'
  | 'previous.modifiedGmt'
  | 'previous.next.authorDatabaseId'
  | 'previous.next.authorId'
  | 'previous.next.caseStudy.appGallery'
  | 'previous.next.caseStudy.fieldGroupName'
  | 'previous.next.caseStudy.gallery'
  | 'previous.next.caseStudy.ourRole'
  | 'previous.next.caseStudy.problem'
  | 'previous.next.caseStudy.problemStrategyResultLayout'
  | 'previous.next.caseStudy.result'
  | 'previous.next.caseStudy.strategy'
  | 'previous.next.caseStudy.technology'
  | 'previous.next.caseStudy.type'
  | 'previous.next.categories.nodes'
  | 'previous.next.children'
  | 'previous.next.children.children'
  | 'previous.next.children.id'
  | 'previous.next.commentCount'
  | 'previous.next.commentStatus'
  | 'previous.next.comments.nodes'
  | 'previous.next.content'
  | 'previous.next.contentTypeName'
  | 'previous.next.databaseId'
  | 'previous.next.date'
  | 'previous.next.dateGmt'
  | 'previous.next.desiredSlug'
  | 'previous.next.enclosure'
  | 'previous.next.excerpt'
  | 'previous.next.featuredImageDatabaseId'
  | 'previous.next.featuredImageId'
  | 'previous.next.guid'
  | 'previous.next.id'
  | 'previous.next.internal.content'
  | 'previous.next.internal.contentDigest'
  | 'previous.next.internal.contentFilePath'
  | 'previous.next.internal.description'
  | 'previous.next.internal.fieldOwners'
  | 'previous.next.internal.ignoreType'
  | 'previous.next.internal.mediaType'
  | 'previous.next.internal.owner'
  | 'previous.next.internal.type'
  | 'previous.next.isContentNode'
  | 'previous.next.isRevision'
  | 'previous.next.isSticky'
  | 'previous.next.isTermNode'
  | 'previous.next.link'
  | 'previous.next.modified'
  | 'previous.next.modifiedGmt'
  | 'previous.next.next.authorDatabaseId'
  | 'previous.next.next.authorId'
  | 'previous.next.next.children'
  | 'previous.next.next.commentCount'
  | 'previous.next.next.commentStatus'
  | 'previous.next.next.content'
  | 'previous.next.next.contentTypeName'
  | 'previous.next.next.databaseId'
  | 'previous.next.next.date'
  | 'previous.next.next.dateGmt'
  | 'previous.next.next.desiredSlug'
  | 'previous.next.next.enclosure'
  | 'previous.next.next.excerpt'
  | 'previous.next.next.featuredImageDatabaseId'
  | 'previous.next.next.featuredImageId'
  | 'previous.next.next.guid'
  | 'previous.next.next.id'
  | 'previous.next.next.isContentNode'
  | 'previous.next.next.isRevision'
  | 'previous.next.next.isSticky'
  | 'previous.next.next.isTermNode'
  | 'previous.next.next.link'
  | 'previous.next.next.modified'
  | 'previous.next.next.modifiedGmt'
  | 'previous.next.next.nodeType'
  | 'previous.next.next.pingStatus'
  | 'previous.next.next.pinged'
  | 'previous.next.next.slug'
  | 'previous.next.next.status'
  | 'previous.next.next.title'
  | 'previous.next.next.toPing'
  | 'previous.next.next.uri'
  | 'previous.next.nodeType'
  | 'previous.next.parent.children'
  | 'previous.next.parent.id'
  | 'previous.next.pingStatus'
  | 'previous.next.pinged'
  | 'previous.next.postFormats.nodes'
  | 'previous.next.previous.authorDatabaseId'
  | 'previous.next.previous.authorId'
  | 'previous.next.previous.children'
  | 'previous.next.previous.commentCount'
  | 'previous.next.previous.commentStatus'
  | 'previous.next.previous.content'
  | 'previous.next.previous.contentTypeName'
  | 'previous.next.previous.databaseId'
  | 'previous.next.previous.date'
  | 'previous.next.previous.dateGmt'
  | 'previous.next.previous.desiredSlug'
  | 'previous.next.previous.enclosure'
  | 'previous.next.previous.excerpt'
  | 'previous.next.previous.featuredImageDatabaseId'
  | 'previous.next.previous.featuredImageId'
  | 'previous.next.previous.guid'
  | 'previous.next.previous.id'
  | 'previous.next.previous.isContentNode'
  | 'previous.next.previous.isRevision'
  | 'previous.next.previous.isSticky'
  | 'previous.next.previous.isTermNode'
  | 'previous.next.previous.link'
  | 'previous.next.previous.modified'
  | 'previous.next.previous.modifiedGmt'
  | 'previous.next.previous.nodeType'
  | 'previous.next.previous.pingStatus'
  | 'previous.next.previous.pinged'
  | 'previous.next.previous.slug'
  | 'previous.next.previous.status'
  | 'previous.next.previous.title'
  | 'previous.next.previous.toPing'
  | 'previous.next.previous.uri'
  | 'previous.next.selectCaseStudy.fieldGroupName'
  | 'previous.next.seo.breadcrumbs'
  | 'previous.next.seo.canonical'
  | 'previous.next.seo.cornerstone'
  | 'previous.next.seo.focuskw'
  | 'previous.next.seo.fullHead'
  | 'previous.next.seo.metaDesc'
  | 'previous.next.seo.metaKeywords'
  | 'previous.next.seo.metaRobotsNofollow'
  | 'previous.next.seo.metaRobotsNoindex'
  | 'previous.next.seo.opengraphAuthor'
  | 'previous.next.seo.opengraphDescription'
  | 'previous.next.seo.opengraphModifiedTime'
  | 'previous.next.seo.opengraphPublishedTime'
  | 'previous.next.seo.opengraphPublisher'
  | 'previous.next.seo.opengraphSiteName'
  | 'previous.next.seo.opengraphTitle'
  | 'previous.next.seo.opengraphType'
  | 'previous.next.seo.opengraphUrl'
  | 'previous.next.seo.readingTime'
  | 'previous.next.seo.title'
  | 'previous.next.seo.twitterDescription'
  | 'previous.next.seo.twitterTitle'
  | 'previous.next.slug'
  | 'previous.next.status'
  | 'previous.next.tags.nodes'
  | 'previous.next.template.templateName'
  | 'previous.next.terms.nodes'
  | 'previous.next.title'
  | 'previous.next.toPing'
  | 'previous.next.uri'
  | 'previous.nodeType'
  | 'previous.parent.children'
  | 'previous.parent.children.children'
  | 'previous.parent.children.id'
  | 'previous.parent.id'
  | 'previous.parent.internal.content'
  | 'previous.parent.internal.contentDigest'
  | 'previous.parent.internal.contentFilePath'
  | 'previous.parent.internal.description'
  | 'previous.parent.internal.fieldOwners'
  | 'previous.parent.internal.ignoreType'
  | 'previous.parent.internal.mediaType'
  | 'previous.parent.internal.owner'
  | 'previous.parent.internal.type'
  | 'previous.parent.parent.children'
  | 'previous.parent.parent.id'
  | 'previous.pingStatus'
  | 'previous.pinged'
  | 'previous.postFormats.nodes'
  | 'previous.postFormats.nodes.children'
  | 'previous.postFormats.nodes.count'
  | 'previous.postFormats.nodes.databaseId'
  | 'previous.postFormats.nodes.description'
  | 'previous.postFormats.nodes.id'
  | 'previous.postFormats.nodes.isContentNode'
  | 'previous.postFormats.nodes.isTermNode'
  | 'previous.postFormats.nodes.link'
  | 'previous.postFormats.nodes.name'
  | 'previous.postFormats.nodes.nodeType'
  | 'previous.postFormats.nodes.slug'
  | 'previous.postFormats.nodes.taxonomyName'
  | 'previous.postFormats.nodes.termGroupId'
  | 'previous.postFormats.nodes.termTaxonomyId'
  | 'previous.postFormats.nodes.uri'
  | 'previous.previous.authorDatabaseId'
  | 'previous.previous.authorId'
  | 'previous.previous.caseStudy.appGallery'
  | 'previous.previous.caseStudy.fieldGroupName'
  | 'previous.previous.caseStudy.gallery'
  | 'previous.previous.caseStudy.ourRole'
  | 'previous.previous.caseStudy.problem'
  | 'previous.previous.caseStudy.problemStrategyResultLayout'
  | 'previous.previous.caseStudy.result'
  | 'previous.previous.caseStudy.strategy'
  | 'previous.previous.caseStudy.technology'
  | 'previous.previous.caseStudy.type'
  | 'previous.previous.categories.nodes'
  | 'previous.previous.children'
  | 'previous.previous.children.children'
  | 'previous.previous.children.id'
  | 'previous.previous.commentCount'
  | 'previous.previous.commentStatus'
  | 'previous.previous.comments.nodes'
  | 'previous.previous.content'
  | 'previous.previous.contentTypeName'
  | 'previous.previous.databaseId'
  | 'previous.previous.date'
  | 'previous.previous.dateGmt'
  | 'previous.previous.desiredSlug'
  | 'previous.previous.enclosure'
  | 'previous.previous.excerpt'
  | 'previous.previous.featuredImageDatabaseId'
  | 'previous.previous.featuredImageId'
  | 'previous.previous.guid'
  | 'previous.previous.id'
  | 'previous.previous.internal.content'
  | 'previous.previous.internal.contentDigest'
  | 'previous.previous.internal.contentFilePath'
  | 'previous.previous.internal.description'
  | 'previous.previous.internal.fieldOwners'
  | 'previous.previous.internal.ignoreType'
  | 'previous.previous.internal.mediaType'
  | 'previous.previous.internal.owner'
  | 'previous.previous.internal.type'
  | 'previous.previous.isContentNode'
  | 'previous.previous.isRevision'
  | 'previous.previous.isSticky'
  | 'previous.previous.isTermNode'
  | 'previous.previous.link'
  | 'previous.previous.modified'
  | 'previous.previous.modifiedGmt'
  | 'previous.previous.next.authorDatabaseId'
  | 'previous.previous.next.authorId'
  | 'previous.previous.next.children'
  | 'previous.previous.next.commentCount'
  | 'previous.previous.next.commentStatus'
  | 'previous.previous.next.content'
  | 'previous.previous.next.contentTypeName'
  | 'previous.previous.next.databaseId'
  | 'previous.previous.next.date'
  | 'previous.previous.next.dateGmt'
  | 'previous.previous.next.desiredSlug'
  | 'previous.previous.next.enclosure'
  | 'previous.previous.next.excerpt'
  | 'previous.previous.next.featuredImageDatabaseId'
  | 'previous.previous.next.featuredImageId'
  | 'previous.previous.next.guid'
  | 'previous.previous.next.id'
  | 'previous.previous.next.isContentNode'
  | 'previous.previous.next.isRevision'
  | 'previous.previous.next.isSticky'
  | 'previous.previous.next.isTermNode'
  | 'previous.previous.next.link'
  | 'previous.previous.next.modified'
  | 'previous.previous.next.modifiedGmt'
  | 'previous.previous.next.nodeType'
  | 'previous.previous.next.pingStatus'
  | 'previous.previous.next.pinged'
  | 'previous.previous.next.slug'
  | 'previous.previous.next.status'
  | 'previous.previous.next.title'
  | 'previous.previous.next.toPing'
  | 'previous.previous.next.uri'
  | 'previous.previous.nodeType'
  | 'previous.previous.parent.children'
  | 'previous.previous.parent.id'
  | 'previous.previous.pingStatus'
  | 'previous.previous.pinged'
  | 'previous.previous.postFormats.nodes'
  | 'previous.previous.previous.authorDatabaseId'
  | 'previous.previous.previous.authorId'
  | 'previous.previous.previous.children'
  | 'previous.previous.previous.commentCount'
  | 'previous.previous.previous.commentStatus'
  | 'previous.previous.previous.content'
  | 'previous.previous.previous.contentTypeName'
  | 'previous.previous.previous.databaseId'
  | 'previous.previous.previous.date'
  | 'previous.previous.previous.dateGmt'
  | 'previous.previous.previous.desiredSlug'
  | 'previous.previous.previous.enclosure'
  | 'previous.previous.previous.excerpt'
  | 'previous.previous.previous.featuredImageDatabaseId'
  | 'previous.previous.previous.featuredImageId'
  | 'previous.previous.previous.guid'
  | 'previous.previous.previous.id'
  | 'previous.previous.previous.isContentNode'
  | 'previous.previous.previous.isRevision'
  | 'previous.previous.previous.isSticky'
  | 'previous.previous.previous.isTermNode'
  | 'previous.previous.previous.link'
  | 'previous.previous.previous.modified'
  | 'previous.previous.previous.modifiedGmt'
  | 'previous.previous.previous.nodeType'
  | 'previous.previous.previous.pingStatus'
  | 'previous.previous.previous.pinged'
  | 'previous.previous.previous.slug'
  | 'previous.previous.previous.status'
  | 'previous.previous.previous.title'
  | 'previous.previous.previous.toPing'
  | 'previous.previous.previous.uri'
  | 'previous.previous.selectCaseStudy.fieldGroupName'
  | 'previous.previous.seo.breadcrumbs'
  | 'previous.previous.seo.canonical'
  | 'previous.previous.seo.cornerstone'
  | 'previous.previous.seo.focuskw'
  | 'previous.previous.seo.fullHead'
  | 'previous.previous.seo.metaDesc'
  | 'previous.previous.seo.metaKeywords'
  | 'previous.previous.seo.metaRobotsNofollow'
  | 'previous.previous.seo.metaRobotsNoindex'
  | 'previous.previous.seo.opengraphAuthor'
  | 'previous.previous.seo.opengraphDescription'
  | 'previous.previous.seo.opengraphModifiedTime'
  | 'previous.previous.seo.opengraphPublishedTime'
  | 'previous.previous.seo.opengraphPublisher'
  | 'previous.previous.seo.opengraphSiteName'
  | 'previous.previous.seo.opengraphTitle'
  | 'previous.previous.seo.opengraphType'
  | 'previous.previous.seo.opengraphUrl'
  | 'previous.previous.seo.readingTime'
  | 'previous.previous.seo.title'
  | 'previous.previous.seo.twitterDescription'
  | 'previous.previous.seo.twitterTitle'
  | 'previous.previous.slug'
  | 'previous.previous.status'
  | 'previous.previous.tags.nodes'
  | 'previous.previous.template.templateName'
  | 'previous.previous.terms.nodes'
  | 'previous.previous.title'
  | 'previous.previous.toPing'
  | 'previous.previous.uri'
  | 'previous.selectCaseStudy.fieldGroupName'
  | 'previous.selectCaseStudy.listingPageImage.altText'
  | 'previous.selectCaseStudy.listingPageImage.authorDatabaseId'
  | 'previous.selectCaseStudy.listingPageImage.authorId'
  | 'previous.selectCaseStudy.listingPageImage.caption'
  | 'previous.selectCaseStudy.listingPageImage.children'
  | 'previous.selectCaseStudy.listingPageImage.commentCount'
  | 'previous.selectCaseStudy.listingPageImage.commentStatus'
  | 'previous.selectCaseStudy.listingPageImage.contentTypeName'
  | 'previous.selectCaseStudy.listingPageImage.databaseId'
  | 'previous.selectCaseStudy.listingPageImage.date'
  | 'previous.selectCaseStudy.listingPageImage.dateGmt'
  | 'previous.selectCaseStudy.listingPageImage.description'
  | 'previous.selectCaseStudy.listingPageImage.desiredSlug'
  | 'previous.selectCaseStudy.listingPageImage.enclosure'
  | 'previous.selectCaseStudy.listingPageImage.fileSize'
  | 'previous.selectCaseStudy.listingPageImage.filename'
  | 'previous.selectCaseStudy.listingPageImage.filesize'
  | 'previous.selectCaseStudy.listingPageImage.gatsbyImage'
  | 'previous.selectCaseStudy.listingPageImage.guid'
  | 'previous.selectCaseStudy.listingPageImage.height'
  | 'previous.selectCaseStudy.listingPageImage.id'
  | 'previous.selectCaseStudy.listingPageImage.isContentNode'
  | 'previous.selectCaseStudy.listingPageImage.isTermNode'
  | 'previous.selectCaseStudy.listingPageImage.link'
  | 'previous.selectCaseStudy.listingPageImage.mediaItemUrl'
  | 'previous.selectCaseStudy.listingPageImage.mediaType'
  | 'previous.selectCaseStudy.listingPageImage.mimeType'
  | 'previous.selectCaseStudy.listingPageImage.modified'
  | 'previous.selectCaseStudy.listingPageImage.modifiedGmt'
  | 'previous.selectCaseStudy.listingPageImage.nodeType'
  | 'previous.selectCaseStudy.listingPageImage.parentDatabaseId'
  | 'previous.selectCaseStudy.listingPageImage.parentId'
  | 'previous.selectCaseStudy.listingPageImage.publicUrl'
  | 'previous.selectCaseStudy.listingPageImage.sizes'
  | 'previous.selectCaseStudy.listingPageImage.slug'
  | 'previous.selectCaseStudy.listingPageImage.sourceUrl'
  | 'previous.selectCaseStudy.listingPageImage.srcSet'
  | 'previous.selectCaseStudy.listingPageImage.status'
  | 'previous.selectCaseStudy.listingPageImage.title'
  | 'previous.selectCaseStudy.listingPageImage.uri'
  | 'previous.selectCaseStudy.listingPageImage.width'
  | 'previous.seo.breadcrumbs'
  | 'previous.seo.breadcrumbs.text'
  | 'previous.seo.breadcrumbs.url'
  | 'previous.seo.canonical'
  | 'previous.seo.cornerstone'
  | 'previous.seo.focuskw'
  | 'previous.seo.fullHead'
  | 'previous.seo.metaDesc'
  | 'previous.seo.metaKeywords'
  | 'previous.seo.metaRobotsNofollow'
  | 'previous.seo.metaRobotsNoindex'
  | 'previous.seo.opengraphAuthor'
  | 'previous.seo.opengraphDescription'
  | 'previous.seo.opengraphImage.altText'
  | 'previous.seo.opengraphImage.authorDatabaseId'
  | 'previous.seo.opengraphImage.authorId'
  | 'previous.seo.opengraphImage.caption'
  | 'previous.seo.opengraphImage.children'
  | 'previous.seo.opengraphImage.commentCount'
  | 'previous.seo.opengraphImage.commentStatus'
  | 'previous.seo.opengraphImage.contentTypeName'
  | 'previous.seo.opengraphImage.databaseId'
  | 'previous.seo.opengraphImage.date'
  | 'previous.seo.opengraphImage.dateGmt'
  | 'previous.seo.opengraphImage.description'
  | 'previous.seo.opengraphImage.desiredSlug'
  | 'previous.seo.opengraphImage.enclosure'
  | 'previous.seo.opengraphImage.fileSize'
  | 'previous.seo.opengraphImage.filename'
  | 'previous.seo.opengraphImage.filesize'
  | 'previous.seo.opengraphImage.gatsbyImage'
  | 'previous.seo.opengraphImage.guid'
  | 'previous.seo.opengraphImage.height'
  | 'previous.seo.opengraphImage.id'
  | 'previous.seo.opengraphImage.isContentNode'
  | 'previous.seo.opengraphImage.isTermNode'
  | 'previous.seo.opengraphImage.link'
  | 'previous.seo.opengraphImage.mediaItemUrl'
  | 'previous.seo.opengraphImage.mediaType'
  | 'previous.seo.opengraphImage.mimeType'
  | 'previous.seo.opengraphImage.modified'
  | 'previous.seo.opengraphImage.modifiedGmt'
  | 'previous.seo.opengraphImage.nodeType'
  | 'previous.seo.opengraphImage.parentDatabaseId'
  | 'previous.seo.opengraphImage.parentId'
  | 'previous.seo.opengraphImage.publicUrl'
  | 'previous.seo.opengraphImage.sizes'
  | 'previous.seo.opengraphImage.slug'
  | 'previous.seo.opengraphImage.sourceUrl'
  | 'previous.seo.opengraphImage.srcSet'
  | 'previous.seo.opengraphImage.status'
  | 'previous.seo.opengraphImage.title'
  | 'previous.seo.opengraphImage.uri'
  | 'previous.seo.opengraphImage.width'
  | 'previous.seo.opengraphModifiedTime'
  | 'previous.seo.opengraphPublishedTime'
  | 'previous.seo.opengraphPublisher'
  | 'previous.seo.opengraphSiteName'
  | 'previous.seo.opengraphTitle'
  | 'previous.seo.opengraphType'
  | 'previous.seo.opengraphUrl'
  | 'previous.seo.readingTime'
  | 'previous.seo.schema.articleType'
  | 'previous.seo.schema.pageType'
  | 'previous.seo.schema.raw'
  | 'previous.seo.title'
  | 'previous.seo.twitterDescription'
  | 'previous.seo.twitterImage.altText'
  | 'previous.seo.twitterImage.authorDatabaseId'
  | 'previous.seo.twitterImage.authorId'
  | 'previous.seo.twitterImage.caption'
  | 'previous.seo.twitterImage.children'
  | 'previous.seo.twitterImage.commentCount'
  | 'previous.seo.twitterImage.commentStatus'
  | 'previous.seo.twitterImage.contentTypeName'
  | 'previous.seo.twitterImage.databaseId'
  | 'previous.seo.twitterImage.date'
  | 'previous.seo.twitterImage.dateGmt'
  | 'previous.seo.twitterImage.description'
  | 'previous.seo.twitterImage.desiredSlug'
  | 'previous.seo.twitterImage.enclosure'
  | 'previous.seo.twitterImage.fileSize'
  | 'previous.seo.twitterImage.filename'
  | 'previous.seo.twitterImage.filesize'
  | 'previous.seo.twitterImage.gatsbyImage'
  | 'previous.seo.twitterImage.guid'
  | 'previous.seo.twitterImage.height'
  | 'previous.seo.twitterImage.id'
  | 'previous.seo.twitterImage.isContentNode'
  | 'previous.seo.twitterImage.isTermNode'
  | 'previous.seo.twitterImage.link'
  | 'previous.seo.twitterImage.mediaItemUrl'
  | 'previous.seo.twitterImage.mediaType'
  | 'previous.seo.twitterImage.mimeType'
  | 'previous.seo.twitterImage.modified'
  | 'previous.seo.twitterImage.modifiedGmt'
  | 'previous.seo.twitterImage.nodeType'
  | 'previous.seo.twitterImage.parentDatabaseId'
  | 'previous.seo.twitterImage.parentId'
  | 'previous.seo.twitterImage.publicUrl'
  | 'previous.seo.twitterImage.sizes'
  | 'previous.seo.twitterImage.slug'
  | 'previous.seo.twitterImage.sourceUrl'
  | 'previous.seo.twitterImage.srcSet'
  | 'previous.seo.twitterImage.status'
  | 'previous.seo.twitterImage.title'
  | 'previous.seo.twitterImage.uri'
  | 'previous.seo.twitterImage.width'
  | 'previous.seo.twitterTitle'
  | 'previous.slug'
  | 'previous.status'
  | 'previous.tags.nodes'
  | 'previous.tags.nodes.children'
  | 'previous.tags.nodes.count'
  | 'previous.tags.nodes.databaseId'
  | 'previous.tags.nodes.description'
  | 'previous.tags.nodes.id'
  | 'previous.tags.nodes.isContentNode'
  | 'previous.tags.nodes.isTermNode'
  | 'previous.tags.nodes.link'
  | 'previous.tags.nodes.name'
  | 'previous.tags.nodes.nodeType'
  | 'previous.tags.nodes.slug'
  | 'previous.tags.nodes.taxonomyName'
  | 'previous.tags.nodes.termGroupId'
  | 'previous.tags.nodes.termTaxonomyId'
  | 'previous.tags.nodes.uri'
  | 'previous.template.templateName'
  | 'previous.terms.nodes'
  | 'previous.terms.nodes.children'
  | 'previous.terms.nodes.count'
  | 'previous.terms.nodes.databaseId'
  | 'previous.terms.nodes.description'
  | 'previous.terms.nodes.id'
  | 'previous.terms.nodes.isContentNode'
  | 'previous.terms.nodes.isTermNode'
  | 'previous.terms.nodes.link'
  | 'previous.terms.nodes.name'
  | 'previous.terms.nodes.nodeType'
  | 'previous.terms.nodes.slug'
  | 'previous.terms.nodes.taxonomyName'
  | 'previous.terms.nodes.termGroupId'
  | 'previous.terms.nodes.termTaxonomyId'
  | 'previous.terms.nodes.uri'
  | 'previous.title'
  | 'previous.toPing'
  | 'previous.uri'
  | 'selectCaseStudy.fieldGroupName'
  | 'selectCaseStudy.listingPageImage.altText'
  | 'selectCaseStudy.listingPageImage.ancestors.nodes'
  | 'selectCaseStudy.listingPageImage.authorDatabaseId'
  | 'selectCaseStudy.listingPageImage.authorId'
  | 'selectCaseStudy.listingPageImage.caption'
  | 'selectCaseStudy.listingPageImage.children'
  | 'selectCaseStudy.listingPageImage.children.children'
  | 'selectCaseStudy.listingPageImage.children.id'
  | 'selectCaseStudy.listingPageImage.commentCount'
  | 'selectCaseStudy.listingPageImage.commentStatus'
  | 'selectCaseStudy.listingPageImage.comments.nodes'
  | 'selectCaseStudy.listingPageImage.contentTypeName'
  | 'selectCaseStudy.listingPageImage.databaseId'
  | 'selectCaseStudy.listingPageImage.date'
  | 'selectCaseStudy.listingPageImage.dateGmt'
  | 'selectCaseStudy.listingPageImage.description'
  | 'selectCaseStudy.listingPageImage.desiredSlug'
  | 'selectCaseStudy.listingPageImage.enclosure'
  | 'selectCaseStudy.listingPageImage.fileSize'
  | 'selectCaseStudy.listingPageImage.filename'
  | 'selectCaseStudy.listingPageImage.filesize'
  | 'selectCaseStudy.listingPageImage.gatsbyImage'
  | 'selectCaseStudy.listingPageImage.guid'
  | 'selectCaseStudy.listingPageImage.height'
  | 'selectCaseStudy.listingPageImage.id'
  | 'selectCaseStudy.listingPageImage.internal.content'
  | 'selectCaseStudy.listingPageImage.internal.contentDigest'
  | 'selectCaseStudy.listingPageImage.internal.contentFilePath'
  | 'selectCaseStudy.listingPageImage.internal.description'
  | 'selectCaseStudy.listingPageImage.internal.fieldOwners'
  | 'selectCaseStudy.listingPageImage.internal.ignoreType'
  | 'selectCaseStudy.listingPageImage.internal.mediaType'
  | 'selectCaseStudy.listingPageImage.internal.owner'
  | 'selectCaseStudy.listingPageImage.internal.type'
  | 'selectCaseStudy.listingPageImage.isContentNode'
  | 'selectCaseStudy.listingPageImage.isTermNode'
  | 'selectCaseStudy.listingPageImage.link'
  | 'selectCaseStudy.listingPageImage.localFile.absolutePath'
  | 'selectCaseStudy.listingPageImage.localFile.accessTime'
  | 'selectCaseStudy.listingPageImage.localFile.atime'
  | 'selectCaseStudy.listingPageImage.localFile.atimeMs'
  | 'selectCaseStudy.listingPageImage.localFile.base'
  | 'selectCaseStudy.listingPageImage.localFile.birthTime'
  | 'selectCaseStudy.listingPageImage.localFile.birthtime'
  | 'selectCaseStudy.listingPageImage.localFile.birthtimeMs'
  | 'selectCaseStudy.listingPageImage.localFile.blksize'
  | 'selectCaseStudy.listingPageImage.localFile.blocks'
  | 'selectCaseStudy.listingPageImage.localFile.changeTime'
  | 'selectCaseStudy.listingPageImage.localFile.children'
  | 'selectCaseStudy.listingPageImage.localFile.childrenImageSharp'
  | 'selectCaseStudy.listingPageImage.localFile.ctime'
  | 'selectCaseStudy.listingPageImage.localFile.ctimeMs'
  | 'selectCaseStudy.listingPageImage.localFile.dev'
  | 'selectCaseStudy.listingPageImage.localFile.dir'
  | 'selectCaseStudy.listingPageImage.localFile.ext'
  | 'selectCaseStudy.listingPageImage.localFile.extension'
  | 'selectCaseStudy.listingPageImage.localFile.gid'
  | 'selectCaseStudy.listingPageImage.localFile.hash'
  | 'selectCaseStudy.listingPageImage.localFile.id'
  | 'selectCaseStudy.listingPageImage.localFile.ino'
  | 'selectCaseStudy.listingPageImage.localFile.mode'
  | 'selectCaseStudy.listingPageImage.localFile.modifiedTime'
  | 'selectCaseStudy.listingPageImage.localFile.mtime'
  | 'selectCaseStudy.listingPageImage.localFile.mtimeMs'
  | 'selectCaseStudy.listingPageImage.localFile.name'
  | 'selectCaseStudy.listingPageImage.localFile.nlink'
  | 'selectCaseStudy.listingPageImage.localFile.prettySize'
  | 'selectCaseStudy.listingPageImage.localFile.publicURL'
  | 'selectCaseStudy.listingPageImage.localFile.rdev'
  | 'selectCaseStudy.listingPageImage.localFile.relativeDirectory'
  | 'selectCaseStudy.listingPageImage.localFile.relativePath'
  | 'selectCaseStudy.listingPageImage.localFile.root'
  | 'selectCaseStudy.listingPageImage.localFile.size'
  | 'selectCaseStudy.listingPageImage.localFile.sourceInstanceName'
  | 'selectCaseStudy.listingPageImage.localFile.uid'
  | 'selectCaseStudy.listingPageImage.mediaDetails.file'
  | 'selectCaseStudy.listingPageImage.mediaDetails.height'
  | 'selectCaseStudy.listingPageImage.mediaDetails.sizes'
  | 'selectCaseStudy.listingPageImage.mediaDetails.width'
  | 'selectCaseStudy.listingPageImage.mediaItemUrl'
  | 'selectCaseStudy.listingPageImage.mediaType'
  | 'selectCaseStudy.listingPageImage.mimeType'
  | 'selectCaseStudy.listingPageImage.modified'
  | 'selectCaseStudy.listingPageImage.modifiedGmt'
  | 'selectCaseStudy.listingPageImage.nodeType'
  | 'selectCaseStudy.listingPageImage.parentDatabaseId'
  | 'selectCaseStudy.listingPageImage.parentId'
  | 'selectCaseStudy.listingPageImage.parent.children'
  | 'selectCaseStudy.listingPageImage.parent.id'
  | 'selectCaseStudy.listingPageImage.publicUrl'
  | 'selectCaseStudy.listingPageImage.remoteFile.absolutePath'
  | 'selectCaseStudy.listingPageImage.remoteFile.accessTime'
  | 'selectCaseStudy.listingPageImage.remoteFile.atime'
  | 'selectCaseStudy.listingPageImage.remoteFile.atimeMs'
  | 'selectCaseStudy.listingPageImage.remoteFile.base'
  | 'selectCaseStudy.listingPageImage.remoteFile.birthTime'
  | 'selectCaseStudy.listingPageImage.remoteFile.birthtime'
  | 'selectCaseStudy.listingPageImage.remoteFile.birthtimeMs'
  | 'selectCaseStudy.listingPageImage.remoteFile.blksize'
  | 'selectCaseStudy.listingPageImage.remoteFile.blocks'
  | 'selectCaseStudy.listingPageImage.remoteFile.changeTime'
  | 'selectCaseStudy.listingPageImage.remoteFile.children'
  | 'selectCaseStudy.listingPageImage.remoteFile.childrenImageSharp'
  | 'selectCaseStudy.listingPageImage.remoteFile.ctime'
  | 'selectCaseStudy.listingPageImage.remoteFile.ctimeMs'
  | 'selectCaseStudy.listingPageImage.remoteFile.dev'
  | 'selectCaseStudy.listingPageImage.remoteFile.dir'
  | 'selectCaseStudy.listingPageImage.remoteFile.ext'
  | 'selectCaseStudy.listingPageImage.remoteFile.extension'
  | 'selectCaseStudy.listingPageImage.remoteFile.gid'
  | 'selectCaseStudy.listingPageImage.remoteFile.hash'
  | 'selectCaseStudy.listingPageImage.remoteFile.id'
  | 'selectCaseStudy.listingPageImage.remoteFile.ino'
  | 'selectCaseStudy.listingPageImage.remoteFile.mode'
  | 'selectCaseStudy.listingPageImage.remoteFile.modifiedTime'
  | 'selectCaseStudy.listingPageImage.remoteFile.mtime'
  | 'selectCaseStudy.listingPageImage.remoteFile.mtimeMs'
  | 'selectCaseStudy.listingPageImage.remoteFile.name'
  | 'selectCaseStudy.listingPageImage.remoteFile.nlink'
  | 'selectCaseStudy.listingPageImage.remoteFile.prettySize'
  | 'selectCaseStudy.listingPageImage.remoteFile.publicURL'
  | 'selectCaseStudy.listingPageImage.remoteFile.rdev'
  | 'selectCaseStudy.listingPageImage.remoteFile.relativeDirectory'
  | 'selectCaseStudy.listingPageImage.remoteFile.relativePath'
  | 'selectCaseStudy.listingPageImage.remoteFile.root'
  | 'selectCaseStudy.listingPageImage.remoteFile.size'
  | 'selectCaseStudy.listingPageImage.remoteFile.sourceInstanceName'
  | 'selectCaseStudy.listingPageImage.remoteFile.uid'
  | 'selectCaseStudy.listingPageImage.resize.height'
  | 'selectCaseStudy.listingPageImage.resize.src'
  | 'selectCaseStudy.listingPageImage.resize.width'
  | 'selectCaseStudy.listingPageImage.seo.breadcrumbs'
  | 'selectCaseStudy.listingPageImage.seo.canonical'
  | 'selectCaseStudy.listingPageImage.seo.cornerstone'
  | 'selectCaseStudy.listingPageImage.seo.focuskw'
  | 'selectCaseStudy.listingPageImage.seo.fullHead'
  | 'selectCaseStudy.listingPageImage.seo.metaDesc'
  | 'selectCaseStudy.listingPageImage.seo.metaKeywords'
  | 'selectCaseStudy.listingPageImage.seo.metaRobotsNofollow'
  | 'selectCaseStudy.listingPageImage.seo.metaRobotsNoindex'
  | 'selectCaseStudy.listingPageImage.seo.opengraphAuthor'
  | 'selectCaseStudy.listingPageImage.seo.opengraphDescription'
  | 'selectCaseStudy.listingPageImage.seo.opengraphModifiedTime'
  | 'selectCaseStudy.listingPageImage.seo.opengraphPublishedTime'
  | 'selectCaseStudy.listingPageImage.seo.opengraphPublisher'
  | 'selectCaseStudy.listingPageImage.seo.opengraphSiteName'
  | 'selectCaseStudy.listingPageImage.seo.opengraphTitle'
  | 'selectCaseStudy.listingPageImage.seo.opengraphType'
  | 'selectCaseStudy.listingPageImage.seo.opengraphUrl'
  | 'selectCaseStudy.listingPageImage.seo.readingTime'
  | 'selectCaseStudy.listingPageImage.seo.title'
  | 'selectCaseStudy.listingPageImage.seo.twitterDescription'
  | 'selectCaseStudy.listingPageImage.seo.twitterTitle'
  | 'selectCaseStudy.listingPageImage.sizes'
  | 'selectCaseStudy.listingPageImage.slug'
  | 'selectCaseStudy.listingPageImage.sourceUrl'
  | 'selectCaseStudy.listingPageImage.srcSet'
  | 'selectCaseStudy.listingPageImage.status'
  | 'selectCaseStudy.listingPageImage.template.templateName'
  | 'selectCaseStudy.listingPageImage.title'
  | 'selectCaseStudy.listingPageImage.uri'
  | 'selectCaseStudy.listingPageImage.width'
  | 'selectCaseStudy.listingPageImage.wpChildren.nodes'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.readingTime'
  | 'seo.schema.articleType'
  | 'seo.schema.pageType'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'status'
  | 'tags.nodes'
  | 'tags.nodes.children'
  | 'tags.nodes.children.children'
  | 'tags.nodes.children.id'
  | 'tags.nodes.contentNodes.nodes'
  | 'tags.nodes.count'
  | 'tags.nodes.databaseId'
  | 'tags.nodes.description'
  | 'tags.nodes.id'
  | 'tags.nodes.internal.content'
  | 'tags.nodes.internal.contentDigest'
  | 'tags.nodes.internal.contentFilePath'
  | 'tags.nodes.internal.description'
  | 'tags.nodes.internal.fieldOwners'
  | 'tags.nodes.internal.ignoreType'
  | 'tags.nodes.internal.mediaType'
  | 'tags.nodes.internal.owner'
  | 'tags.nodes.internal.type'
  | 'tags.nodes.isContentNode'
  | 'tags.nodes.isTermNode'
  | 'tags.nodes.link'
  | 'tags.nodes.name'
  | 'tags.nodes.nodeType'
  | 'tags.nodes.parent.children'
  | 'tags.nodes.parent.id'
  | 'tags.nodes.posts.nodes'
  | 'tags.nodes.seo.breadcrumbs'
  | 'tags.nodes.seo.canonical'
  | 'tags.nodes.seo.cornerstone'
  | 'tags.nodes.seo.focuskw'
  | 'tags.nodes.seo.fullHead'
  | 'tags.nodes.seo.metaDesc'
  | 'tags.nodes.seo.metaKeywords'
  | 'tags.nodes.seo.metaRobotsNofollow'
  | 'tags.nodes.seo.metaRobotsNoindex'
  | 'tags.nodes.seo.opengraphAuthor'
  | 'tags.nodes.seo.opengraphDescription'
  | 'tags.nodes.seo.opengraphModifiedTime'
  | 'tags.nodes.seo.opengraphPublishedTime'
  | 'tags.nodes.seo.opengraphPublisher'
  | 'tags.nodes.seo.opengraphSiteName'
  | 'tags.nodes.seo.opengraphTitle'
  | 'tags.nodes.seo.opengraphType'
  | 'tags.nodes.seo.opengraphUrl'
  | 'tags.nodes.seo.title'
  | 'tags.nodes.seo.twitterDescription'
  | 'tags.nodes.seo.twitterTitle'
  | 'tags.nodes.slug'
  | 'tags.nodes.taxonomyName'
  | 'tags.nodes.termGroupId'
  | 'tags.nodes.termTaxonomyId'
  | 'tags.nodes.testimonial.nodes'
  | 'tags.nodes.uri'
  | 'template.templateName'
  | 'terms.nodes'
  | 'terms.nodes.children'
  | 'terms.nodes.children.children'
  | 'terms.nodes.children.id'
  | 'terms.nodes.count'
  | 'terms.nodes.databaseId'
  | 'terms.nodes.description'
  | 'terms.nodes.id'
  | 'terms.nodes.internal.content'
  | 'terms.nodes.internal.contentDigest'
  | 'terms.nodes.internal.contentFilePath'
  | 'terms.nodes.internal.description'
  | 'terms.nodes.internal.fieldOwners'
  | 'terms.nodes.internal.ignoreType'
  | 'terms.nodes.internal.mediaType'
  | 'terms.nodes.internal.owner'
  | 'terms.nodes.internal.type'
  | 'terms.nodes.isContentNode'
  | 'terms.nodes.isTermNode'
  | 'terms.nodes.link'
  | 'terms.nodes.name'
  | 'terms.nodes.nodeType'
  | 'terms.nodes.parent.children'
  | 'terms.nodes.parent.id'
  | 'terms.nodes.slug'
  | 'terms.nodes.taxonomyName'
  | 'terms.nodes.termGroupId'
  | 'terms.nodes.termTaxonomyId'
  | 'terms.nodes.uri'
  | 'title'
  | 'toPing'
  | 'uri';

type tsPostFilterInput = {
  readonly author: InputMaybe<tsNodeWithAuthorToUserConnectionEdgeFilterInput>;
  readonly authorDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly authorId: InputMaybe<IDQueryOperatorInput>;
  readonly caseStudy: InputMaybe<tsPost_CasestudyFilterInput>;
  readonly categories: InputMaybe<tsPostToCategoryConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly commentCount: InputMaybe<IntQueryOperatorInput>;
  readonly commentStatus: InputMaybe<StringQueryOperatorInput>;
  readonly comments: InputMaybe<tsPostToCommentConnectionFilterInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
  readonly enclosure: InputMaybe<StringQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  readonly featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly featuredImageId: InputMaybe<IDQueryOperatorInput>;
  readonly guid: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isRevision: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSticky: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  readonly next: InputMaybe<tsPostFilterInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pingStatus: InputMaybe<StringQueryOperatorInput>;
  readonly pinged: InputMaybe<StringQueryOperatorInput>;
  readonly postFormats: InputMaybe<tsPostToPostFormatConnectionFilterInput>;
  readonly previous: InputMaybe<tsPostFilterInput>;
  readonly selectCaseStudy: InputMaybe<tsPost_SelectcasestudyFilterInput>;
  readonly seo: InputMaybe<tsPostTypeSEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<tsPostToTagConnectionFilterInput>;
  readonly template: InputMaybe<tsContentTemplateFilterInput>;
  readonly terms: InputMaybe<tsPostToTermNodeConnectionFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly toPing: InputMaybe<StringQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type tsPostFilterListInput = {
  readonly elemMatch: InputMaybe<tsPostFilterInput>;
};

/** The postFormat type */
type tsPostFormat = Node & tsDatabaseIdentifier & tsNode & tsTermNode & tsUniformResourceIdentifiable & {
  readonly children: ReadonlyArray<Node>;
  /** Connection between the postFormat type and the ContentNode type */
  readonly contentNodes: Maybe<tsPostFormatToContentNodeConnection>;
  /** The number of objects connected to the object */
  readonly count: Maybe<Scalars['Int']>;
  /** The unique identifier stored in the database */
  readonly databaseId: Scalars['Int'];
  /** The description of the object */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The link to the term */
  readonly link: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Connection between the postFormat type and the post type */
  readonly posts: Maybe<tsPostFormatToPostConnection>;
  /** The Yoast SEO data of the Formats taxonomy. */
  readonly seo: Maybe<tsTaxonomySEO>;
  /** An alphanumeric identifier for the object unique to its type. */
  readonly slug: Maybe<Scalars['String']>;
  /** Connection between the postFormat type and the Taxonomy type */
  readonly taxonomy: Maybe<tsPostFormatToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  readonly taxonomyName: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  readonly termGroupId: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  readonly termTaxonomyId: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};

type tsPostFormatConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsPostFormatEdge>;
  readonly group: ReadonlyArray<tsPostFormatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsPostFormat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsPostFormatConnection_distinctArgs = {
  field: tsPostFormatFieldsEnum;
};


type tsPostFormatConnection_groupArgs = {
  field: tsPostFormatFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsPostFormatConnection_maxArgs = {
  field: tsPostFormatFieldsEnum;
};


type tsPostFormatConnection_minArgs = {
  field: tsPostFormatFieldsEnum;
};


type tsPostFormatConnection_sumArgs = {
  field: tsPostFormatFieldsEnum;
};

type tsPostFormatEdge = {
  readonly next: Maybe<tsPostFormat>;
  readonly node: tsPostFormat;
  readonly previous: Maybe<tsPostFormat>;
};

type tsPostFormatFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentNodes.nodes'
  | 'contentNodes.nodes.children'
  | 'contentNodes.nodes.children.children'
  | 'contentNodes.nodes.children.id'
  | 'contentNodes.nodes.contentTypeName'
  | 'contentNodes.nodes.databaseId'
  | 'contentNodes.nodes.date'
  | 'contentNodes.nodes.dateGmt'
  | 'contentNodes.nodes.desiredSlug'
  | 'contentNodes.nodes.enclosure'
  | 'contentNodes.nodes.guid'
  | 'contentNodes.nodes.id'
  | 'contentNodes.nodes.internal.content'
  | 'contentNodes.nodes.internal.contentDigest'
  | 'contentNodes.nodes.internal.contentFilePath'
  | 'contentNodes.nodes.internal.description'
  | 'contentNodes.nodes.internal.fieldOwners'
  | 'contentNodes.nodes.internal.ignoreType'
  | 'contentNodes.nodes.internal.mediaType'
  | 'contentNodes.nodes.internal.owner'
  | 'contentNodes.nodes.internal.type'
  | 'contentNodes.nodes.isContentNode'
  | 'contentNodes.nodes.isTermNode'
  | 'contentNodes.nodes.link'
  | 'contentNodes.nodes.modified'
  | 'contentNodes.nodes.modifiedGmt'
  | 'contentNodes.nodes.nodeType'
  | 'contentNodes.nodes.parent.children'
  | 'contentNodes.nodes.parent.id'
  | 'contentNodes.nodes.seo.breadcrumbs'
  | 'contentNodes.nodes.seo.canonical'
  | 'contentNodes.nodes.seo.cornerstone'
  | 'contentNodes.nodes.seo.focuskw'
  | 'contentNodes.nodes.seo.fullHead'
  | 'contentNodes.nodes.seo.metaDesc'
  | 'contentNodes.nodes.seo.metaKeywords'
  | 'contentNodes.nodes.seo.metaRobotsNofollow'
  | 'contentNodes.nodes.seo.metaRobotsNoindex'
  | 'contentNodes.nodes.seo.opengraphAuthor'
  | 'contentNodes.nodes.seo.opengraphDescription'
  | 'contentNodes.nodes.seo.opengraphModifiedTime'
  | 'contentNodes.nodes.seo.opengraphPublishedTime'
  | 'contentNodes.nodes.seo.opengraphPublisher'
  | 'contentNodes.nodes.seo.opengraphSiteName'
  | 'contentNodes.nodes.seo.opengraphTitle'
  | 'contentNodes.nodes.seo.opengraphType'
  | 'contentNodes.nodes.seo.opengraphUrl'
  | 'contentNodes.nodes.seo.readingTime'
  | 'contentNodes.nodes.seo.title'
  | 'contentNodes.nodes.seo.twitterDescription'
  | 'contentNodes.nodes.seo.twitterTitle'
  | 'contentNodes.nodes.slug'
  | 'contentNodes.nodes.status'
  | 'contentNodes.nodes.template.templateName'
  | 'contentNodes.nodes.uri'
  | 'count'
  | 'databaseId'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'link'
  | 'name'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'posts.nodes'
  | 'posts.nodes.authorDatabaseId'
  | 'posts.nodes.authorId'
  | 'posts.nodes.caseStudy.appGallery'
  | 'posts.nodes.caseStudy.fieldGroupName'
  | 'posts.nodes.caseStudy.gallery'
  | 'posts.nodes.caseStudy.ourRole'
  | 'posts.nodes.caseStudy.problem'
  | 'posts.nodes.caseStudy.problemStrategyResultLayout'
  | 'posts.nodes.caseStudy.result'
  | 'posts.nodes.caseStudy.strategy'
  | 'posts.nodes.caseStudy.technology'
  | 'posts.nodes.caseStudy.type'
  | 'posts.nodes.categories.nodes'
  | 'posts.nodes.children'
  | 'posts.nodes.children.children'
  | 'posts.nodes.children.id'
  | 'posts.nodes.commentCount'
  | 'posts.nodes.commentStatus'
  | 'posts.nodes.comments.nodes'
  | 'posts.nodes.content'
  | 'posts.nodes.contentTypeName'
  | 'posts.nodes.databaseId'
  | 'posts.nodes.date'
  | 'posts.nodes.dateGmt'
  | 'posts.nodes.desiredSlug'
  | 'posts.nodes.enclosure'
  | 'posts.nodes.excerpt'
  | 'posts.nodes.featuredImageDatabaseId'
  | 'posts.nodes.featuredImageId'
  | 'posts.nodes.guid'
  | 'posts.nodes.id'
  | 'posts.nodes.internal.content'
  | 'posts.nodes.internal.contentDigest'
  | 'posts.nodes.internal.contentFilePath'
  | 'posts.nodes.internal.description'
  | 'posts.nodes.internal.fieldOwners'
  | 'posts.nodes.internal.ignoreType'
  | 'posts.nodes.internal.mediaType'
  | 'posts.nodes.internal.owner'
  | 'posts.nodes.internal.type'
  | 'posts.nodes.isContentNode'
  | 'posts.nodes.isRevision'
  | 'posts.nodes.isSticky'
  | 'posts.nodes.isTermNode'
  | 'posts.nodes.link'
  | 'posts.nodes.modified'
  | 'posts.nodes.modifiedGmt'
  | 'posts.nodes.next.authorDatabaseId'
  | 'posts.nodes.next.authorId'
  | 'posts.nodes.next.children'
  | 'posts.nodes.next.commentCount'
  | 'posts.nodes.next.commentStatus'
  | 'posts.nodes.next.content'
  | 'posts.nodes.next.contentTypeName'
  | 'posts.nodes.next.databaseId'
  | 'posts.nodes.next.date'
  | 'posts.nodes.next.dateGmt'
  | 'posts.nodes.next.desiredSlug'
  | 'posts.nodes.next.enclosure'
  | 'posts.nodes.next.excerpt'
  | 'posts.nodes.next.featuredImageDatabaseId'
  | 'posts.nodes.next.featuredImageId'
  | 'posts.nodes.next.guid'
  | 'posts.nodes.next.id'
  | 'posts.nodes.next.isContentNode'
  | 'posts.nodes.next.isRevision'
  | 'posts.nodes.next.isSticky'
  | 'posts.nodes.next.isTermNode'
  | 'posts.nodes.next.link'
  | 'posts.nodes.next.modified'
  | 'posts.nodes.next.modifiedGmt'
  | 'posts.nodes.next.nodeType'
  | 'posts.nodes.next.pingStatus'
  | 'posts.nodes.next.pinged'
  | 'posts.nodes.next.slug'
  | 'posts.nodes.next.status'
  | 'posts.nodes.next.title'
  | 'posts.nodes.next.toPing'
  | 'posts.nodes.next.uri'
  | 'posts.nodes.nodeType'
  | 'posts.nodes.parent.children'
  | 'posts.nodes.parent.id'
  | 'posts.nodes.pingStatus'
  | 'posts.nodes.pinged'
  | 'posts.nodes.postFormats.nodes'
  | 'posts.nodes.previous.authorDatabaseId'
  | 'posts.nodes.previous.authorId'
  | 'posts.nodes.previous.children'
  | 'posts.nodes.previous.commentCount'
  | 'posts.nodes.previous.commentStatus'
  | 'posts.nodes.previous.content'
  | 'posts.nodes.previous.contentTypeName'
  | 'posts.nodes.previous.databaseId'
  | 'posts.nodes.previous.date'
  | 'posts.nodes.previous.dateGmt'
  | 'posts.nodes.previous.desiredSlug'
  | 'posts.nodes.previous.enclosure'
  | 'posts.nodes.previous.excerpt'
  | 'posts.nodes.previous.featuredImageDatabaseId'
  | 'posts.nodes.previous.featuredImageId'
  | 'posts.nodes.previous.guid'
  | 'posts.nodes.previous.id'
  | 'posts.nodes.previous.isContentNode'
  | 'posts.nodes.previous.isRevision'
  | 'posts.nodes.previous.isSticky'
  | 'posts.nodes.previous.isTermNode'
  | 'posts.nodes.previous.link'
  | 'posts.nodes.previous.modified'
  | 'posts.nodes.previous.modifiedGmt'
  | 'posts.nodes.previous.nodeType'
  | 'posts.nodes.previous.pingStatus'
  | 'posts.nodes.previous.pinged'
  | 'posts.nodes.previous.slug'
  | 'posts.nodes.previous.status'
  | 'posts.nodes.previous.title'
  | 'posts.nodes.previous.toPing'
  | 'posts.nodes.previous.uri'
  | 'posts.nodes.selectCaseStudy.fieldGroupName'
  | 'posts.nodes.seo.breadcrumbs'
  | 'posts.nodes.seo.canonical'
  | 'posts.nodes.seo.cornerstone'
  | 'posts.nodes.seo.focuskw'
  | 'posts.nodes.seo.fullHead'
  | 'posts.nodes.seo.metaDesc'
  | 'posts.nodes.seo.metaKeywords'
  | 'posts.nodes.seo.metaRobotsNofollow'
  | 'posts.nodes.seo.metaRobotsNoindex'
  | 'posts.nodes.seo.opengraphAuthor'
  | 'posts.nodes.seo.opengraphDescription'
  | 'posts.nodes.seo.opengraphModifiedTime'
  | 'posts.nodes.seo.opengraphPublishedTime'
  | 'posts.nodes.seo.opengraphPublisher'
  | 'posts.nodes.seo.opengraphSiteName'
  | 'posts.nodes.seo.opengraphTitle'
  | 'posts.nodes.seo.opengraphType'
  | 'posts.nodes.seo.opengraphUrl'
  | 'posts.nodes.seo.readingTime'
  | 'posts.nodes.seo.title'
  | 'posts.nodes.seo.twitterDescription'
  | 'posts.nodes.seo.twitterTitle'
  | 'posts.nodes.slug'
  | 'posts.nodes.status'
  | 'posts.nodes.tags.nodes'
  | 'posts.nodes.template.templateName'
  | 'posts.nodes.terms.nodes'
  | 'posts.nodes.title'
  | 'posts.nodes.toPing'
  | 'posts.nodes.uri'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'taxonomyName'
  | 'taxonomy.node.archivePath'
  | 'taxonomy.node.children'
  | 'taxonomy.node.children.children'
  | 'taxonomy.node.children.id'
  | 'taxonomy.node.connectedContentTypes.nodes'
  | 'taxonomy.node.description'
  | 'taxonomy.node.graphqlPluralName'
  | 'taxonomy.node.graphqlSingleName'
  | 'taxonomy.node.hierarchical'
  | 'taxonomy.node.id'
  | 'taxonomy.node.internal.content'
  | 'taxonomy.node.internal.contentDigest'
  | 'taxonomy.node.internal.contentFilePath'
  | 'taxonomy.node.internal.description'
  | 'taxonomy.node.internal.fieldOwners'
  | 'taxonomy.node.internal.ignoreType'
  | 'taxonomy.node.internal.mediaType'
  | 'taxonomy.node.internal.owner'
  | 'taxonomy.node.internal.type'
  | 'taxonomy.node.label'
  | 'taxonomy.node.name'
  | 'taxonomy.node.nodeType'
  | 'taxonomy.node.parent.children'
  | 'taxonomy.node.parent.id'
  | 'taxonomy.node.public'
  | 'taxonomy.node.restBase'
  | 'taxonomy.node.restControllerClass'
  | 'taxonomy.node.showCloud'
  | 'taxonomy.node.showInAdminColumn'
  | 'taxonomy.node.showInGraphql'
  | 'taxonomy.node.showInMenu'
  | 'taxonomy.node.showInNavMenus'
  | 'taxonomy.node.showInQuickEdit'
  | 'taxonomy.node.showInRest'
  | 'taxonomy.node.showUi'
  | 'termGroupId'
  | 'termTaxonomyId'
  | 'uri';

type tsPostFormatFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentNodes: InputMaybe<tsPostFormatToContentNodeConnectionFilterInput>;
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly posts: InputMaybe<tsPostFormatToPostConnectionFilterInput>;
  readonly seo: InputMaybe<tsTaxonomySEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly taxonomy: InputMaybe<tsPostFormatToTaxonomyConnectionEdgeFilterInput>;
  readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
  readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
  readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type tsPostFormatFilterListInput = {
  readonly elemMatch: InputMaybe<tsPostFormatFilterInput>;
};

type tsPostFormatGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsPostFormatEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsPostFormatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsPostFormat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsPostFormatGroupConnection_distinctArgs = {
  field: tsPostFormatFieldsEnum;
};


type tsPostFormatGroupConnection_groupArgs = {
  field: tsPostFormatFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsPostFormatGroupConnection_maxArgs = {
  field: tsPostFormatFieldsEnum;
};


type tsPostFormatGroupConnection_minArgs = {
  field: tsPostFormatFieldsEnum;
};


type tsPostFormatGroupConnection_sumArgs = {
  field: tsPostFormatFieldsEnum;
};

type tsPostFormatSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsPostFormatFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the postFormat type and the ContentNode type */
type tsPostFormatToContentNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsPostFormatToContentNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the postFormat type and the post type */
type tsPostFormatToPostConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsPost>>>;
};

type tsPostFormatToPostConnectionFilterInput = {
  readonly nodes: InputMaybe<tsPostFilterListInput>;
};

/** Connection between the postFormat type and the Taxonomy type */
type tsPostFormatToTaxonomyConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsTaxonomy>;
};

type tsPostFormatToTaxonomyConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsTaxonomyFilterInput>;
};

/** List of possible post formats. */
type tsPostFormatTypeEnum =
  | 'STANDARD';

type tsPostFormatTypeEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsPostFormatTypeEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsPostFormatTypeEnum>>>;
  readonly ne: InputMaybe<tsPostFormatTypeEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsPostFormatTypeEnum>>>;
};

type tsPostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsPostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsPostGroupConnection_distinctArgs = {
  field: tsPostFieldsEnum;
};


type tsPostGroupConnection_groupArgs = {
  field: tsPostFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsPostGroupConnection_maxArgs = {
  field: tsPostFieldsEnum;
};


type tsPostGroupConnection_minArgs = {
  field: tsPostFieldsEnum;
};


type tsPostGroupConnection_sumArgs = {
  field: tsPostFieldsEnum;
};

/** A Gravity Forms post_image field. */
type tsPostImageField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithFileExtensions & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPostImage & tsGfFieldWithPostImageFeaturedImage & tsGfFieldWithRules & tsGfFieldWithSubLabelPlacement & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** A comma-delimited list of the file extensions which may be uploaded. */
  readonly allowedExtensions: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Controls the visibility of the alt metadata for Post Image fields. */
  readonly hasAlt: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the caption metadata for Post Image fields. */
  readonly hasCaption: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the description metadata for Post Image fields. */
  readonly hasDescription: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the title metadata for Post Image fields. */
  readonly hasTitle: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Image field value. */
  readonly imageValues: Maybe<tsImageFieldValue>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Whether the image field should be used to set the post&#039;s Featured Image */
  readonly isFeaturedImage: Maybe<Scalars['Boolean']>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

type tsPostObjectUnion = tsCareers | tsCaseStudy | tsMediaItem | tsPage | tsPost | tsTeam | tsTestimonial;

type tsPostSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsPostFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** A Gravity Forms checkbox post_tags field. */
type tsPostTagsCheckboxField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSelectAllChoices & tsGfFieldWithSize & tsPostTagsField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Checkbox field value. */
  readonly checkboxValues: Maybe<ReadonlyArray<Maybe<tsCheckboxFieldValue>>>;
  /** The available choices for the post_tags field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostTagsCheckboxFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Whether the \&quot;select all\&quot; choice should be displayed. */
  readonly hasSelectAll: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the post_tags field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsPostTagsCheckboxInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostTagsCheckboxFieldChoice choice values. */
type tsPostTagsCheckboxFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** PostTagsCheckboxInputProperty input values. */
type tsPostTagsCheckboxInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithSelectAllChoices & {
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly name: Maybe<Scalars['String']>;
};

type tsPostTagsField = {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms multiselect post_tags field. */
type tsPostTagsMultiSelectField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithEnableEnhancedUI & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostTagsField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_tags field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostTagsMultiSelectFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields. */
  readonly hasEnhancedUI: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** An array of field values. */
  readonly values: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostTagsMultiSelectFieldChoice choice values. */
type tsPostTagsMultiSelectFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** A Gravity Forms radio post_tags field. */
type tsPostTagsRadioField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithOtherChoice & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostTagsField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_tags field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostTagsRadioFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor. */
  readonly hasOtherChoice: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostTagsRadioFieldChoice choice values. */
type tsPostTagsRadioFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & tsGfFieldChoiceWithOtherChoice & {
  /** Indicates the radio button item is the “Other” choice. */
  readonly isOtherChoice: Maybe<Scalars['Boolean']>;
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** A Gravity Forms select post_tags field. */
type tsPostTagsSelectField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithEnableEnhancedUI & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostTagsField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the post_tags field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsPostTagsSelectFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields. */
  readonly hasEnhancedUI: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** PostTagsSelectFieldChoice choice values. */
type tsPostTagsSelectFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** A Gravity Forms text post_tags field. */
type tsPostTagsTextField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithInputMask & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMaxlen & tsGfFieldWithPasswordField & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & tsPostTagsField & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Whether the field has an input mask. */
  readonly hasInputMask: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The pattern used for the input mask. */
  readonly inputMaskValue: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if a text field input tag should be created with a &quot;password&quot; type. */
  readonly isPasswordInput: Maybe<Scalars['Boolean']>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Specifies the maximum number of characters allowed in a text or textarea (paragraph) field. */
  readonly maxLength: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms post_title field. */
type tsPostTitleField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** Connection between the post type and the category type */
type tsPostToCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsCategory>>>;
};

type tsPostToCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCategoryFilterListInput>;
};

/** Connection between the post type and the Comment type */
type tsPostToCommentConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsComment>>>;
};

type tsPostToCommentConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCommentFilterListInput>;
};

/** Connection between the post type and the postFormat type */
type tsPostToPostFormatConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsPostFormat>>>;
};

type tsPostToPostFormatConnectionFilterInput = {
  readonly nodes: InputMaybe<tsPostFormatFilterListInput>;
};

/** Connection between the post type and the tag type */
type tsPostToTagConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsTag>>>;
};

type tsPostToTagConnectionFilterInput = {
  readonly nodes: InputMaybe<tsTagFilterListInput>;
};

/** Connection between the post type and the TermNode type */
type tsPostToTermNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsTermNode>>>;
};

type tsPostToTermNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsTermNodeFilterListInput>;
};

/** Details for labels of the PostType */
type tsPostTypeLabelDetails = {
  /** Default is ‘Add New’ for both hierarchical and non-hierarchical types. */
  readonly addNew: Maybe<Scalars['String']>;
  /** Label for adding a new singular item. */
  readonly addNewItem: Maybe<Scalars['String']>;
  /** Label to signify all items in a submenu link. */
  readonly allItems: Maybe<Scalars['String']>;
  /** Label for archives in nav menus */
  readonly archives: Maybe<Scalars['String']>;
  /** Label for the attributes meta box. */
  readonly attributes: Maybe<Scalars['String']>;
  /** Label for editing a singular item. */
  readonly editItem: Maybe<Scalars['String']>;
  /** Label for the Featured Image meta box title. */
  readonly featuredImage: Maybe<Scalars['String']>;
  /** Label for the table views hidden heading. */
  readonly filterItemsList: Maybe<Scalars['String']>;
  /** Label for the media frame button. */
  readonly insertIntoItem: Maybe<Scalars['String']>;
  /** Label for the table hidden heading. */
  readonly itemsList: Maybe<Scalars['String']>;
  /** Label for the table pagination hidden heading. */
  readonly itemsListNavigation: Maybe<Scalars['String']>;
  /** Label for the menu name. */
  readonly menuName: Maybe<Scalars['String']>;
  /** General name for the post type, usually plural. */
  readonly name: Maybe<Scalars['String']>;
  /** Label for the new item page title. */
  readonly newItem: Maybe<Scalars['String']>;
  /** Label used when no items are found. */
  readonly notFound: Maybe<Scalars['String']>;
  /** Label used when no items are in the trash. */
  readonly notFoundInTrash: Maybe<Scalars['String']>;
  /** Label used to prefix parents of hierarchical items. */
  readonly parentItemColon: Maybe<Scalars['String']>;
  /** Label for removing the featured image. */
  readonly removeFeaturedImage: Maybe<Scalars['String']>;
  /** Label for searching plural items. */
  readonly searchItems: Maybe<Scalars['String']>;
  /** Label for setting the featured image. */
  readonly setFeaturedImage: Maybe<Scalars['String']>;
  /** Name for one object of this post type. */
  readonly singularName: Maybe<Scalars['String']>;
  /** Label for the media frame filter. */
  readonly uploadedToThisItem: Maybe<Scalars['String']>;
  /** Label in the media frame for using a featured image. */
  readonly useFeaturedImage: Maybe<Scalars['String']>;
  /** Label for viewing a singular item. */
  readonly viewItem: Maybe<Scalars['String']>;
  /** Label for viewing post type archives. */
  readonly viewItems: Maybe<Scalars['String']>;
};

type tsPostTypeLabelDetailsFilterInput = {
  readonly addNew: InputMaybe<StringQueryOperatorInput>;
  readonly addNewItem: InputMaybe<StringQueryOperatorInput>;
  readonly allItems: InputMaybe<StringQueryOperatorInput>;
  readonly archives: InputMaybe<StringQueryOperatorInput>;
  readonly attributes: InputMaybe<StringQueryOperatorInput>;
  readonly editItem: InputMaybe<StringQueryOperatorInput>;
  readonly featuredImage: InputMaybe<StringQueryOperatorInput>;
  readonly filterItemsList: InputMaybe<StringQueryOperatorInput>;
  readonly insertIntoItem: InputMaybe<StringQueryOperatorInput>;
  readonly itemsList: InputMaybe<StringQueryOperatorInput>;
  readonly itemsListNavigation: InputMaybe<StringQueryOperatorInput>;
  readonly menuName: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly newItem: InputMaybe<StringQueryOperatorInput>;
  readonly notFound: InputMaybe<StringQueryOperatorInput>;
  readonly notFoundInTrash: InputMaybe<StringQueryOperatorInput>;
  readonly parentItemColon: InputMaybe<StringQueryOperatorInput>;
  readonly removeFeaturedImage: InputMaybe<StringQueryOperatorInput>;
  readonly searchItems: InputMaybe<StringQueryOperatorInput>;
  readonly setFeaturedImage: InputMaybe<StringQueryOperatorInput>;
  readonly singularName: InputMaybe<StringQueryOperatorInput>;
  readonly uploadedToThisItem: InputMaybe<StringQueryOperatorInput>;
  readonly useFeaturedImage: InputMaybe<StringQueryOperatorInput>;
  readonly viewItem: InputMaybe<StringQueryOperatorInput>;
  readonly viewItems: InputMaybe<StringQueryOperatorInput>;
};

type tsPostTypeSEO = {
  readonly breadcrumbs: Maybe<ReadonlyArray<Maybe<tsSEOPostTypeBreadcrumbs>>>;
  readonly canonical: Maybe<Scalars['String']>;
  readonly cornerstone: Maybe<Scalars['Boolean']>;
  readonly focuskw: Maybe<Scalars['String']>;
  readonly fullHead: Maybe<Scalars['String']>;
  readonly metaDesc: Maybe<Scalars['String']>;
  readonly metaKeywords: Maybe<Scalars['String']>;
  readonly metaRobotsNofollow: Maybe<Scalars['String']>;
  readonly metaRobotsNoindex: Maybe<Scalars['String']>;
  readonly opengraphAuthor: Maybe<Scalars['String']>;
  readonly opengraphDescription: Maybe<Scalars['String']>;
  readonly opengraphImage: Maybe<tsMediaItem>;
  readonly opengraphModifiedTime: Maybe<Scalars['String']>;
  readonly opengraphPublishedTime: Maybe<Scalars['String']>;
  readonly opengraphPublisher: Maybe<Scalars['String']>;
  readonly opengraphSiteName: Maybe<Scalars['String']>;
  readonly opengraphTitle: Maybe<Scalars['String']>;
  readonly opengraphType: Maybe<Scalars['String']>;
  readonly opengraphUrl: Maybe<Scalars['String']>;
  readonly readingTime: Maybe<Scalars['Float']>;
  readonly schema: Maybe<tsSEOPostTypeSchema>;
  readonly title: Maybe<Scalars['String']>;
  readonly twitterDescription: Maybe<Scalars['String']>;
  readonly twitterImage: Maybe<tsMediaItem>;
  readonly twitterTitle: Maybe<Scalars['String']>;
};

type tsPostTypeSEOFilterInput = {
  readonly breadcrumbs: InputMaybe<tsSEOPostTypeBreadcrumbsFilterListInput>;
  readonly canonical: InputMaybe<StringQueryOperatorInput>;
  readonly cornerstone: InputMaybe<BooleanQueryOperatorInput>;
  readonly focuskw: InputMaybe<StringQueryOperatorInput>;
  readonly fullHead: InputMaybe<StringQueryOperatorInput>;
  readonly metaDesc: InputMaybe<StringQueryOperatorInput>;
  readonly metaKeywords: InputMaybe<StringQueryOperatorInput>;
  readonly metaRobotsNofollow: InputMaybe<StringQueryOperatorInput>;
  readonly metaRobotsNoindex: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphAuthor: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphDescription: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphImage: InputMaybe<tsMediaItemFilterInput>;
  readonly opengraphModifiedTime: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphPublishedTime: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphPublisher: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphSiteName: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphTitle: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphType: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphUrl: InputMaybe<StringQueryOperatorInput>;
  readonly readingTime: InputMaybe<FloatQueryOperatorInput>;
  readonly schema: InputMaybe<tsSEOPostTypeSchemaFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitterDescription: InputMaybe<StringQueryOperatorInput>;
  readonly twitterImage: InputMaybe<tsMediaItemFilterInput>;
  readonly twitterTitle: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsPost_Casestudy = tsAcfFieldGroup & {
  readonly appGallery: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
  readonly detailPageImage: Maybe<tsMediaItem>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly gallery: Maybe<ReadonlyArray<Maybe<tsMediaItem>>>;
  readonly ourRole: Maybe<Scalars['String']>;
  readonly problem: Maybe<Scalars['String']>;
  readonly problemStrategyResultLayout: Maybe<Scalars['String']>;
  readonly result: Maybe<Scalars['String']>;
  readonly secondoryImage: Maybe<tsMediaItem>;
  readonly strategy: Maybe<Scalars['String']>;
  readonly technology: Maybe<ReadonlyArray<Maybe<tsPost_Casestudy_technology>>>;
  readonly type: Maybe<Scalars['String']>;
};

type tsPost_CasestudyFilterInput = {
  readonly appGallery: InputMaybe<tsMediaItemFilterListInput>;
  readonly detailPageImage: InputMaybe<tsMediaItemFilterInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly gallery: InputMaybe<tsMediaItemFilterListInput>;
  readonly ourRole: InputMaybe<StringQueryOperatorInput>;
  readonly problem: InputMaybe<StringQueryOperatorInput>;
  readonly problemStrategyResultLayout: InputMaybe<StringQueryOperatorInput>;
  readonly result: InputMaybe<StringQueryOperatorInput>;
  readonly secondoryImage: InputMaybe<tsMediaItemFilterInput>;
  readonly strategy: InputMaybe<StringQueryOperatorInput>;
  readonly technology: InputMaybe<tsPost_Casestudy_technologyFilterListInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsPost_Casestudy_technology = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly svgIcon: Maybe<Scalars['String']>;
};

type tsPost_Casestudy_technologyFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly svgIcon: InputMaybe<StringQueryOperatorInput>;
};

type tsPost_Casestudy_technologyFilterListInput = {
  readonly elemMatch: InputMaybe<tsPost_Casestudy_technologyFilterInput>;
};

/** Field Group */
type tsPost_Selectcasestudy = tsAcfFieldGroup & {
  readonly caseStudy: Maybe<tsPost_Selectcasestudy_CaseStudy>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly listingPageImage: Maybe<tsMediaItem>;
};

type tsPost_SelectcasestudyFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly listingPageImage: InputMaybe<tsMediaItemFilterInput>;
};

type tsPost_Selectcasestudy_CaseStudy = tsCaseStudy;

/** A Gravity Forms radio field. */
type tsRadioField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithOtherChoice & tsGfFieldWithPersonalData & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the radio field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsRadioFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor. */
  readonly hasOtherChoice: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** RadioFieldChoice choice values. */
type tsRadioFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & tsGfFieldChoiceWithOtherChoice & {
  /** Indicates the radio button item is the “Other” choice. */
  readonly isOtherChoice: Maybe<Scalars['Boolean']>;
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** The reading setting type */
type tsReadingSettings = {
  /** The ID of the page that should display the latest posts */
  readonly pageForPosts: Maybe<Scalars['Int']>;
  /** The ID of the page that should be displayed on the front page */
  readonly pageOnFront: Maybe<Scalars['Int']>;
  /** Blog pages show at most. */
  readonly postsPerPage: Maybe<Scalars['Int']>;
  /** What to show on the front page */
  readonly showOnFront: Maybe<Scalars['String']>;
};

type tsReadingSettingsFilterInput = {
  readonly pageForPosts: InputMaybe<IntQueryOperatorInput>;
  readonly pageOnFront: InputMaybe<IntQueryOperatorInput>;
  readonly postsPerPage: InputMaybe<IntQueryOperatorInput>;
  readonly showOnFront: InputMaybe<StringQueryOperatorInput>;
};

/** Determines which version of reCAPTCHA v2 will be used.  */
type tsRecaptchaTypeEnum =
  | 'CHECKBOX'
  | 'INVISIBLE';

type tsRecaptchaTypeEnumQueryOperatorInput = {
  readonly eq: InputMaybe<tsRecaptchaTypeEnum>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsRecaptchaTypeEnum>>>;
  readonly ne: InputMaybe<tsRecaptchaTypeEnum>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsRecaptchaTypeEnum>>>;
};

/** The Yoast SEO breadcrumb config */
type tsSEOBreadcrumbs = {
  readonly archivePrefix: Maybe<Scalars['String']>;
  readonly boldLast: Maybe<Scalars['Boolean']>;
  readonly enabled: Maybe<Scalars['Boolean']>;
  readonly homeText: Maybe<Scalars['String']>;
  readonly notFoundText: Maybe<Scalars['String']>;
  readonly prefix: Maybe<Scalars['String']>;
  readonly searchPrefix: Maybe<Scalars['String']>;
  readonly separator: Maybe<Scalars['String']>;
  readonly showBlogPage: Maybe<Scalars['Boolean']>;
};

type tsSEOBreadcrumbsFilterInput = {
  readonly archivePrefix: InputMaybe<StringQueryOperatorInput>;
  readonly boldLast: InputMaybe<BooleanQueryOperatorInput>;
  readonly enabled: InputMaybe<BooleanQueryOperatorInput>;
  readonly homeText: InputMaybe<StringQueryOperatorInput>;
  readonly notFoundText: InputMaybe<StringQueryOperatorInput>;
  readonly prefix: InputMaybe<StringQueryOperatorInput>;
  readonly searchPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly separator: InputMaybe<StringQueryOperatorInput>;
  readonly showBlogPage: InputMaybe<BooleanQueryOperatorInput>;
};

/** Types of cards */
type tsSEOCardType =
  | 'summary'
  | 'summary_large_image';

type tsSEOCardTypeQueryOperatorInput = {
  readonly eq: InputMaybe<tsSEOCardType>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<tsSEOCardType>>>;
  readonly ne: InputMaybe<tsSEOCardType>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<tsSEOCardType>>>;
};

/** The Yoast SEO site level configuration data */
type tsSEOConfig = {
  readonly breadcrumbs: Maybe<tsSEOBreadcrumbs>;
  readonly contentTypes: Maybe<tsSEOContentTypes>;
  readonly openGraph: Maybe<tsSEOOpenGraph>;
  readonly redirects: Maybe<ReadonlyArray<Maybe<tsSEORedirect>>>;
  readonly schema: Maybe<tsSEOSchema>;
  readonly social: Maybe<tsSEOSocial>;
  readonly webmaster: Maybe<tsSEOWebmaster>;
};

type tsSEOConfigFilterInput = {
  readonly breadcrumbs: InputMaybe<tsSEOBreadcrumbsFilterInput>;
  readonly contentTypes: InputMaybe<tsSEOContentTypesFilterInput>;
  readonly openGraph: InputMaybe<tsSEOOpenGraphFilterInput>;
  readonly redirects: InputMaybe<tsSEORedirectFilterListInput>;
  readonly schema: InputMaybe<tsSEOSchemaFilterInput>;
  readonly social: InputMaybe<tsSEOSocialFilterInput>;
  readonly webmaster: InputMaybe<tsSEOWebmasterFilterInput>;
};

/** The Yoast SEO search appearance content types fields */
type tsSEOContentType = {
  readonly archive: Maybe<tsSEOContentTypeArchive>;
  readonly metaDesc: Maybe<Scalars['String']>;
  readonly metaRobotsNoindex: Maybe<Scalars['Boolean']>;
  readonly schema: Maybe<tsSEOPageInfoSchema>;
  readonly schemaType: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

/** he Yoast SEO search appearance content types fields */
type tsSEOContentTypeArchive = {
  readonly archiveLink: Maybe<Scalars['String']>;
  readonly breadcrumbTitle: Maybe<Scalars['String']>;
  readonly fullHead: Maybe<Scalars['String']>;
  readonly hasArchive: Maybe<Scalars['Boolean']>;
  readonly metaDesc: Maybe<Scalars['String']>;
  readonly metaRobotsNoindex: Maybe<Scalars['Boolean']>;
  readonly title: Maybe<Scalars['String']>;
};

type tsSEOContentTypeArchiveFilterInput = {
  readonly archiveLink: InputMaybe<StringQueryOperatorInput>;
  readonly breadcrumbTitle: InputMaybe<StringQueryOperatorInput>;
  readonly fullHead: InputMaybe<StringQueryOperatorInput>;
  readonly hasArchive: InputMaybe<BooleanQueryOperatorInput>;
  readonly metaDesc: InputMaybe<StringQueryOperatorInput>;
  readonly metaRobotsNoindex: InputMaybe<BooleanQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOContentTypeFilterInput = {
  readonly archive: InputMaybe<tsSEOContentTypeArchiveFilterInput>;
  readonly metaDesc: InputMaybe<StringQueryOperatorInput>;
  readonly metaRobotsNoindex: InputMaybe<BooleanQueryOperatorInput>;
  readonly schema: InputMaybe<tsSEOPageInfoSchemaFilterInput>;
  readonly schemaType: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

/** The Yoast SEO search appearance content types */
type tsSEOContentTypes = {
  readonly actionMonitorAction: Maybe<tsSEOContentType>;
  readonly careers: Maybe<tsSEOContentType>;
  readonly caseStudy: Maybe<tsSEOContentType>;
  readonly mediaItem: Maybe<tsSEOContentType>;
  readonly page: Maybe<tsSEOContentType>;
  readonly post: Maybe<tsSEOContentType>;
  readonly team: Maybe<tsSEOContentType>;
  readonly testimonial: Maybe<tsSEOContentType>;
};

type tsSEOContentTypesFilterInput = {
  readonly actionMonitorAction: InputMaybe<tsSEOContentTypeFilterInput>;
  readonly careers: InputMaybe<tsSEOContentTypeFilterInput>;
  readonly caseStudy: InputMaybe<tsSEOContentTypeFilterInput>;
  readonly mediaItem: InputMaybe<tsSEOContentTypeFilterInput>;
  readonly page: InputMaybe<tsSEOContentTypeFilterInput>;
  readonly post: InputMaybe<tsSEOContentTypeFilterInput>;
  readonly team: InputMaybe<tsSEOContentTypeFilterInput>;
  readonly testimonial: InputMaybe<tsSEOContentTypeFilterInput>;
};

/** The Open Graph data */
type tsSEOOpenGraph = {
  readonly defaultImage: Maybe<tsMediaItem>;
  readonly frontPage: Maybe<tsSEOOpenGraphFrontPage>;
};

type tsSEOOpenGraphFilterInput = {
  readonly defaultImage: InputMaybe<tsMediaItemFilterInput>;
  readonly frontPage: InputMaybe<tsSEOOpenGraphFrontPageFilterInput>;
};

/** The Open Graph Front page data */
type tsSEOOpenGraphFrontPage = {
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
  readonly title: Maybe<Scalars['String']>;
};

type tsSEOOpenGraphFrontPageFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<tsMediaItemFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

/** The Schema for post type */
type tsSEOPageInfoSchema = {
  readonly raw: Maybe<Scalars['String']>;
};

type tsSEOPageInfoSchemaFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOPostTypeBreadcrumbs = {
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type tsSEOPostTypeBreadcrumbsFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOPostTypeBreadcrumbsFilterListInput = {
  readonly elemMatch: InputMaybe<tsSEOPostTypeBreadcrumbsFilterInput>;
};

/** The Schema types */
type tsSEOPostTypeSchema = {
  readonly articleType: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly pageType: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly raw: Maybe<Scalars['String']>;
};

type tsSEOPostTypeSchemaFilterInput = {
  readonly articleType: InputMaybe<StringQueryOperatorInput>;
  readonly pageType: InputMaybe<StringQueryOperatorInput>;
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

/** The Yoast redirect data  (Yoast Premium only) */
type tsSEORedirect = {
  readonly format: Maybe<Scalars['String']>;
  readonly origin: Maybe<Scalars['String']>;
  readonly target: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['Int']>;
};

type tsSEORedirectFilterInput = {
  readonly format: InputMaybe<StringQueryOperatorInput>;
  readonly origin: InputMaybe<StringQueryOperatorInput>;
  readonly target: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<IntQueryOperatorInput>;
};

type tsSEORedirectFilterListInput = {
  readonly elemMatch: InputMaybe<tsSEORedirectFilterInput>;
};

/** The Yoast SEO schema data */
type tsSEOSchema = {
  readonly companyLogo: Maybe<tsMediaItem>;
  readonly companyName: Maybe<Scalars['String']>;
  readonly companyOrPerson: Maybe<Scalars['String']>;
  readonly homeUrl: Maybe<Scalars['String']>;
  readonly inLanguage: Maybe<Scalars['String']>;
  readonly logo: Maybe<tsMediaItem>;
  readonly personLogo: Maybe<tsMediaItem>;
  readonly personName: Maybe<Scalars['String']>;
  readonly siteName: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly wordpressSiteName: Maybe<Scalars['String']>;
};

type tsSEOSchemaFilterInput = {
  readonly companyLogo: InputMaybe<tsMediaItemFilterInput>;
  readonly companyName: InputMaybe<StringQueryOperatorInput>;
  readonly companyOrPerson: InputMaybe<StringQueryOperatorInput>;
  readonly homeUrl: InputMaybe<StringQueryOperatorInput>;
  readonly inLanguage: InputMaybe<StringQueryOperatorInput>;
  readonly logo: InputMaybe<tsMediaItemFilterInput>;
  readonly personLogo: InputMaybe<tsMediaItemFilterInput>;
  readonly personName: InputMaybe<StringQueryOperatorInput>;
  readonly siteName: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly wordpressSiteName: InputMaybe<StringQueryOperatorInput>;
};

/** The Yoast SEO Social media links */
type tsSEOSocial = {
  readonly facebook: Maybe<tsSEOSocialFacebook>;
  readonly instagram: Maybe<tsSEOSocialInstagram>;
  readonly linkedIn: Maybe<tsSEOSocialLinkedIn>;
  readonly mySpace: Maybe<tsSEOSocialMySpace>;
  readonly pinterest: Maybe<tsSEOSocialPinterest>;
  readonly twitter: Maybe<tsSEOSocialTwitter>;
  readonly wikipedia: Maybe<tsSEOSocialWikipedia>;
  readonly youTube: Maybe<tsSEOSocialYoutube>;
};

type tsSEOSocialFacebook = {
  readonly defaultImage: Maybe<tsMediaItem>;
  readonly url: Maybe<Scalars['String']>;
};

type tsSEOSocialFacebookFilterInput = {
  readonly defaultImage: InputMaybe<tsMediaItemFilterInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOSocialFilterInput = {
  readonly facebook: InputMaybe<tsSEOSocialFacebookFilterInput>;
  readonly instagram: InputMaybe<tsSEOSocialInstagramFilterInput>;
  readonly linkedIn: InputMaybe<tsSEOSocialLinkedInFilterInput>;
  readonly mySpace: InputMaybe<tsSEOSocialMySpaceFilterInput>;
  readonly pinterest: InputMaybe<tsSEOSocialPinterestFilterInput>;
  readonly twitter: InputMaybe<tsSEOSocialTwitterFilterInput>;
  readonly wikipedia: InputMaybe<tsSEOSocialWikipediaFilterInput>;
  readonly youTube: InputMaybe<tsSEOSocialYoutubeFilterInput>;
};

type tsSEOSocialInstagram = {
  readonly url: Maybe<Scalars['String']>;
};

type tsSEOSocialInstagramFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOSocialLinkedIn = {
  readonly url: Maybe<Scalars['String']>;
};

type tsSEOSocialLinkedInFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOSocialMySpace = {
  readonly url: Maybe<Scalars['String']>;
};

type tsSEOSocialMySpaceFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOSocialPinterest = {
  readonly metaTag: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type tsSEOSocialPinterestFilterInput = {
  readonly metaTag: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOSocialTwitter = {
  readonly cardType: Maybe<tsSEOCardType>;
  readonly username: Maybe<Scalars['String']>;
};

type tsSEOSocialTwitterFilterInput = {
  readonly cardType: InputMaybe<tsSEOCardTypeQueryOperatorInput>;
  readonly username: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOSocialWikipedia = {
  readonly url: Maybe<Scalars['String']>;
};

type tsSEOSocialWikipediaFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOSocialYoutube = {
  readonly url: Maybe<Scalars['String']>;
};

type tsSEOSocialYoutubeFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

/** The Schema types for Taxonomy */
type tsSEOTaxonomySchema = {
  readonly raw: Maybe<Scalars['String']>;
};

type tsSEOTaxonomySchemaFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOUser = {
  readonly breadcrumbTitle: Maybe<Scalars['String']>;
  readonly canonical: Maybe<Scalars['String']>;
  readonly fullHead: Maybe<Scalars['String']>;
  readonly language: Maybe<Scalars['String']>;
  readonly metaDesc: Maybe<Scalars['String']>;
  readonly metaRobotsNofollow: Maybe<Scalars['String']>;
  readonly metaRobotsNoindex: Maybe<Scalars['String']>;
  readonly opengraphDescription: Maybe<Scalars['String']>;
  readonly opengraphImage: Maybe<tsMediaItem>;
  readonly opengraphTitle: Maybe<Scalars['String']>;
  readonly region: Maybe<Scalars['String']>;
  readonly schema: Maybe<tsSEOUserSchema>;
  readonly social: Maybe<tsSEOUserSocial>;
  readonly title: Maybe<Scalars['String']>;
  readonly twitterDescription: Maybe<Scalars['String']>;
  readonly twitterImage: Maybe<tsMediaItem>;
  readonly twitterTitle: Maybe<Scalars['String']>;
};

type tsSEOUserFilterInput = {
  readonly breadcrumbTitle: InputMaybe<StringQueryOperatorInput>;
  readonly canonical: InputMaybe<StringQueryOperatorInput>;
  readonly fullHead: InputMaybe<StringQueryOperatorInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly metaDesc: InputMaybe<StringQueryOperatorInput>;
  readonly metaRobotsNofollow: InputMaybe<StringQueryOperatorInput>;
  readonly metaRobotsNoindex: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphDescription: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphImage: InputMaybe<tsMediaItemFilterInput>;
  readonly opengraphTitle: InputMaybe<StringQueryOperatorInput>;
  readonly region: InputMaybe<StringQueryOperatorInput>;
  readonly schema: InputMaybe<tsSEOUserSchemaFilterInput>;
  readonly social: InputMaybe<tsSEOUserSocialFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitterDescription: InputMaybe<StringQueryOperatorInput>;
  readonly twitterImage: InputMaybe<tsMediaItemFilterInput>;
  readonly twitterTitle: InputMaybe<StringQueryOperatorInput>;
};

/** The Schema types for User */
type tsSEOUserSchema = {
  readonly articleType: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly pageType: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly raw: Maybe<Scalars['String']>;
};

type tsSEOUserSchemaFilterInput = {
  readonly articleType: InputMaybe<StringQueryOperatorInput>;
  readonly pageType: InputMaybe<StringQueryOperatorInput>;
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type tsSEOUserSocial = {
  readonly facebook: Maybe<Scalars['String']>;
  readonly instagram: Maybe<Scalars['String']>;
  readonly linkedIn: Maybe<Scalars['String']>;
  readonly mySpace: Maybe<Scalars['String']>;
  readonly pinterest: Maybe<Scalars['String']>;
  readonly soundCloud: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
  readonly wikipedia: Maybe<Scalars['String']>;
  readonly youTube: Maybe<Scalars['String']>;
};

type tsSEOUserSocialFilterInput = {
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly instagram: InputMaybe<StringQueryOperatorInput>;
  readonly linkedIn: InputMaybe<StringQueryOperatorInput>;
  readonly mySpace: InputMaybe<StringQueryOperatorInput>;
  readonly pinterest: InputMaybe<StringQueryOperatorInput>;
  readonly soundCloud: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly wikipedia: InputMaybe<StringQueryOperatorInput>;
  readonly youTube: InputMaybe<StringQueryOperatorInput>;
};

/** The Yoast SEO  webmaster fields */
type tsSEOWebmaster = {
  readonly baiduVerify: Maybe<Scalars['String']>;
  readonly googleVerify: Maybe<Scalars['String']>;
  readonly msVerify: Maybe<Scalars['String']>;
  readonly yandexVerify: Maybe<Scalars['String']>;
};

type tsSEOWebmasterFilterInput = {
  readonly baiduVerify: InputMaybe<StringQueryOperatorInput>;
  readonly googleVerify: InputMaybe<StringQueryOperatorInput>;
  readonly msVerify: InputMaybe<StringQueryOperatorInput>;
  readonly yandexVerify: InputMaybe<StringQueryOperatorInput>;
};

/** A Gravity Forms section field. */
type tsSectionField = tsFormField & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithLabel & {
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms select field. */
type tsSelectField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithChoices & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithEnableEnhancedUI & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** The available choices for the select field. */
  readonly choices: Maybe<ReadonlyArray<Maybe<tsSelectFieldChoice>>>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user. */
  readonly hasChoiceValue: Maybe<Scalars['Boolean']>;
  /** When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields. */
  readonly hasEnhancedUI: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** SelectFieldChoice choice values. */
type tsSelectFieldChoice = tsGfFieldChoice & tsGfFieldChoiceWithChoices & {
  /** Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected. */
  readonly isSelected: Maybe<Scalars['Boolean']>;
  /** The text to be displayed to the user when displaying this choice. */
  readonly text: Maybe<Scalars['String']>;
  /** The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property. */
  readonly value: Maybe<Scalars['String']>;
};

/** All of the registered settings */
type tsSettings = {
  /** Settings of the the string Settings Group */
  readonly discussionSettingsDefaultCommentStatus: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  readonly discussionSettingsDefaultPingStatus: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  readonly generalSettingsDateFormat: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  readonly generalSettingsDescription: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  readonly generalSettingsEmail: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  readonly generalSettingsLanguage: Maybe<Scalars['String']>;
  /** Settings of the the integer Settings Group */
  readonly generalSettingsStartOfWeek: Maybe<Scalars['Int']>;
  /** Settings of the the string Settings Group */
  readonly generalSettingsTimeFormat: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  readonly generalSettingsTimezone: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  readonly generalSettingsTitle: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  readonly generalSettingsUrl: Maybe<Scalars['String']>;
  /** Settings of the the integer Settings Group */
  readonly readingSettingsPageForPosts: Maybe<Scalars['Int']>;
  /** Settings of the the integer Settings Group */
  readonly readingSettingsPageOnFront: Maybe<Scalars['Int']>;
  /** Settings of the the integer Settings Group */
  readonly readingSettingsPostsPerPage: Maybe<Scalars['Int']>;
  /** Settings of the the string Settings Group */
  readonly readingSettingsShowOnFront: Maybe<Scalars['String']>;
  /** Settings of the the integer Settings Group */
  readonly writingSettingsDefaultCategory: Maybe<Scalars['Int']>;
  /** Settings of the the string Settings Group */
  readonly writingSettingsDefaultPostFormat: Maybe<Scalars['String']>;
  /** Settings of the the boolean Settings Group */
  readonly writingSettingsUseSmilies: Maybe<Scalars['Boolean']>;
};

type tsSettingsFilterInput = {
  readonly discussionSettingsDefaultCommentStatus: InputMaybe<StringQueryOperatorInput>;
  readonly discussionSettingsDefaultPingStatus: InputMaybe<StringQueryOperatorInput>;
  readonly generalSettingsDateFormat: InputMaybe<StringQueryOperatorInput>;
  readonly generalSettingsDescription: InputMaybe<StringQueryOperatorInput>;
  readonly generalSettingsEmail: InputMaybe<StringQueryOperatorInput>;
  readonly generalSettingsLanguage: InputMaybe<StringQueryOperatorInput>;
  readonly generalSettingsStartOfWeek: InputMaybe<IntQueryOperatorInput>;
  readonly generalSettingsTimeFormat: InputMaybe<StringQueryOperatorInput>;
  readonly generalSettingsTimezone: InputMaybe<StringQueryOperatorInput>;
  readonly generalSettingsTitle: InputMaybe<StringQueryOperatorInput>;
  readonly generalSettingsUrl: InputMaybe<StringQueryOperatorInput>;
  readonly readingSettingsPageForPosts: InputMaybe<IntQueryOperatorInput>;
  readonly readingSettingsPageOnFront: InputMaybe<IntQueryOperatorInput>;
  readonly readingSettingsPostsPerPage: InputMaybe<IntQueryOperatorInput>;
  readonly readingSettingsShowOnFront: InputMaybe<StringQueryOperatorInput>;
  readonly writingSettingsDefaultCategory: InputMaybe<IntQueryOperatorInput>;
  readonly writingSettingsDefaultPostFormat: InputMaybe<StringQueryOperatorInput>;
  readonly writingSettingsUseSmilies: InputMaybe<BooleanQueryOperatorInput>;
};

/** The SingleTestimonialCategory type */
type tsSingleTestimonialCategory = Node & tsDatabaseIdentifier & tsHierarchicalTermNode & tsMenuItemLinkable & tsNode & tsTermNode & tsUniformResourceIdentifiable & {
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsSingleTestimonialCategoryToAncestorsSingleTestimonialCategoryConnection>;
  readonly children: ReadonlyArray<Node>;
  /** Connection between the SingleTestimonialCategory type and the ContentNode type */
  readonly contentNodes: Maybe<tsSingleTestimonialCategoryToContentNodeConnection>;
  /** The number of objects connected to the object */
  readonly count: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** The description of the object */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The link to the term */
  readonly link: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** The Yoast SEO data of the Testimonial Category taxonomy. */
  readonly seo: Maybe<tsTaxonomySEO>;
  /** An alphanumeric identifier for the object unique to its type. */
  readonly slug: Maybe<Scalars['String']>;
  /** Connection between the SingleTestimonialCategory type and the Taxonomy type */
  readonly taxonomy: Maybe<tsSingleTestimonialCategoryToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  readonly taxonomyName: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  readonly termGroupId: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  readonly termTaxonomyId: Maybe<Scalars['Int']>;
  /** Connection between the SingleTestimonialCategory type and the Testimonial type */
  readonly testimonial: Maybe<tsSingleTestimonialCategoryToTestimonialConnection>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** Connection between the SingleTestimonialCategory type and the SingleTestimonialCategory type */
  readonly wpChildren: Maybe<tsSingleTestimonialCategoryToSingleTestimonialCategoryConnection>;
  /** Connection between the SingleTestimonialCategory type and the SingleTestimonialCategory type */
  readonly wpParent: Maybe<tsSingleTestimonialCategoryToParentSingleTestimonialCategoryConnectionEdge>;
};

type tsSingleTestimonialCategoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsSingleTestimonialCategoryEdge>;
  readonly group: ReadonlyArray<tsSingleTestimonialCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsSingleTestimonialCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsSingleTestimonialCategoryConnection_distinctArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
};


type tsSingleTestimonialCategoryConnection_groupArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsSingleTestimonialCategoryConnection_maxArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
};


type tsSingleTestimonialCategoryConnection_minArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
};


type tsSingleTestimonialCategoryConnection_sumArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
};

type tsSingleTestimonialCategoryEdge = {
  readonly next: Maybe<tsSingleTestimonialCategory>;
  readonly node: tsSingleTestimonialCategory;
  readonly previous: Maybe<tsSingleTestimonialCategory>;
};

type tsSingleTestimonialCategoryFieldsEnum =
  | 'ancestors.nodes'
  | 'ancestors.nodes.ancestors.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentNodes.nodes'
  | 'ancestors.nodes.count'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.description'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.name'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parentDatabaseId'
  | 'ancestors.nodes.parentId'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.taxonomyName'
  | 'ancestors.nodes.termGroupId'
  | 'ancestors.nodes.termTaxonomyId'
  | 'ancestors.nodes.testimonial.nodes'
  | 'ancestors.nodes.uri'
  | 'ancestors.nodes.wpChildren.nodes'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentNodes.nodes'
  | 'contentNodes.nodes.children'
  | 'contentNodes.nodes.children.children'
  | 'contentNodes.nodes.children.id'
  | 'contentNodes.nodes.contentTypeName'
  | 'contentNodes.nodes.databaseId'
  | 'contentNodes.nodes.date'
  | 'contentNodes.nodes.dateGmt'
  | 'contentNodes.nodes.desiredSlug'
  | 'contentNodes.nodes.enclosure'
  | 'contentNodes.nodes.guid'
  | 'contentNodes.nodes.id'
  | 'contentNodes.nodes.internal.content'
  | 'contentNodes.nodes.internal.contentDigest'
  | 'contentNodes.nodes.internal.contentFilePath'
  | 'contentNodes.nodes.internal.description'
  | 'contentNodes.nodes.internal.fieldOwners'
  | 'contentNodes.nodes.internal.ignoreType'
  | 'contentNodes.nodes.internal.mediaType'
  | 'contentNodes.nodes.internal.owner'
  | 'contentNodes.nodes.internal.type'
  | 'contentNodes.nodes.isContentNode'
  | 'contentNodes.nodes.isTermNode'
  | 'contentNodes.nodes.link'
  | 'contentNodes.nodes.modified'
  | 'contentNodes.nodes.modifiedGmt'
  | 'contentNodes.nodes.nodeType'
  | 'contentNodes.nodes.parent.children'
  | 'contentNodes.nodes.parent.id'
  | 'contentNodes.nodes.seo.breadcrumbs'
  | 'contentNodes.nodes.seo.canonical'
  | 'contentNodes.nodes.seo.cornerstone'
  | 'contentNodes.nodes.seo.focuskw'
  | 'contentNodes.nodes.seo.fullHead'
  | 'contentNodes.nodes.seo.metaDesc'
  | 'contentNodes.nodes.seo.metaKeywords'
  | 'contentNodes.nodes.seo.metaRobotsNofollow'
  | 'contentNodes.nodes.seo.metaRobotsNoindex'
  | 'contentNodes.nodes.seo.opengraphAuthor'
  | 'contentNodes.nodes.seo.opengraphDescription'
  | 'contentNodes.nodes.seo.opengraphModifiedTime'
  | 'contentNodes.nodes.seo.opengraphPublishedTime'
  | 'contentNodes.nodes.seo.opengraphPublisher'
  | 'contentNodes.nodes.seo.opengraphSiteName'
  | 'contentNodes.nodes.seo.opengraphTitle'
  | 'contentNodes.nodes.seo.opengraphType'
  | 'contentNodes.nodes.seo.opengraphUrl'
  | 'contentNodes.nodes.seo.readingTime'
  | 'contentNodes.nodes.seo.title'
  | 'contentNodes.nodes.seo.twitterDescription'
  | 'contentNodes.nodes.seo.twitterTitle'
  | 'contentNodes.nodes.slug'
  | 'contentNodes.nodes.status'
  | 'contentNodes.nodes.template.templateName'
  | 'contentNodes.nodes.uri'
  | 'count'
  | 'databaseId'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'link'
  | 'name'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'taxonomyName'
  | 'taxonomy.node.archivePath'
  | 'taxonomy.node.children'
  | 'taxonomy.node.children.children'
  | 'taxonomy.node.children.id'
  | 'taxonomy.node.connectedContentTypes.nodes'
  | 'taxonomy.node.description'
  | 'taxonomy.node.graphqlPluralName'
  | 'taxonomy.node.graphqlSingleName'
  | 'taxonomy.node.hierarchical'
  | 'taxonomy.node.id'
  | 'taxonomy.node.internal.content'
  | 'taxonomy.node.internal.contentDigest'
  | 'taxonomy.node.internal.contentFilePath'
  | 'taxonomy.node.internal.description'
  | 'taxonomy.node.internal.fieldOwners'
  | 'taxonomy.node.internal.ignoreType'
  | 'taxonomy.node.internal.mediaType'
  | 'taxonomy.node.internal.owner'
  | 'taxonomy.node.internal.type'
  | 'taxonomy.node.label'
  | 'taxonomy.node.name'
  | 'taxonomy.node.nodeType'
  | 'taxonomy.node.parent.children'
  | 'taxonomy.node.parent.id'
  | 'taxonomy.node.public'
  | 'taxonomy.node.restBase'
  | 'taxonomy.node.restControllerClass'
  | 'taxonomy.node.showCloud'
  | 'taxonomy.node.showInAdminColumn'
  | 'taxonomy.node.showInGraphql'
  | 'taxonomy.node.showInMenu'
  | 'taxonomy.node.showInNavMenus'
  | 'taxonomy.node.showInQuickEdit'
  | 'taxonomy.node.showInRest'
  | 'taxonomy.node.showUi'
  | 'termGroupId'
  | 'termTaxonomyId'
  | 'testimonial.nodes'
  | 'testimonial.nodes.TestimonialsForCaseStudies.author'
  | 'testimonial.nodes.TestimonialsForCaseStudies.company'
  | 'testimonial.nodes.TestimonialsForCaseStudies.content'
  | 'testimonial.nodes.TestimonialsForCaseStudies.fieldGroupName'
  | 'testimonial.nodes.TestimonialsForCaseStudies.jobTitle'
  | 'testimonial.nodes.TestimonialsForCaseStudies.style'
  | 'testimonial.nodes.ancestors.nodes'
  | 'testimonial.nodes.children'
  | 'testimonial.nodes.children.children'
  | 'testimonial.nodes.children.id'
  | 'testimonial.nodes.content'
  | 'testimonial.nodes.contentTypeName'
  | 'testimonial.nodes.databaseId'
  | 'testimonial.nodes.date'
  | 'testimonial.nodes.dateGmt'
  | 'testimonial.nodes.desiredSlug'
  | 'testimonial.nodes.enclosure'
  | 'testimonial.nodes.featuredImageDatabaseId'
  | 'testimonial.nodes.featuredImageId'
  | 'testimonial.nodes.guid'
  | 'testimonial.nodes.id'
  | 'testimonial.nodes.internal.content'
  | 'testimonial.nodes.internal.contentDigest'
  | 'testimonial.nodes.internal.contentFilePath'
  | 'testimonial.nodes.internal.description'
  | 'testimonial.nodes.internal.fieldOwners'
  | 'testimonial.nodes.internal.ignoreType'
  | 'testimonial.nodes.internal.mediaType'
  | 'testimonial.nodes.internal.owner'
  | 'testimonial.nodes.internal.type'
  | 'testimonial.nodes.isContentNode'
  | 'testimonial.nodes.isTermNode'
  | 'testimonial.nodes.link'
  | 'testimonial.nodes.menuOrder'
  | 'testimonial.nodes.modified'
  | 'testimonial.nodes.modifiedGmt'
  | 'testimonial.nodes.nodeType'
  | 'testimonial.nodes.parentDatabaseId'
  | 'testimonial.nodes.parentId'
  | 'testimonial.nodes.parent.children'
  | 'testimonial.nodes.parent.id'
  | 'testimonial.nodes.seo.breadcrumbs'
  | 'testimonial.nodes.seo.canonical'
  | 'testimonial.nodes.seo.cornerstone'
  | 'testimonial.nodes.seo.focuskw'
  | 'testimonial.nodes.seo.fullHead'
  | 'testimonial.nodes.seo.metaDesc'
  | 'testimonial.nodes.seo.metaKeywords'
  | 'testimonial.nodes.seo.metaRobotsNofollow'
  | 'testimonial.nodes.seo.metaRobotsNoindex'
  | 'testimonial.nodes.seo.opengraphAuthor'
  | 'testimonial.nodes.seo.opengraphDescription'
  | 'testimonial.nodes.seo.opengraphModifiedTime'
  | 'testimonial.nodes.seo.opengraphPublishedTime'
  | 'testimonial.nodes.seo.opengraphPublisher'
  | 'testimonial.nodes.seo.opengraphSiteName'
  | 'testimonial.nodes.seo.opengraphTitle'
  | 'testimonial.nodes.seo.opengraphType'
  | 'testimonial.nodes.seo.opengraphUrl'
  | 'testimonial.nodes.seo.readingTime'
  | 'testimonial.nodes.seo.title'
  | 'testimonial.nodes.seo.twitterDescription'
  | 'testimonial.nodes.seo.twitterTitle'
  | 'testimonial.nodes.slug'
  | 'testimonial.nodes.status'
  | 'testimonial.nodes.tags.nodes'
  | 'testimonial.nodes.template.templateName'
  | 'testimonial.nodes.terms.nodes'
  | 'testimonial.nodes.testimonialCategory.nodes'
  | 'testimonial.nodes.title'
  | 'testimonial.nodes.uri'
  | 'testimonial.nodes.wpChildren.nodes'
  | 'uri'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.ancestors.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentNodes.nodes'
  | 'wpChildren.nodes.count'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.description'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.name'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parentDatabaseId'
  | 'wpChildren.nodes.parentId'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.taxonomyName'
  | 'wpChildren.nodes.termGroupId'
  | 'wpChildren.nodes.termTaxonomyId'
  | 'wpChildren.nodes.testimonial.nodes'
  | 'wpChildren.nodes.uri'
  | 'wpChildren.nodes.wpChildren.nodes'
  | 'wpParent.node.ancestors.nodes'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentNodes.nodes'
  | 'wpParent.node.count'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.description'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.name'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parentDatabaseId'
  | 'wpParent.node.parentId'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.taxonomyName'
  | 'wpParent.node.termGroupId'
  | 'wpParent.node.termTaxonomyId'
  | 'wpParent.node.testimonial.nodes'
  | 'wpParent.node.uri'
  | 'wpParent.node.wpChildren.nodes';

type tsSingleTestimonialCategoryFilterInput = {
  readonly ancestors: InputMaybe<tsSingleTestimonialCategoryToAncestorsSingleTestimonialCategoryConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentNodes: InputMaybe<tsSingleTestimonialCategoryToContentNodeConnectionFilterInput>;
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly seo: InputMaybe<tsTaxonomySEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly taxonomy: InputMaybe<tsSingleTestimonialCategoryToTaxonomyConnectionEdgeFilterInput>;
  readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
  readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
  readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  readonly testimonial: InputMaybe<tsSingleTestimonialCategoryToTestimonialConnectionFilterInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsSingleTestimonialCategoryToSingleTestimonialCategoryConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsSingleTestimonialCategoryToParentSingleTestimonialCategoryConnectionEdgeFilterInput>;
};

type tsSingleTestimonialCategoryFilterListInput = {
  readonly elemMatch: InputMaybe<tsSingleTestimonialCategoryFilterInput>;
};

type tsSingleTestimonialCategoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsSingleTestimonialCategoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsSingleTestimonialCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsSingleTestimonialCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsSingleTestimonialCategoryGroupConnection_distinctArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
};


type tsSingleTestimonialCategoryGroupConnection_groupArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsSingleTestimonialCategoryGroupConnection_maxArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
};


type tsSingleTestimonialCategoryGroupConnection_minArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
};


type tsSingleTestimonialCategoryGroupConnection_sumArgs = {
  field: tsSingleTestimonialCategoryFieldsEnum;
};

type tsSingleTestimonialCategorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsSingleTestimonialCategoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the SingleTestimonialCategory type and the SingleTestimonialCategory type */
type tsSingleTestimonialCategoryToAncestorsSingleTestimonialCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsSingleTestimonialCategory>>>;
};

type tsSingleTestimonialCategoryToAncestorsSingleTestimonialCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsSingleTestimonialCategoryFilterListInput>;
};

/** Connection between the SingleTestimonialCategory type and the ContentNode type */
type tsSingleTestimonialCategoryToContentNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsSingleTestimonialCategoryToContentNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the SingleTestimonialCategory type and the SingleTestimonialCategory type */
type tsSingleTestimonialCategoryToParentSingleTestimonialCategoryConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsSingleTestimonialCategory>;
};

type tsSingleTestimonialCategoryToParentSingleTestimonialCategoryConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsSingleTestimonialCategoryFilterInput>;
};

/** Connection between the SingleTestimonialCategory type and the SingleTestimonialCategory type */
type tsSingleTestimonialCategoryToSingleTestimonialCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsSingleTestimonialCategory>>>;
};

type tsSingleTestimonialCategoryToSingleTestimonialCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsSingleTestimonialCategoryFilterListInput>;
};

/** Connection between the SingleTestimonialCategory type and the Taxonomy type */
type tsSingleTestimonialCategoryToTaxonomyConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsTaxonomy>;
};

type tsSingleTestimonialCategoryToTaxonomyConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsTaxonomyFilterInput>;
};

/** Connection between the SingleTestimonialCategory type and the Testimonial type */
type tsSingleTestimonialCategoryToTestimonialConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsTestimonial>>>;
};

type tsSingleTestimonialCategoryToTestimonialConnectionFilterInput = {
  readonly nodes: InputMaybe<tsTestimonialFilterListInput>;
};

type tsSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** The tag type */
type tsTag = Node & tsDatabaseIdentifier & tsMenuItemLinkable & tsNode & tsTermNode & tsUniformResourceIdentifiable & {
  readonly children: ReadonlyArray<Node>;
  /** Connection between the tag type and the ContentNode type */
  readonly contentNodes: Maybe<tsTagToContentNodeConnection>;
  /** The number of objects connected to the object */
  readonly count: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** The description of the object */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The link to the term */
  readonly link: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Connection between the tag type and the post type */
  readonly posts: Maybe<tsTagToPostConnection>;
  /** The Yoast SEO data of the Tags taxonomy. */
  readonly seo: Maybe<tsTaxonomySEO>;
  /** An alphanumeric identifier for the object unique to its type. */
  readonly slug: Maybe<Scalars['String']>;
  /** Connection between the tag type and the Taxonomy type */
  readonly taxonomy: Maybe<tsTagToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  readonly taxonomyName: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  readonly termGroupId: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  readonly termTaxonomyId: Maybe<Scalars['Int']>;
  /** Connection between the tag type and the Testimonial type */
  readonly testimonial: Maybe<tsTagToTestimonialConnection>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};

type tsTagConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTagEdge>;
  readonly group: ReadonlyArray<tsTagGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTag>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTagConnection_distinctArgs = {
  field: tsTagFieldsEnum;
};


type tsTagConnection_groupArgs = {
  field: tsTagFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTagConnection_maxArgs = {
  field: tsTagFieldsEnum;
};


type tsTagConnection_minArgs = {
  field: tsTagFieldsEnum;
};


type tsTagConnection_sumArgs = {
  field: tsTagFieldsEnum;
};

type tsTagEdge = {
  readonly next: Maybe<tsTag>;
  readonly node: tsTag;
  readonly previous: Maybe<tsTag>;
};

type tsTagFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentNodes.nodes'
  | 'contentNodes.nodes.children'
  | 'contentNodes.nodes.children.children'
  | 'contentNodes.nodes.children.id'
  | 'contentNodes.nodes.contentTypeName'
  | 'contentNodes.nodes.databaseId'
  | 'contentNodes.nodes.date'
  | 'contentNodes.nodes.dateGmt'
  | 'contentNodes.nodes.desiredSlug'
  | 'contentNodes.nodes.enclosure'
  | 'contentNodes.nodes.guid'
  | 'contentNodes.nodes.id'
  | 'contentNodes.nodes.internal.content'
  | 'contentNodes.nodes.internal.contentDigest'
  | 'contentNodes.nodes.internal.contentFilePath'
  | 'contentNodes.nodes.internal.description'
  | 'contentNodes.nodes.internal.fieldOwners'
  | 'contentNodes.nodes.internal.ignoreType'
  | 'contentNodes.nodes.internal.mediaType'
  | 'contentNodes.nodes.internal.owner'
  | 'contentNodes.nodes.internal.type'
  | 'contentNodes.nodes.isContentNode'
  | 'contentNodes.nodes.isTermNode'
  | 'contentNodes.nodes.link'
  | 'contentNodes.nodes.modified'
  | 'contentNodes.nodes.modifiedGmt'
  | 'contentNodes.nodes.nodeType'
  | 'contentNodes.nodes.parent.children'
  | 'contentNodes.nodes.parent.id'
  | 'contentNodes.nodes.seo.breadcrumbs'
  | 'contentNodes.nodes.seo.canonical'
  | 'contentNodes.nodes.seo.cornerstone'
  | 'contentNodes.nodes.seo.focuskw'
  | 'contentNodes.nodes.seo.fullHead'
  | 'contentNodes.nodes.seo.metaDesc'
  | 'contentNodes.nodes.seo.metaKeywords'
  | 'contentNodes.nodes.seo.metaRobotsNofollow'
  | 'contentNodes.nodes.seo.metaRobotsNoindex'
  | 'contentNodes.nodes.seo.opengraphAuthor'
  | 'contentNodes.nodes.seo.opengraphDescription'
  | 'contentNodes.nodes.seo.opengraphModifiedTime'
  | 'contentNodes.nodes.seo.opengraphPublishedTime'
  | 'contentNodes.nodes.seo.opengraphPublisher'
  | 'contentNodes.nodes.seo.opengraphSiteName'
  | 'contentNodes.nodes.seo.opengraphTitle'
  | 'contentNodes.nodes.seo.opengraphType'
  | 'contentNodes.nodes.seo.opengraphUrl'
  | 'contentNodes.nodes.seo.readingTime'
  | 'contentNodes.nodes.seo.title'
  | 'contentNodes.nodes.seo.twitterDescription'
  | 'contentNodes.nodes.seo.twitterTitle'
  | 'contentNodes.nodes.slug'
  | 'contentNodes.nodes.status'
  | 'contentNodes.nodes.template.templateName'
  | 'contentNodes.nodes.uri'
  | 'count'
  | 'databaseId'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'link'
  | 'name'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'posts.nodes'
  | 'posts.nodes.authorDatabaseId'
  | 'posts.nodes.authorId'
  | 'posts.nodes.caseStudy.appGallery'
  | 'posts.nodes.caseStudy.fieldGroupName'
  | 'posts.nodes.caseStudy.gallery'
  | 'posts.nodes.caseStudy.ourRole'
  | 'posts.nodes.caseStudy.problem'
  | 'posts.nodes.caseStudy.problemStrategyResultLayout'
  | 'posts.nodes.caseStudy.result'
  | 'posts.nodes.caseStudy.strategy'
  | 'posts.nodes.caseStudy.technology'
  | 'posts.nodes.caseStudy.type'
  | 'posts.nodes.categories.nodes'
  | 'posts.nodes.children'
  | 'posts.nodes.children.children'
  | 'posts.nodes.children.id'
  | 'posts.nodes.commentCount'
  | 'posts.nodes.commentStatus'
  | 'posts.nodes.comments.nodes'
  | 'posts.nodes.content'
  | 'posts.nodes.contentTypeName'
  | 'posts.nodes.databaseId'
  | 'posts.nodes.date'
  | 'posts.nodes.dateGmt'
  | 'posts.nodes.desiredSlug'
  | 'posts.nodes.enclosure'
  | 'posts.nodes.excerpt'
  | 'posts.nodes.featuredImageDatabaseId'
  | 'posts.nodes.featuredImageId'
  | 'posts.nodes.guid'
  | 'posts.nodes.id'
  | 'posts.nodes.internal.content'
  | 'posts.nodes.internal.contentDigest'
  | 'posts.nodes.internal.contentFilePath'
  | 'posts.nodes.internal.description'
  | 'posts.nodes.internal.fieldOwners'
  | 'posts.nodes.internal.ignoreType'
  | 'posts.nodes.internal.mediaType'
  | 'posts.nodes.internal.owner'
  | 'posts.nodes.internal.type'
  | 'posts.nodes.isContentNode'
  | 'posts.nodes.isRevision'
  | 'posts.nodes.isSticky'
  | 'posts.nodes.isTermNode'
  | 'posts.nodes.link'
  | 'posts.nodes.modified'
  | 'posts.nodes.modifiedGmt'
  | 'posts.nodes.next.authorDatabaseId'
  | 'posts.nodes.next.authorId'
  | 'posts.nodes.next.children'
  | 'posts.nodes.next.commentCount'
  | 'posts.nodes.next.commentStatus'
  | 'posts.nodes.next.content'
  | 'posts.nodes.next.contentTypeName'
  | 'posts.nodes.next.databaseId'
  | 'posts.nodes.next.date'
  | 'posts.nodes.next.dateGmt'
  | 'posts.nodes.next.desiredSlug'
  | 'posts.nodes.next.enclosure'
  | 'posts.nodes.next.excerpt'
  | 'posts.nodes.next.featuredImageDatabaseId'
  | 'posts.nodes.next.featuredImageId'
  | 'posts.nodes.next.guid'
  | 'posts.nodes.next.id'
  | 'posts.nodes.next.isContentNode'
  | 'posts.nodes.next.isRevision'
  | 'posts.nodes.next.isSticky'
  | 'posts.nodes.next.isTermNode'
  | 'posts.nodes.next.link'
  | 'posts.nodes.next.modified'
  | 'posts.nodes.next.modifiedGmt'
  | 'posts.nodes.next.nodeType'
  | 'posts.nodes.next.pingStatus'
  | 'posts.nodes.next.pinged'
  | 'posts.nodes.next.slug'
  | 'posts.nodes.next.status'
  | 'posts.nodes.next.title'
  | 'posts.nodes.next.toPing'
  | 'posts.nodes.next.uri'
  | 'posts.nodes.nodeType'
  | 'posts.nodes.parent.children'
  | 'posts.nodes.parent.id'
  | 'posts.nodes.pingStatus'
  | 'posts.nodes.pinged'
  | 'posts.nodes.postFormats.nodes'
  | 'posts.nodes.previous.authorDatabaseId'
  | 'posts.nodes.previous.authorId'
  | 'posts.nodes.previous.children'
  | 'posts.nodes.previous.commentCount'
  | 'posts.nodes.previous.commentStatus'
  | 'posts.nodes.previous.content'
  | 'posts.nodes.previous.contentTypeName'
  | 'posts.nodes.previous.databaseId'
  | 'posts.nodes.previous.date'
  | 'posts.nodes.previous.dateGmt'
  | 'posts.nodes.previous.desiredSlug'
  | 'posts.nodes.previous.enclosure'
  | 'posts.nodes.previous.excerpt'
  | 'posts.nodes.previous.featuredImageDatabaseId'
  | 'posts.nodes.previous.featuredImageId'
  | 'posts.nodes.previous.guid'
  | 'posts.nodes.previous.id'
  | 'posts.nodes.previous.isContentNode'
  | 'posts.nodes.previous.isRevision'
  | 'posts.nodes.previous.isSticky'
  | 'posts.nodes.previous.isTermNode'
  | 'posts.nodes.previous.link'
  | 'posts.nodes.previous.modified'
  | 'posts.nodes.previous.modifiedGmt'
  | 'posts.nodes.previous.nodeType'
  | 'posts.nodes.previous.pingStatus'
  | 'posts.nodes.previous.pinged'
  | 'posts.nodes.previous.slug'
  | 'posts.nodes.previous.status'
  | 'posts.nodes.previous.title'
  | 'posts.nodes.previous.toPing'
  | 'posts.nodes.previous.uri'
  | 'posts.nodes.selectCaseStudy.fieldGroupName'
  | 'posts.nodes.seo.breadcrumbs'
  | 'posts.nodes.seo.canonical'
  | 'posts.nodes.seo.cornerstone'
  | 'posts.nodes.seo.focuskw'
  | 'posts.nodes.seo.fullHead'
  | 'posts.nodes.seo.metaDesc'
  | 'posts.nodes.seo.metaKeywords'
  | 'posts.nodes.seo.metaRobotsNofollow'
  | 'posts.nodes.seo.metaRobotsNoindex'
  | 'posts.nodes.seo.opengraphAuthor'
  | 'posts.nodes.seo.opengraphDescription'
  | 'posts.nodes.seo.opengraphModifiedTime'
  | 'posts.nodes.seo.opengraphPublishedTime'
  | 'posts.nodes.seo.opengraphPublisher'
  | 'posts.nodes.seo.opengraphSiteName'
  | 'posts.nodes.seo.opengraphTitle'
  | 'posts.nodes.seo.opengraphType'
  | 'posts.nodes.seo.opengraphUrl'
  | 'posts.nodes.seo.readingTime'
  | 'posts.nodes.seo.title'
  | 'posts.nodes.seo.twitterDescription'
  | 'posts.nodes.seo.twitterTitle'
  | 'posts.nodes.slug'
  | 'posts.nodes.status'
  | 'posts.nodes.tags.nodes'
  | 'posts.nodes.template.templateName'
  | 'posts.nodes.terms.nodes'
  | 'posts.nodes.title'
  | 'posts.nodes.toPing'
  | 'posts.nodes.uri'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'taxonomyName'
  | 'taxonomy.node.archivePath'
  | 'taxonomy.node.children'
  | 'taxonomy.node.children.children'
  | 'taxonomy.node.children.id'
  | 'taxonomy.node.connectedContentTypes.nodes'
  | 'taxonomy.node.description'
  | 'taxonomy.node.graphqlPluralName'
  | 'taxonomy.node.graphqlSingleName'
  | 'taxonomy.node.hierarchical'
  | 'taxonomy.node.id'
  | 'taxonomy.node.internal.content'
  | 'taxonomy.node.internal.contentDigest'
  | 'taxonomy.node.internal.contentFilePath'
  | 'taxonomy.node.internal.description'
  | 'taxonomy.node.internal.fieldOwners'
  | 'taxonomy.node.internal.ignoreType'
  | 'taxonomy.node.internal.mediaType'
  | 'taxonomy.node.internal.owner'
  | 'taxonomy.node.internal.type'
  | 'taxonomy.node.label'
  | 'taxonomy.node.name'
  | 'taxonomy.node.nodeType'
  | 'taxonomy.node.parent.children'
  | 'taxonomy.node.parent.id'
  | 'taxonomy.node.public'
  | 'taxonomy.node.restBase'
  | 'taxonomy.node.restControllerClass'
  | 'taxonomy.node.showCloud'
  | 'taxonomy.node.showInAdminColumn'
  | 'taxonomy.node.showInGraphql'
  | 'taxonomy.node.showInMenu'
  | 'taxonomy.node.showInNavMenus'
  | 'taxonomy.node.showInQuickEdit'
  | 'taxonomy.node.showInRest'
  | 'taxonomy.node.showUi'
  | 'termGroupId'
  | 'termTaxonomyId'
  | 'testimonial.nodes'
  | 'testimonial.nodes.TestimonialsForCaseStudies.author'
  | 'testimonial.nodes.TestimonialsForCaseStudies.company'
  | 'testimonial.nodes.TestimonialsForCaseStudies.content'
  | 'testimonial.nodes.TestimonialsForCaseStudies.fieldGroupName'
  | 'testimonial.nodes.TestimonialsForCaseStudies.jobTitle'
  | 'testimonial.nodes.TestimonialsForCaseStudies.style'
  | 'testimonial.nodes.ancestors.nodes'
  | 'testimonial.nodes.children'
  | 'testimonial.nodes.children.children'
  | 'testimonial.nodes.children.id'
  | 'testimonial.nodes.content'
  | 'testimonial.nodes.contentTypeName'
  | 'testimonial.nodes.databaseId'
  | 'testimonial.nodes.date'
  | 'testimonial.nodes.dateGmt'
  | 'testimonial.nodes.desiredSlug'
  | 'testimonial.nodes.enclosure'
  | 'testimonial.nodes.featuredImageDatabaseId'
  | 'testimonial.nodes.featuredImageId'
  | 'testimonial.nodes.guid'
  | 'testimonial.nodes.id'
  | 'testimonial.nodes.internal.content'
  | 'testimonial.nodes.internal.contentDigest'
  | 'testimonial.nodes.internal.contentFilePath'
  | 'testimonial.nodes.internal.description'
  | 'testimonial.nodes.internal.fieldOwners'
  | 'testimonial.nodes.internal.ignoreType'
  | 'testimonial.nodes.internal.mediaType'
  | 'testimonial.nodes.internal.owner'
  | 'testimonial.nodes.internal.type'
  | 'testimonial.nodes.isContentNode'
  | 'testimonial.nodes.isTermNode'
  | 'testimonial.nodes.link'
  | 'testimonial.nodes.menuOrder'
  | 'testimonial.nodes.modified'
  | 'testimonial.nodes.modifiedGmt'
  | 'testimonial.nodes.nodeType'
  | 'testimonial.nodes.parentDatabaseId'
  | 'testimonial.nodes.parentId'
  | 'testimonial.nodes.parent.children'
  | 'testimonial.nodes.parent.id'
  | 'testimonial.nodes.seo.breadcrumbs'
  | 'testimonial.nodes.seo.canonical'
  | 'testimonial.nodes.seo.cornerstone'
  | 'testimonial.nodes.seo.focuskw'
  | 'testimonial.nodes.seo.fullHead'
  | 'testimonial.nodes.seo.metaDesc'
  | 'testimonial.nodes.seo.metaKeywords'
  | 'testimonial.nodes.seo.metaRobotsNofollow'
  | 'testimonial.nodes.seo.metaRobotsNoindex'
  | 'testimonial.nodes.seo.opengraphAuthor'
  | 'testimonial.nodes.seo.opengraphDescription'
  | 'testimonial.nodes.seo.opengraphModifiedTime'
  | 'testimonial.nodes.seo.opengraphPublishedTime'
  | 'testimonial.nodes.seo.opengraphPublisher'
  | 'testimonial.nodes.seo.opengraphSiteName'
  | 'testimonial.nodes.seo.opengraphTitle'
  | 'testimonial.nodes.seo.opengraphType'
  | 'testimonial.nodes.seo.opengraphUrl'
  | 'testimonial.nodes.seo.readingTime'
  | 'testimonial.nodes.seo.title'
  | 'testimonial.nodes.seo.twitterDescription'
  | 'testimonial.nodes.seo.twitterTitle'
  | 'testimonial.nodes.slug'
  | 'testimonial.nodes.status'
  | 'testimonial.nodes.tags.nodes'
  | 'testimonial.nodes.template.templateName'
  | 'testimonial.nodes.terms.nodes'
  | 'testimonial.nodes.testimonialCategory.nodes'
  | 'testimonial.nodes.title'
  | 'testimonial.nodes.uri'
  | 'testimonial.nodes.wpChildren.nodes'
  | 'uri';

type tsTagFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentNodes: InputMaybe<tsTagToContentNodeConnectionFilterInput>;
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly posts: InputMaybe<tsTagToPostConnectionFilterInput>;
  readonly seo: InputMaybe<tsTaxonomySEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly taxonomy: InputMaybe<tsTagToTaxonomyConnectionEdgeFilterInput>;
  readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
  readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
  readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  readonly testimonial: InputMaybe<tsTagToTestimonialConnectionFilterInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type tsTagFilterListInput = {
  readonly elemMatch: InputMaybe<tsTagFilterInput>;
};

type tsTagGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTagEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsTagGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTag>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTagGroupConnection_distinctArgs = {
  field: tsTagFieldsEnum;
};


type tsTagGroupConnection_groupArgs = {
  field: tsTagFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTagGroupConnection_maxArgs = {
  field: tsTagFieldsEnum;
};


type tsTagGroupConnection_minArgs = {
  field: tsTagFieldsEnum;
};


type tsTagGroupConnection_sumArgs = {
  field: tsTagFieldsEnum;
};

type tsTagSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsTagFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the tag type and the ContentNode type */
type tsTagToContentNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentNode>>>;
};

type tsTagToContentNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentNodeFilterListInput>;
};

/** Connection between the tag type and the post type */
type tsTagToPostConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsPost>>>;
};

type tsTagToPostConnectionFilterInput = {
  readonly nodes: InputMaybe<tsPostFilterListInput>;
};

/** Connection between the tag type and the Taxonomy type */
type tsTagToTaxonomyConnectionEdge = {
  /** The node of the connection, without the edges */
  readonly node: Maybe<tsTaxonomy>;
};

type tsTagToTaxonomyConnectionEdgeFilterInput = {
  readonly node: InputMaybe<tsTaxonomyFilterInput>;
};

/** Connection between the tag type and the Testimonial type */
type tsTagToTestimonialConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsTestimonial>>>;
};

type tsTagToTestimonialConnectionFilterInput = {
  readonly nodes: InputMaybe<tsTestimonialFilterListInput>;
};

/** A taxonomy object */
type tsTaxonomy = Node & tsNode & {
  /** The url path of the first page of the archive page for this content type. */
  readonly archivePath: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  /** List of Content Types associated with the Taxonomy */
  readonly connectedContentTypes: Maybe<tsTaxonomyToContentTypeConnection>;
  /** Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description */
  readonly description: Maybe<Scalars['String']>;
  /** The plural name of the post type within the GraphQL Schema. */
  readonly graphqlPluralName: Maybe<Scalars['String']>;
  /** The singular name of the post type within the GraphQL Schema. */
  readonly graphqlSingleName: Maybe<Scalars['String']>;
  /** Whether the taxonomy is hierarchical */
  readonly hierarchical: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Name of the taxonomy shown in the menu. Usually plural. */
  readonly label: Maybe<Scalars['String']>;
  /** The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Whether the taxonomy is publicly queryable */
  readonly public: Maybe<Scalars['Boolean']>;
  /** Name of content type to diplay in REST API &quot;wp/v2&quot; namespace. */
  readonly restBase: Maybe<Scalars['String']>;
  /** The REST Controller class assigned to handling this content type. */
  readonly restControllerClass: Maybe<Scalars['String']>;
  /** Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud */
  readonly showCloud: Maybe<Scalars['Boolean']>;
  /** Whether to display a column for the taxonomy on its post type listing screens. */
  readonly showInAdminColumn: Maybe<Scalars['Boolean']>;
  /** Whether to add the post type to the GraphQL Schema. */
  readonly showInGraphql: Maybe<Scalars['Boolean']>;
  /** Whether to show the taxonomy in the admin menu */
  readonly showInMenu: Maybe<Scalars['Boolean']>;
  /** Whether the taxonomy is available for selection in navigation menus. */
  readonly showInNavMenus: Maybe<Scalars['Boolean']>;
  /** Whether to show the taxonomy in the quick/bulk edit panel. */
  readonly showInQuickEdit: Maybe<Scalars['Boolean']>;
  /** Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace. */
  readonly showInRest: Maybe<Scalars['Boolean']>;
  /** Whether to generate and allow a UI for managing terms in this taxonomy in the admin */
  readonly showUi: Maybe<Scalars['Boolean']>;
};

type tsTaxonomyConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTaxonomyEdge>;
  readonly group: ReadonlyArray<tsTaxonomyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTaxonomy>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTaxonomyConnection_distinctArgs = {
  field: tsTaxonomyFieldsEnum;
};


type tsTaxonomyConnection_groupArgs = {
  field: tsTaxonomyFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTaxonomyConnection_maxArgs = {
  field: tsTaxonomyFieldsEnum;
};


type tsTaxonomyConnection_minArgs = {
  field: tsTaxonomyFieldsEnum;
};


type tsTaxonomyConnection_sumArgs = {
  field: tsTaxonomyFieldsEnum;
};

type tsTaxonomyEdge = {
  readonly next: Maybe<tsTaxonomy>;
  readonly node: tsTaxonomy;
  readonly previous: Maybe<tsTaxonomy>;
};

type tsTaxonomyFieldsEnum =
  | 'archivePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'connectedContentTypes.nodes'
  | 'connectedContentTypes.nodes.archivePath'
  | 'connectedContentTypes.nodes.canExport'
  | 'connectedContentTypes.nodes.children'
  | 'connectedContentTypes.nodes.children.children'
  | 'connectedContentTypes.nodes.children.id'
  | 'connectedContentTypes.nodes.connectedTaxonomies.nodes'
  | 'connectedContentTypes.nodes.contentNodes.nodes'
  | 'connectedContentTypes.nodes.deleteWithUser'
  | 'connectedContentTypes.nodes.description'
  | 'connectedContentTypes.nodes.excludeFromSearch'
  | 'connectedContentTypes.nodes.graphqlPluralName'
  | 'connectedContentTypes.nodes.graphqlSingleName'
  | 'connectedContentTypes.nodes.hasArchive'
  | 'connectedContentTypes.nodes.hierarchical'
  | 'connectedContentTypes.nodes.id'
  | 'connectedContentTypes.nodes.internal.content'
  | 'connectedContentTypes.nodes.internal.contentDigest'
  | 'connectedContentTypes.nodes.internal.contentFilePath'
  | 'connectedContentTypes.nodes.internal.description'
  | 'connectedContentTypes.nodes.internal.fieldOwners'
  | 'connectedContentTypes.nodes.internal.ignoreType'
  | 'connectedContentTypes.nodes.internal.mediaType'
  | 'connectedContentTypes.nodes.internal.owner'
  | 'connectedContentTypes.nodes.internal.type'
  | 'connectedContentTypes.nodes.isContentNode'
  | 'connectedContentTypes.nodes.isFrontPage'
  | 'connectedContentTypes.nodes.isPostsPage'
  | 'connectedContentTypes.nodes.isTermNode'
  | 'connectedContentTypes.nodes.label'
  | 'connectedContentTypes.nodes.labels.addNew'
  | 'connectedContentTypes.nodes.labels.addNewItem'
  | 'connectedContentTypes.nodes.labels.allItems'
  | 'connectedContentTypes.nodes.labels.archives'
  | 'connectedContentTypes.nodes.labels.attributes'
  | 'connectedContentTypes.nodes.labels.editItem'
  | 'connectedContentTypes.nodes.labels.featuredImage'
  | 'connectedContentTypes.nodes.labels.filterItemsList'
  | 'connectedContentTypes.nodes.labels.insertIntoItem'
  | 'connectedContentTypes.nodes.labels.itemsList'
  | 'connectedContentTypes.nodes.labels.itemsListNavigation'
  | 'connectedContentTypes.nodes.labels.menuName'
  | 'connectedContentTypes.nodes.labels.name'
  | 'connectedContentTypes.nodes.labels.newItem'
  | 'connectedContentTypes.nodes.labels.notFound'
  | 'connectedContentTypes.nodes.labels.notFoundInTrash'
  | 'connectedContentTypes.nodes.labels.parentItemColon'
  | 'connectedContentTypes.nodes.labels.removeFeaturedImage'
  | 'connectedContentTypes.nodes.labels.searchItems'
  | 'connectedContentTypes.nodes.labels.setFeaturedImage'
  | 'connectedContentTypes.nodes.labels.singularName'
  | 'connectedContentTypes.nodes.labels.uploadedToThisItem'
  | 'connectedContentTypes.nodes.labels.useFeaturedImage'
  | 'connectedContentTypes.nodes.labels.viewItem'
  | 'connectedContentTypes.nodes.labels.viewItems'
  | 'connectedContentTypes.nodes.menuIcon'
  | 'connectedContentTypes.nodes.menuPosition'
  | 'connectedContentTypes.nodes.name'
  | 'connectedContentTypes.nodes.nodeType'
  | 'connectedContentTypes.nodes.parent.children'
  | 'connectedContentTypes.nodes.parent.id'
  | 'connectedContentTypes.nodes.public'
  | 'connectedContentTypes.nodes.publiclyQueryable'
  | 'connectedContentTypes.nodes.restBase'
  | 'connectedContentTypes.nodes.restControllerClass'
  | 'connectedContentTypes.nodes.showInAdminBar'
  | 'connectedContentTypes.nodes.showInGraphql'
  | 'connectedContentTypes.nodes.showInMenu'
  | 'connectedContentTypes.nodes.showInNavMenus'
  | 'connectedContentTypes.nodes.showInRest'
  | 'connectedContentTypes.nodes.showUi'
  | 'connectedContentTypes.nodes.uri'
  | 'description'
  | 'graphqlPluralName'
  | 'graphqlSingleName'
  | 'hierarchical'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'label'
  | 'name'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'public'
  | 'restBase'
  | 'restControllerClass'
  | 'showCloud'
  | 'showInAdminColumn'
  | 'showInGraphql'
  | 'showInMenu'
  | 'showInNavMenus'
  | 'showInQuickEdit'
  | 'showInRest'
  | 'showUi';

type tsTaxonomyFilterInput = {
  readonly archivePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly connectedContentTypes: InputMaybe<tsTaxonomyToContentTypeConnectionFilterInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly graphqlPluralName: InputMaybe<StringQueryOperatorInput>;
  readonly graphqlSingleName: InputMaybe<StringQueryOperatorInput>;
  readonly hierarchical: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly public: InputMaybe<BooleanQueryOperatorInput>;
  readonly restBase: InputMaybe<StringQueryOperatorInput>;
  readonly restControllerClass: InputMaybe<StringQueryOperatorInput>;
  readonly showCloud: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInAdminColumn: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInGraphql: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInMenu: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInNavMenus: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInQuickEdit: InputMaybe<BooleanQueryOperatorInput>;
  readonly showInRest: InputMaybe<BooleanQueryOperatorInput>;
  readonly showUi: InputMaybe<BooleanQueryOperatorInput>;
};

type tsTaxonomyFilterListInput = {
  readonly elemMatch: InputMaybe<tsTaxonomyFilterInput>;
};

type tsTaxonomyGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTaxonomyEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsTaxonomyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTaxonomy>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTaxonomyGroupConnection_distinctArgs = {
  field: tsTaxonomyFieldsEnum;
};


type tsTaxonomyGroupConnection_groupArgs = {
  field: tsTaxonomyFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTaxonomyGroupConnection_maxArgs = {
  field: tsTaxonomyFieldsEnum;
};


type tsTaxonomyGroupConnection_minArgs = {
  field: tsTaxonomyFieldsEnum;
};


type tsTaxonomyGroupConnection_sumArgs = {
  field: tsTaxonomyFieldsEnum;
};

type tsTaxonomySEO = {
  readonly breadcrumbs: Maybe<ReadonlyArray<Maybe<tsSEOPostTypeBreadcrumbs>>>;
  readonly canonical: Maybe<Scalars['String']>;
  readonly cornerstone: Maybe<Scalars['Boolean']>;
  readonly focuskw: Maybe<Scalars['String']>;
  readonly fullHead: Maybe<Scalars['String']>;
  readonly metaDesc: Maybe<Scalars['String']>;
  readonly metaKeywords: Maybe<Scalars['String']>;
  readonly metaRobotsNofollow: Maybe<Scalars['String']>;
  readonly metaRobotsNoindex: Maybe<Scalars['String']>;
  readonly opengraphAuthor: Maybe<Scalars['String']>;
  readonly opengraphDescription: Maybe<Scalars['String']>;
  readonly opengraphImage: Maybe<tsMediaItem>;
  readonly opengraphModifiedTime: Maybe<Scalars['String']>;
  readonly opengraphPublishedTime: Maybe<Scalars['String']>;
  readonly opengraphPublisher: Maybe<Scalars['String']>;
  readonly opengraphSiteName: Maybe<Scalars['String']>;
  readonly opengraphTitle: Maybe<Scalars['String']>;
  readonly opengraphType: Maybe<Scalars['String']>;
  readonly opengraphUrl: Maybe<Scalars['String']>;
  readonly schema: Maybe<tsSEOTaxonomySchema>;
  readonly title: Maybe<Scalars['String']>;
  readonly twitterDescription: Maybe<Scalars['String']>;
  readonly twitterImage: Maybe<tsMediaItem>;
  readonly twitterTitle: Maybe<Scalars['String']>;
};

type tsTaxonomySEOFilterInput = {
  readonly breadcrumbs: InputMaybe<tsSEOPostTypeBreadcrumbsFilterListInput>;
  readonly canonical: InputMaybe<StringQueryOperatorInput>;
  readonly cornerstone: InputMaybe<BooleanQueryOperatorInput>;
  readonly focuskw: InputMaybe<StringQueryOperatorInput>;
  readonly fullHead: InputMaybe<StringQueryOperatorInput>;
  readonly metaDesc: InputMaybe<StringQueryOperatorInput>;
  readonly metaKeywords: InputMaybe<StringQueryOperatorInput>;
  readonly metaRobotsNofollow: InputMaybe<StringQueryOperatorInput>;
  readonly metaRobotsNoindex: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphAuthor: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphDescription: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphImage: InputMaybe<tsMediaItemFilterInput>;
  readonly opengraphModifiedTime: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphPublishedTime: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphPublisher: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphSiteName: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphTitle: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphType: InputMaybe<StringQueryOperatorInput>;
  readonly opengraphUrl: InputMaybe<StringQueryOperatorInput>;
  readonly schema: InputMaybe<tsSEOTaxonomySchemaFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitterDescription: InputMaybe<StringQueryOperatorInput>;
  readonly twitterImage: InputMaybe<tsMediaItemFilterInput>;
  readonly twitterTitle: InputMaybe<StringQueryOperatorInput>;
};

type tsTaxonomySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsTaxonomyFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the Taxonomy type and the ContentType type */
type tsTaxonomyToContentTypeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsContentType>>>;
};

type tsTaxonomyToContentTypeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsContentTypeFilterListInput>;
};

type tsTeam = Node & tsContentNode & tsDatabaseIdentifier & tsHierarchicalContentNode & tsMenuItemLinkable & tsNode & tsNodeWithContentEditor & tsNodeWithFeaturedImage & tsNodeWithPageAttributes & tsNodeWithTemplate & tsNodeWithTitle & tsUniformResourceIdentifiable & {
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsHierarchicalContentNodeToContentNodeAncestorsConnection>;
  readonly children: ReadonlyArray<Node>;
  /** The content of the post. */
  readonly content: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  readonly contentType: Maybe<tsContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  readonly contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** Post publishing date. */
  readonly date: Maybe<Scalars['Date']>;
  /** The publishing date set in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** The desired slug of the post */
  readonly desiredSlug: Maybe<Scalars['String']>;
  /** The RSS enclosure for the object */
  readonly enclosure: Maybe<Scalars['String']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  readonly featuredImage: Maybe<tsNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  readonly featuredImageId: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  readonly guid: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  readonly lastEditedBy: Maybe<tsContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  readonly link: Maybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  readonly menuOrder: Maybe<Scalars['Int']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  readonly modified: Maybe<Scalars['Date']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  readonly modifiedGmt: Maybe<Scalars['Date']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  readonly slug: Maybe<Scalars['String']>;
  /** The current status of the object */
  readonly status: Maybe<Scalars['String']>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Team&quot; was set to Show in GraphQL. */
  readonly team: Maybe<tsTeam_Team>;
  /** The template assigned to a node of content */
  readonly template: Maybe<tsContentTemplate>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  readonly title: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  readonly wpChildren: Maybe<tsHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The parent of the node. The parent object can be of various types */
  readonly wpParent: Maybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdge>;
};


type tsTeam_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsTeam_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsTeam_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsTeam_modifiedGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type tsTeamConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTeamEdge>;
  readonly group: ReadonlyArray<tsTeamGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTeam>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTeamConnection_distinctArgs = {
  field: tsTeamFieldsEnum;
};


type tsTeamConnection_groupArgs = {
  field: tsTeamFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTeamConnection_maxArgs = {
  field: tsTeamFieldsEnum;
};


type tsTeamConnection_minArgs = {
  field: tsTeamFieldsEnum;
};


type tsTeamConnection_sumArgs = {
  field: tsTeamFieldsEnum;
};

type tsTeamEdge = {
  readonly next: Maybe<tsTeam>;
  readonly node: tsTeam;
  readonly previous: Maybe<tsTeam>;
};

type tsTeamFieldsEnum =
  | 'ancestors.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentTypeName'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.date'
  | 'ancestors.nodes.dateGmt'
  | 'ancestors.nodes.desiredSlug'
  | 'ancestors.nodes.enclosure'
  | 'ancestors.nodes.guid'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.modified'
  | 'ancestors.nodes.modifiedGmt'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.readingTime'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.status'
  | 'ancestors.nodes.template.templateName'
  | 'ancestors.nodes.uri'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'content'
  | 'contentTypeName'
  | 'contentType.node.archivePath'
  | 'contentType.node.canExport'
  | 'contentType.node.children'
  | 'contentType.node.children.children'
  | 'contentType.node.children.id'
  | 'contentType.node.connectedTaxonomies.nodes'
  | 'contentType.node.contentNodes.nodes'
  | 'contentType.node.deleteWithUser'
  | 'contentType.node.description'
  | 'contentType.node.excludeFromSearch'
  | 'contentType.node.graphqlPluralName'
  | 'contentType.node.graphqlSingleName'
  | 'contentType.node.hasArchive'
  | 'contentType.node.hierarchical'
  | 'contentType.node.id'
  | 'contentType.node.internal.content'
  | 'contentType.node.internal.contentDigest'
  | 'contentType.node.internal.contentFilePath'
  | 'contentType.node.internal.description'
  | 'contentType.node.internal.fieldOwners'
  | 'contentType.node.internal.ignoreType'
  | 'contentType.node.internal.mediaType'
  | 'contentType.node.internal.owner'
  | 'contentType.node.internal.type'
  | 'contentType.node.isContentNode'
  | 'contentType.node.isFrontPage'
  | 'contentType.node.isPostsPage'
  | 'contentType.node.isTermNode'
  | 'contentType.node.label'
  | 'contentType.node.labels.addNew'
  | 'contentType.node.labels.addNewItem'
  | 'contentType.node.labels.allItems'
  | 'contentType.node.labels.archives'
  | 'contentType.node.labels.attributes'
  | 'contentType.node.labels.editItem'
  | 'contentType.node.labels.featuredImage'
  | 'contentType.node.labels.filterItemsList'
  | 'contentType.node.labels.insertIntoItem'
  | 'contentType.node.labels.itemsList'
  | 'contentType.node.labels.itemsListNavigation'
  | 'contentType.node.labels.menuName'
  | 'contentType.node.labels.name'
  | 'contentType.node.labels.newItem'
  | 'contentType.node.labels.notFound'
  | 'contentType.node.labels.notFoundInTrash'
  | 'contentType.node.labels.parentItemColon'
  | 'contentType.node.labels.removeFeaturedImage'
  | 'contentType.node.labels.searchItems'
  | 'contentType.node.labels.setFeaturedImage'
  | 'contentType.node.labels.singularName'
  | 'contentType.node.labels.uploadedToThisItem'
  | 'contentType.node.labels.useFeaturedImage'
  | 'contentType.node.labels.viewItem'
  | 'contentType.node.labels.viewItems'
  | 'contentType.node.menuIcon'
  | 'contentType.node.menuPosition'
  | 'contentType.node.name'
  | 'contentType.node.nodeType'
  | 'contentType.node.parent.children'
  | 'contentType.node.parent.id'
  | 'contentType.node.public'
  | 'contentType.node.publiclyQueryable'
  | 'contentType.node.restBase'
  | 'contentType.node.restControllerClass'
  | 'contentType.node.showInAdminBar'
  | 'contentType.node.showInGraphql'
  | 'contentType.node.showInMenu'
  | 'contentType.node.showInNavMenus'
  | 'contentType.node.showInRest'
  | 'contentType.node.showUi'
  | 'contentType.node.uri'
  | 'databaseId'
  | 'date'
  | 'dateGmt'
  | 'desiredSlug'
  | 'enclosure'
  | 'featuredImageDatabaseId'
  | 'featuredImageId'
  | 'featuredImage.node.altText'
  | 'featuredImage.node.ancestors.nodes'
  | 'featuredImage.node.authorDatabaseId'
  | 'featuredImage.node.authorId'
  | 'featuredImage.node.caption'
  | 'featuredImage.node.children'
  | 'featuredImage.node.children.children'
  | 'featuredImage.node.children.id'
  | 'featuredImage.node.commentCount'
  | 'featuredImage.node.commentStatus'
  | 'featuredImage.node.comments.nodes'
  | 'featuredImage.node.contentTypeName'
  | 'featuredImage.node.databaseId'
  | 'featuredImage.node.date'
  | 'featuredImage.node.dateGmt'
  | 'featuredImage.node.description'
  | 'featuredImage.node.desiredSlug'
  | 'featuredImage.node.enclosure'
  | 'featuredImage.node.fileSize'
  | 'featuredImage.node.filename'
  | 'featuredImage.node.filesize'
  | 'featuredImage.node.gatsbyImage'
  | 'featuredImage.node.guid'
  | 'featuredImage.node.height'
  | 'featuredImage.node.id'
  | 'featuredImage.node.internal.content'
  | 'featuredImage.node.internal.contentDigest'
  | 'featuredImage.node.internal.contentFilePath'
  | 'featuredImage.node.internal.description'
  | 'featuredImage.node.internal.fieldOwners'
  | 'featuredImage.node.internal.ignoreType'
  | 'featuredImage.node.internal.mediaType'
  | 'featuredImage.node.internal.owner'
  | 'featuredImage.node.internal.type'
  | 'featuredImage.node.isContentNode'
  | 'featuredImage.node.isTermNode'
  | 'featuredImage.node.link'
  | 'featuredImage.node.localFile.absolutePath'
  | 'featuredImage.node.localFile.accessTime'
  | 'featuredImage.node.localFile.atime'
  | 'featuredImage.node.localFile.atimeMs'
  | 'featuredImage.node.localFile.base'
  | 'featuredImage.node.localFile.birthTime'
  | 'featuredImage.node.localFile.birthtime'
  | 'featuredImage.node.localFile.birthtimeMs'
  | 'featuredImage.node.localFile.blksize'
  | 'featuredImage.node.localFile.blocks'
  | 'featuredImage.node.localFile.changeTime'
  | 'featuredImage.node.localFile.children'
  | 'featuredImage.node.localFile.childrenImageSharp'
  | 'featuredImage.node.localFile.ctime'
  | 'featuredImage.node.localFile.ctimeMs'
  | 'featuredImage.node.localFile.dev'
  | 'featuredImage.node.localFile.dir'
  | 'featuredImage.node.localFile.ext'
  | 'featuredImage.node.localFile.extension'
  | 'featuredImage.node.localFile.gid'
  | 'featuredImage.node.localFile.hash'
  | 'featuredImage.node.localFile.id'
  | 'featuredImage.node.localFile.ino'
  | 'featuredImage.node.localFile.mode'
  | 'featuredImage.node.localFile.modifiedTime'
  | 'featuredImage.node.localFile.mtime'
  | 'featuredImage.node.localFile.mtimeMs'
  | 'featuredImage.node.localFile.name'
  | 'featuredImage.node.localFile.nlink'
  | 'featuredImage.node.localFile.prettySize'
  | 'featuredImage.node.localFile.publicURL'
  | 'featuredImage.node.localFile.rdev'
  | 'featuredImage.node.localFile.relativeDirectory'
  | 'featuredImage.node.localFile.relativePath'
  | 'featuredImage.node.localFile.root'
  | 'featuredImage.node.localFile.size'
  | 'featuredImage.node.localFile.sourceInstanceName'
  | 'featuredImage.node.localFile.uid'
  | 'featuredImage.node.mediaDetails.file'
  | 'featuredImage.node.mediaDetails.height'
  | 'featuredImage.node.mediaDetails.sizes'
  | 'featuredImage.node.mediaDetails.width'
  | 'featuredImage.node.mediaItemUrl'
  | 'featuredImage.node.mediaType'
  | 'featuredImage.node.mimeType'
  | 'featuredImage.node.modified'
  | 'featuredImage.node.modifiedGmt'
  | 'featuredImage.node.nodeType'
  | 'featuredImage.node.parentDatabaseId'
  | 'featuredImage.node.parentId'
  | 'featuredImage.node.parent.children'
  | 'featuredImage.node.parent.id'
  | 'featuredImage.node.publicUrl'
  | 'featuredImage.node.remoteFile.absolutePath'
  | 'featuredImage.node.remoteFile.accessTime'
  | 'featuredImage.node.remoteFile.atime'
  | 'featuredImage.node.remoteFile.atimeMs'
  | 'featuredImage.node.remoteFile.base'
  | 'featuredImage.node.remoteFile.birthTime'
  | 'featuredImage.node.remoteFile.birthtime'
  | 'featuredImage.node.remoteFile.birthtimeMs'
  | 'featuredImage.node.remoteFile.blksize'
  | 'featuredImage.node.remoteFile.blocks'
  | 'featuredImage.node.remoteFile.changeTime'
  | 'featuredImage.node.remoteFile.children'
  | 'featuredImage.node.remoteFile.childrenImageSharp'
  | 'featuredImage.node.remoteFile.ctime'
  | 'featuredImage.node.remoteFile.ctimeMs'
  | 'featuredImage.node.remoteFile.dev'
  | 'featuredImage.node.remoteFile.dir'
  | 'featuredImage.node.remoteFile.ext'
  | 'featuredImage.node.remoteFile.extension'
  | 'featuredImage.node.remoteFile.gid'
  | 'featuredImage.node.remoteFile.hash'
  | 'featuredImage.node.remoteFile.id'
  | 'featuredImage.node.remoteFile.ino'
  | 'featuredImage.node.remoteFile.mode'
  | 'featuredImage.node.remoteFile.modifiedTime'
  | 'featuredImage.node.remoteFile.mtime'
  | 'featuredImage.node.remoteFile.mtimeMs'
  | 'featuredImage.node.remoteFile.name'
  | 'featuredImage.node.remoteFile.nlink'
  | 'featuredImage.node.remoteFile.prettySize'
  | 'featuredImage.node.remoteFile.publicURL'
  | 'featuredImage.node.remoteFile.rdev'
  | 'featuredImage.node.remoteFile.relativeDirectory'
  | 'featuredImage.node.remoteFile.relativePath'
  | 'featuredImage.node.remoteFile.root'
  | 'featuredImage.node.remoteFile.size'
  | 'featuredImage.node.remoteFile.sourceInstanceName'
  | 'featuredImage.node.remoteFile.uid'
  | 'featuredImage.node.resize.height'
  | 'featuredImage.node.resize.src'
  | 'featuredImage.node.resize.width'
  | 'featuredImage.node.seo.breadcrumbs'
  | 'featuredImage.node.seo.canonical'
  | 'featuredImage.node.seo.cornerstone'
  | 'featuredImage.node.seo.focuskw'
  | 'featuredImage.node.seo.fullHead'
  | 'featuredImage.node.seo.metaDesc'
  | 'featuredImage.node.seo.metaKeywords'
  | 'featuredImage.node.seo.metaRobotsNofollow'
  | 'featuredImage.node.seo.metaRobotsNoindex'
  | 'featuredImage.node.seo.opengraphAuthor'
  | 'featuredImage.node.seo.opengraphDescription'
  | 'featuredImage.node.seo.opengraphModifiedTime'
  | 'featuredImage.node.seo.opengraphPublishedTime'
  | 'featuredImage.node.seo.opengraphPublisher'
  | 'featuredImage.node.seo.opengraphSiteName'
  | 'featuredImage.node.seo.opengraphTitle'
  | 'featuredImage.node.seo.opengraphType'
  | 'featuredImage.node.seo.opengraphUrl'
  | 'featuredImage.node.seo.readingTime'
  | 'featuredImage.node.seo.title'
  | 'featuredImage.node.seo.twitterDescription'
  | 'featuredImage.node.seo.twitterTitle'
  | 'featuredImage.node.sizes'
  | 'featuredImage.node.slug'
  | 'featuredImage.node.sourceUrl'
  | 'featuredImage.node.srcSet'
  | 'featuredImage.node.status'
  | 'featuredImage.node.template.templateName'
  | 'featuredImage.node.title'
  | 'featuredImage.node.uri'
  | 'featuredImage.node.width'
  | 'featuredImage.node.wpChildren.nodes'
  | 'guid'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'lastEditedBy.node.authorProfile.fieldGroupName'
  | 'lastEditedBy.node.avatar.default'
  | 'lastEditedBy.node.avatar.extraAttr'
  | 'lastEditedBy.node.avatar.forceDefault'
  | 'lastEditedBy.node.avatar.foundAvatar'
  | 'lastEditedBy.node.avatar.height'
  | 'lastEditedBy.node.avatar.rating'
  | 'lastEditedBy.node.avatar.scheme'
  | 'lastEditedBy.node.avatar.size'
  | 'lastEditedBy.node.avatar.url'
  | 'lastEditedBy.node.avatar.width'
  | 'lastEditedBy.node.capKey'
  | 'lastEditedBy.node.capabilities'
  | 'lastEditedBy.node.children'
  | 'lastEditedBy.node.children.children'
  | 'lastEditedBy.node.children.id'
  | 'lastEditedBy.node.comments.nodes'
  | 'lastEditedBy.node.databaseId'
  | 'lastEditedBy.node.description'
  | 'lastEditedBy.node.email'
  | 'lastEditedBy.node.extraCapabilities'
  | 'lastEditedBy.node.firstName'
  | 'lastEditedBy.node.id'
  | 'lastEditedBy.node.internal.content'
  | 'lastEditedBy.node.internal.contentDigest'
  | 'lastEditedBy.node.internal.contentFilePath'
  | 'lastEditedBy.node.internal.description'
  | 'lastEditedBy.node.internal.fieldOwners'
  | 'lastEditedBy.node.internal.ignoreType'
  | 'lastEditedBy.node.internal.mediaType'
  | 'lastEditedBy.node.internal.owner'
  | 'lastEditedBy.node.internal.type'
  | 'lastEditedBy.node.isContentNode'
  | 'lastEditedBy.node.isTermNode'
  | 'lastEditedBy.node.lastName'
  | 'lastEditedBy.node.locale'
  | 'lastEditedBy.node.name'
  | 'lastEditedBy.node.nicename'
  | 'lastEditedBy.node.nickname'
  | 'lastEditedBy.node.nodeType'
  | 'lastEditedBy.node.pages.nodes'
  | 'lastEditedBy.node.parent.children'
  | 'lastEditedBy.node.parent.id'
  | 'lastEditedBy.node.posts.nodes'
  | 'lastEditedBy.node.registeredDate'
  | 'lastEditedBy.node.roles.nodes'
  | 'lastEditedBy.node.seo.breadcrumbTitle'
  | 'lastEditedBy.node.seo.canonical'
  | 'lastEditedBy.node.seo.fullHead'
  | 'lastEditedBy.node.seo.language'
  | 'lastEditedBy.node.seo.metaDesc'
  | 'lastEditedBy.node.seo.metaRobotsNofollow'
  | 'lastEditedBy.node.seo.metaRobotsNoindex'
  | 'lastEditedBy.node.seo.opengraphDescription'
  | 'lastEditedBy.node.seo.opengraphTitle'
  | 'lastEditedBy.node.seo.region'
  | 'lastEditedBy.node.seo.title'
  | 'lastEditedBy.node.seo.twitterDescription'
  | 'lastEditedBy.node.seo.twitterTitle'
  | 'lastEditedBy.node.slug'
  | 'lastEditedBy.node.uri'
  | 'lastEditedBy.node.url'
  | 'lastEditedBy.node.username'
  | 'link'
  | 'menuOrder'
  | 'modified'
  | 'modifiedGmt'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.readingTime'
  | 'seo.schema.articleType'
  | 'seo.schema.pageType'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'status'
  | 'team.designation'
  | 'team.fieldGroupName'
  | 'template.templateName'
  | 'title'
  | 'uri'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentTypeName'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.date'
  | 'wpChildren.nodes.dateGmt'
  | 'wpChildren.nodes.desiredSlug'
  | 'wpChildren.nodes.enclosure'
  | 'wpChildren.nodes.guid'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.modified'
  | 'wpChildren.nodes.modifiedGmt'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.readingTime'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.status'
  | 'wpChildren.nodes.template.templateName'
  | 'wpChildren.nodes.uri'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentTypeName'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.date'
  | 'wpParent.node.dateGmt'
  | 'wpParent.node.desiredSlug'
  | 'wpParent.node.enclosure'
  | 'wpParent.node.guid'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.modified'
  | 'wpParent.node.modifiedGmt'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.readingTime'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.status'
  | 'wpParent.node.template.templateName'
  | 'wpParent.node.uri';

type tsTeamFilterInput = {
  readonly ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
  readonly enclosure: InputMaybe<StringQueryOperatorInput>;
  readonly featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  readonly featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly featuredImageId: InputMaybe<IDQueryOperatorInput>;
  readonly guid: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly menuOrder: InputMaybe<IntQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly seo: InputMaybe<tsPostTypeSEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly team: InputMaybe<tsTeam_TeamFilterInput>;
  readonly template: InputMaybe<tsContentTemplateFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};

type tsTeamGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTeamEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsTeamGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTeam>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTeamGroupConnection_distinctArgs = {
  field: tsTeamFieldsEnum;
};


type tsTeamGroupConnection_groupArgs = {
  field: tsTeamFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTeamGroupConnection_maxArgs = {
  field: tsTeamFieldsEnum;
};


type tsTeamGroupConnection_minArgs = {
  field: tsTeamFieldsEnum;
};


type tsTeamGroupConnection_sumArgs = {
  field: tsTeamFieldsEnum;
};

type tsTeamSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsTeamFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Field Group */
type tsTeam_Team = tsAcfFieldGroup & {
  readonly designation: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
};

type tsTeam_TeamFilterInput = {
  readonly designation: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
};

type tsTermNode = {
  readonly children: ReadonlyArray<Node>;
  /** The number of objects connected to the object */
  readonly count: Maybe<Scalars['Int']>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Scalars['Int'];
  /** The description of the object */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The link to the term */
  readonly link: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** An alphanumeric identifier for the object unique to its type. */
  readonly slug: Maybe<Scalars['String']>;
  /** The name of the taxonomy that the object is associated with */
  readonly taxonomyName: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  readonly termGroupId: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  readonly termTaxonomyId: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};

type tsTermNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTermNodeEdge>;
  readonly group: ReadonlyArray<tsTermNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTermNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTermNodeConnection_distinctArgs = {
  field: tsTermNodeFieldsEnum;
};


type tsTermNodeConnection_groupArgs = {
  field: tsTermNodeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTermNodeConnection_maxArgs = {
  field: tsTermNodeFieldsEnum;
};


type tsTermNodeConnection_minArgs = {
  field: tsTermNodeFieldsEnum;
};


type tsTermNodeConnection_sumArgs = {
  field: tsTermNodeFieldsEnum;
};

type tsTermNodeEdge = {
  readonly next: Maybe<tsTermNode>;
  readonly node: tsTermNode;
  readonly previous: Maybe<tsTermNode>;
};

type tsTermNodeFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'count'
  | 'databaseId'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'link'
  | 'name'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'slug'
  | 'taxonomyName'
  | 'termGroupId'
  | 'termTaxonomyId'
  | 'uri';

type tsTermNodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly count: InputMaybe<IntQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly taxonomyName: InputMaybe<StringQueryOperatorInput>;
  readonly termGroupId: InputMaybe<IntQueryOperatorInput>;
  readonly termTaxonomyId: InputMaybe<IntQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type tsTermNodeFilterListInput = {
  readonly elemMatch: InputMaybe<tsTermNodeFilterInput>;
};

type tsTermNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTermNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsTermNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTermNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTermNodeGroupConnection_distinctArgs = {
  field: tsTermNodeFieldsEnum;
};


type tsTermNodeGroupConnection_groupArgs = {
  field: tsTermNodeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTermNodeGroupConnection_maxArgs = {
  field: tsTermNodeFieldsEnum;
};


type tsTermNodeGroupConnection_minArgs = {
  field: tsTermNodeFieldsEnum;
};


type tsTermNodeGroupConnection_sumArgs = {
  field: tsTermNodeFieldsEnum;
};

type tsTermNodeSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsTermNodeFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type tsTestimonial = Node & tsContentNode & tsDatabaseIdentifier & tsHierarchicalContentNode & tsMenuItemLinkable & tsNode & tsNodeWithContentEditor & tsNodeWithFeaturedImage & tsNodeWithPageAttributes & tsNodeWithTemplate & tsNodeWithTitle & tsUniformResourceIdentifiable & {
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Testimonials&quot; was set to Show in GraphQL. */
  readonly TestimonialsForCaseStudies: Maybe<tsTestimonial_Testimonialsforcasestudies>;
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  readonly ancestors: Maybe<tsHierarchicalContentNodeToContentNodeAncestorsConnection>;
  readonly children: ReadonlyArray<Node>;
  /** The content of the post. */
  readonly content: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  readonly contentType: Maybe<tsContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  readonly contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  readonly databaseId: Scalars['Int'];
  /** Post publishing date. */
  readonly date: Maybe<Scalars['Date']>;
  /** The publishing date set in GMT. */
  readonly dateGmt: Maybe<Scalars['Date']>;
  /** The desired slug of the post */
  readonly desiredSlug: Maybe<Scalars['String']>;
  /** The RSS enclosure for the object */
  readonly enclosure: Maybe<Scalars['String']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  readonly featuredImage: Maybe<tsNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  readonly featuredImageDatabaseId: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  readonly featuredImageId: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  readonly guid: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  readonly lastEditedBy: Maybe<tsContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  readonly link: Maybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  readonly menuOrder: Maybe<Scalars['Int']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  readonly modified: Maybe<Scalars['Date']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  readonly modifiedGmt: Maybe<Scalars['Date']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  /** Database id of the parent node */
  readonly parentDatabaseId: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  readonly parentId: Maybe<Scalars['ID']>;
  /** The Yoast SEO data of the ContentNode */
  readonly seo: Maybe<tsPostTypeSEO>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  readonly slug: Maybe<Scalars['String']>;
  /** The current status of the object */
  readonly status: Maybe<Scalars['String']>;
  /** Connection between the Testimonial type and the tag type */
  readonly tags: Maybe<tsTestimonialToTagConnection>;
  /** The template assigned to a node of content */
  readonly template: Maybe<tsContentTemplate>;
  /** Connection between the Testimonial type and the TermNode type */
  readonly terms: Maybe<tsTestimonialToTermNodeConnection>;
  /** Connection between the Testimonial type and the SingleTestimonialCategory type */
  readonly testimonialCategory: Maybe<tsTestimonialToSingleTestimonialCategoryConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  readonly title: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  readonly wpChildren: Maybe<tsHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The parent of the node. The parent object can be of various types */
  readonly wpParent: Maybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdge>;
};


type tsTestimonial_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsTestimonial_dateGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsTestimonial_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type tsTestimonial_modifiedGmtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type tsTestimonialConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTestimonialEdge>;
  readonly group: ReadonlyArray<tsTestimonialGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTestimonial>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTestimonialConnection_distinctArgs = {
  field: tsTestimonialFieldsEnum;
};


type tsTestimonialConnection_groupArgs = {
  field: tsTestimonialFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTestimonialConnection_maxArgs = {
  field: tsTestimonialFieldsEnum;
};


type tsTestimonialConnection_minArgs = {
  field: tsTestimonialFieldsEnum;
};


type tsTestimonialConnection_sumArgs = {
  field: tsTestimonialFieldsEnum;
};

type tsTestimonialEdge = {
  readonly next: Maybe<tsTestimonial>;
  readonly node: tsTestimonial;
  readonly previous: Maybe<tsTestimonial>;
};

type tsTestimonialFieldsEnum =
  | 'TestimonialsForCaseStudies.author'
  | 'TestimonialsForCaseStudies.company'
  | 'TestimonialsForCaseStudies.content'
  | 'TestimonialsForCaseStudies.fieldGroupName'
  | 'TestimonialsForCaseStudies.image.altText'
  | 'TestimonialsForCaseStudies.image.ancestors.nodes'
  | 'TestimonialsForCaseStudies.image.authorDatabaseId'
  | 'TestimonialsForCaseStudies.image.authorId'
  | 'TestimonialsForCaseStudies.image.caption'
  | 'TestimonialsForCaseStudies.image.children'
  | 'TestimonialsForCaseStudies.image.children.children'
  | 'TestimonialsForCaseStudies.image.children.id'
  | 'TestimonialsForCaseStudies.image.commentCount'
  | 'TestimonialsForCaseStudies.image.commentStatus'
  | 'TestimonialsForCaseStudies.image.comments.nodes'
  | 'TestimonialsForCaseStudies.image.contentTypeName'
  | 'TestimonialsForCaseStudies.image.databaseId'
  | 'TestimonialsForCaseStudies.image.date'
  | 'TestimonialsForCaseStudies.image.dateGmt'
  | 'TestimonialsForCaseStudies.image.description'
  | 'TestimonialsForCaseStudies.image.desiredSlug'
  | 'TestimonialsForCaseStudies.image.enclosure'
  | 'TestimonialsForCaseStudies.image.fileSize'
  | 'TestimonialsForCaseStudies.image.filename'
  | 'TestimonialsForCaseStudies.image.filesize'
  | 'TestimonialsForCaseStudies.image.gatsbyImage'
  | 'TestimonialsForCaseStudies.image.guid'
  | 'TestimonialsForCaseStudies.image.height'
  | 'TestimonialsForCaseStudies.image.id'
  | 'TestimonialsForCaseStudies.image.internal.content'
  | 'TestimonialsForCaseStudies.image.internal.contentDigest'
  | 'TestimonialsForCaseStudies.image.internal.contentFilePath'
  | 'TestimonialsForCaseStudies.image.internal.description'
  | 'TestimonialsForCaseStudies.image.internal.fieldOwners'
  | 'TestimonialsForCaseStudies.image.internal.ignoreType'
  | 'TestimonialsForCaseStudies.image.internal.mediaType'
  | 'TestimonialsForCaseStudies.image.internal.owner'
  | 'TestimonialsForCaseStudies.image.internal.type'
  | 'TestimonialsForCaseStudies.image.isContentNode'
  | 'TestimonialsForCaseStudies.image.isTermNode'
  | 'TestimonialsForCaseStudies.image.link'
  | 'TestimonialsForCaseStudies.image.localFile.absolutePath'
  | 'TestimonialsForCaseStudies.image.localFile.accessTime'
  | 'TestimonialsForCaseStudies.image.localFile.atime'
  | 'TestimonialsForCaseStudies.image.localFile.atimeMs'
  | 'TestimonialsForCaseStudies.image.localFile.base'
  | 'TestimonialsForCaseStudies.image.localFile.birthTime'
  | 'TestimonialsForCaseStudies.image.localFile.birthtime'
  | 'TestimonialsForCaseStudies.image.localFile.birthtimeMs'
  | 'TestimonialsForCaseStudies.image.localFile.blksize'
  | 'TestimonialsForCaseStudies.image.localFile.blocks'
  | 'TestimonialsForCaseStudies.image.localFile.changeTime'
  | 'TestimonialsForCaseStudies.image.localFile.children'
  | 'TestimonialsForCaseStudies.image.localFile.childrenImageSharp'
  | 'TestimonialsForCaseStudies.image.localFile.ctime'
  | 'TestimonialsForCaseStudies.image.localFile.ctimeMs'
  | 'TestimonialsForCaseStudies.image.localFile.dev'
  | 'TestimonialsForCaseStudies.image.localFile.dir'
  | 'TestimonialsForCaseStudies.image.localFile.ext'
  | 'TestimonialsForCaseStudies.image.localFile.extension'
  | 'TestimonialsForCaseStudies.image.localFile.gid'
  | 'TestimonialsForCaseStudies.image.localFile.hash'
  | 'TestimonialsForCaseStudies.image.localFile.id'
  | 'TestimonialsForCaseStudies.image.localFile.ino'
  | 'TestimonialsForCaseStudies.image.localFile.mode'
  | 'TestimonialsForCaseStudies.image.localFile.modifiedTime'
  | 'TestimonialsForCaseStudies.image.localFile.mtime'
  | 'TestimonialsForCaseStudies.image.localFile.mtimeMs'
  | 'TestimonialsForCaseStudies.image.localFile.name'
  | 'TestimonialsForCaseStudies.image.localFile.nlink'
  | 'TestimonialsForCaseStudies.image.localFile.prettySize'
  | 'TestimonialsForCaseStudies.image.localFile.publicURL'
  | 'TestimonialsForCaseStudies.image.localFile.rdev'
  | 'TestimonialsForCaseStudies.image.localFile.relativeDirectory'
  | 'TestimonialsForCaseStudies.image.localFile.relativePath'
  | 'TestimonialsForCaseStudies.image.localFile.root'
  | 'TestimonialsForCaseStudies.image.localFile.size'
  | 'TestimonialsForCaseStudies.image.localFile.sourceInstanceName'
  | 'TestimonialsForCaseStudies.image.localFile.uid'
  | 'TestimonialsForCaseStudies.image.mediaDetails.file'
  | 'TestimonialsForCaseStudies.image.mediaDetails.height'
  | 'TestimonialsForCaseStudies.image.mediaDetails.sizes'
  | 'TestimonialsForCaseStudies.image.mediaDetails.width'
  | 'TestimonialsForCaseStudies.image.mediaItemUrl'
  | 'TestimonialsForCaseStudies.image.mediaType'
  | 'TestimonialsForCaseStudies.image.mimeType'
  | 'TestimonialsForCaseStudies.image.modified'
  | 'TestimonialsForCaseStudies.image.modifiedGmt'
  | 'TestimonialsForCaseStudies.image.nodeType'
  | 'TestimonialsForCaseStudies.image.parentDatabaseId'
  | 'TestimonialsForCaseStudies.image.parentId'
  | 'TestimonialsForCaseStudies.image.parent.children'
  | 'TestimonialsForCaseStudies.image.parent.id'
  | 'TestimonialsForCaseStudies.image.publicUrl'
  | 'TestimonialsForCaseStudies.image.remoteFile.absolutePath'
  | 'TestimonialsForCaseStudies.image.remoteFile.accessTime'
  | 'TestimonialsForCaseStudies.image.remoteFile.atime'
  | 'TestimonialsForCaseStudies.image.remoteFile.atimeMs'
  | 'TestimonialsForCaseStudies.image.remoteFile.base'
  | 'TestimonialsForCaseStudies.image.remoteFile.birthTime'
  | 'TestimonialsForCaseStudies.image.remoteFile.birthtime'
  | 'TestimonialsForCaseStudies.image.remoteFile.birthtimeMs'
  | 'TestimonialsForCaseStudies.image.remoteFile.blksize'
  | 'TestimonialsForCaseStudies.image.remoteFile.blocks'
  | 'TestimonialsForCaseStudies.image.remoteFile.changeTime'
  | 'TestimonialsForCaseStudies.image.remoteFile.children'
  | 'TestimonialsForCaseStudies.image.remoteFile.childrenImageSharp'
  | 'TestimonialsForCaseStudies.image.remoteFile.ctime'
  | 'TestimonialsForCaseStudies.image.remoteFile.ctimeMs'
  | 'TestimonialsForCaseStudies.image.remoteFile.dev'
  | 'TestimonialsForCaseStudies.image.remoteFile.dir'
  | 'TestimonialsForCaseStudies.image.remoteFile.ext'
  | 'TestimonialsForCaseStudies.image.remoteFile.extension'
  | 'TestimonialsForCaseStudies.image.remoteFile.gid'
  | 'TestimonialsForCaseStudies.image.remoteFile.hash'
  | 'TestimonialsForCaseStudies.image.remoteFile.id'
  | 'TestimonialsForCaseStudies.image.remoteFile.ino'
  | 'TestimonialsForCaseStudies.image.remoteFile.mode'
  | 'TestimonialsForCaseStudies.image.remoteFile.modifiedTime'
  | 'TestimonialsForCaseStudies.image.remoteFile.mtime'
  | 'TestimonialsForCaseStudies.image.remoteFile.mtimeMs'
  | 'TestimonialsForCaseStudies.image.remoteFile.name'
  | 'TestimonialsForCaseStudies.image.remoteFile.nlink'
  | 'TestimonialsForCaseStudies.image.remoteFile.prettySize'
  | 'TestimonialsForCaseStudies.image.remoteFile.publicURL'
  | 'TestimonialsForCaseStudies.image.remoteFile.rdev'
  | 'TestimonialsForCaseStudies.image.remoteFile.relativeDirectory'
  | 'TestimonialsForCaseStudies.image.remoteFile.relativePath'
  | 'TestimonialsForCaseStudies.image.remoteFile.root'
  | 'TestimonialsForCaseStudies.image.remoteFile.size'
  | 'TestimonialsForCaseStudies.image.remoteFile.sourceInstanceName'
  | 'TestimonialsForCaseStudies.image.remoteFile.uid'
  | 'TestimonialsForCaseStudies.image.resize.height'
  | 'TestimonialsForCaseStudies.image.resize.src'
  | 'TestimonialsForCaseStudies.image.resize.width'
  | 'TestimonialsForCaseStudies.image.seo.breadcrumbs'
  | 'TestimonialsForCaseStudies.image.seo.canonical'
  | 'TestimonialsForCaseStudies.image.seo.cornerstone'
  | 'TestimonialsForCaseStudies.image.seo.focuskw'
  | 'TestimonialsForCaseStudies.image.seo.fullHead'
  | 'TestimonialsForCaseStudies.image.seo.metaDesc'
  | 'TestimonialsForCaseStudies.image.seo.metaKeywords'
  | 'TestimonialsForCaseStudies.image.seo.metaRobotsNofollow'
  | 'TestimonialsForCaseStudies.image.seo.metaRobotsNoindex'
  | 'TestimonialsForCaseStudies.image.seo.opengraphAuthor'
  | 'TestimonialsForCaseStudies.image.seo.opengraphDescription'
  | 'TestimonialsForCaseStudies.image.seo.opengraphModifiedTime'
  | 'TestimonialsForCaseStudies.image.seo.opengraphPublishedTime'
  | 'TestimonialsForCaseStudies.image.seo.opengraphPublisher'
  | 'TestimonialsForCaseStudies.image.seo.opengraphSiteName'
  | 'TestimonialsForCaseStudies.image.seo.opengraphTitle'
  | 'TestimonialsForCaseStudies.image.seo.opengraphType'
  | 'TestimonialsForCaseStudies.image.seo.opengraphUrl'
  | 'TestimonialsForCaseStudies.image.seo.readingTime'
  | 'TestimonialsForCaseStudies.image.seo.title'
  | 'TestimonialsForCaseStudies.image.seo.twitterDescription'
  | 'TestimonialsForCaseStudies.image.seo.twitterTitle'
  | 'TestimonialsForCaseStudies.image.sizes'
  | 'TestimonialsForCaseStudies.image.slug'
  | 'TestimonialsForCaseStudies.image.sourceUrl'
  | 'TestimonialsForCaseStudies.image.srcSet'
  | 'TestimonialsForCaseStudies.image.status'
  | 'TestimonialsForCaseStudies.image.template.templateName'
  | 'TestimonialsForCaseStudies.image.title'
  | 'TestimonialsForCaseStudies.image.uri'
  | 'TestimonialsForCaseStudies.image.width'
  | 'TestimonialsForCaseStudies.image.wpChildren.nodes'
  | 'TestimonialsForCaseStudies.jobTitle'
  | 'TestimonialsForCaseStudies.style'
  | 'ancestors.nodes'
  | 'ancestors.nodes.children'
  | 'ancestors.nodes.children.children'
  | 'ancestors.nodes.children.id'
  | 'ancestors.nodes.contentTypeName'
  | 'ancestors.nodes.databaseId'
  | 'ancestors.nodes.date'
  | 'ancestors.nodes.dateGmt'
  | 'ancestors.nodes.desiredSlug'
  | 'ancestors.nodes.enclosure'
  | 'ancestors.nodes.guid'
  | 'ancestors.nodes.id'
  | 'ancestors.nodes.internal.content'
  | 'ancestors.nodes.internal.contentDigest'
  | 'ancestors.nodes.internal.contentFilePath'
  | 'ancestors.nodes.internal.description'
  | 'ancestors.nodes.internal.fieldOwners'
  | 'ancestors.nodes.internal.ignoreType'
  | 'ancestors.nodes.internal.mediaType'
  | 'ancestors.nodes.internal.owner'
  | 'ancestors.nodes.internal.type'
  | 'ancestors.nodes.isContentNode'
  | 'ancestors.nodes.isTermNode'
  | 'ancestors.nodes.link'
  | 'ancestors.nodes.modified'
  | 'ancestors.nodes.modifiedGmt'
  | 'ancestors.nodes.nodeType'
  | 'ancestors.nodes.parent.children'
  | 'ancestors.nodes.parent.id'
  | 'ancestors.nodes.seo.breadcrumbs'
  | 'ancestors.nodes.seo.canonical'
  | 'ancestors.nodes.seo.cornerstone'
  | 'ancestors.nodes.seo.focuskw'
  | 'ancestors.nodes.seo.fullHead'
  | 'ancestors.nodes.seo.metaDesc'
  | 'ancestors.nodes.seo.metaKeywords'
  | 'ancestors.nodes.seo.metaRobotsNofollow'
  | 'ancestors.nodes.seo.metaRobotsNoindex'
  | 'ancestors.nodes.seo.opengraphAuthor'
  | 'ancestors.nodes.seo.opengraphDescription'
  | 'ancestors.nodes.seo.opengraphModifiedTime'
  | 'ancestors.nodes.seo.opengraphPublishedTime'
  | 'ancestors.nodes.seo.opengraphPublisher'
  | 'ancestors.nodes.seo.opengraphSiteName'
  | 'ancestors.nodes.seo.opengraphTitle'
  | 'ancestors.nodes.seo.opengraphType'
  | 'ancestors.nodes.seo.opengraphUrl'
  | 'ancestors.nodes.seo.readingTime'
  | 'ancestors.nodes.seo.title'
  | 'ancestors.nodes.seo.twitterDescription'
  | 'ancestors.nodes.seo.twitterTitle'
  | 'ancestors.nodes.slug'
  | 'ancestors.nodes.status'
  | 'ancestors.nodes.template.templateName'
  | 'ancestors.nodes.uri'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'content'
  | 'contentTypeName'
  | 'contentType.node.archivePath'
  | 'contentType.node.canExport'
  | 'contentType.node.children'
  | 'contentType.node.children.children'
  | 'contentType.node.children.id'
  | 'contentType.node.connectedTaxonomies.nodes'
  | 'contentType.node.contentNodes.nodes'
  | 'contentType.node.deleteWithUser'
  | 'contentType.node.description'
  | 'contentType.node.excludeFromSearch'
  | 'contentType.node.graphqlPluralName'
  | 'contentType.node.graphqlSingleName'
  | 'contentType.node.hasArchive'
  | 'contentType.node.hierarchical'
  | 'contentType.node.id'
  | 'contentType.node.internal.content'
  | 'contentType.node.internal.contentDigest'
  | 'contentType.node.internal.contentFilePath'
  | 'contentType.node.internal.description'
  | 'contentType.node.internal.fieldOwners'
  | 'contentType.node.internal.ignoreType'
  | 'contentType.node.internal.mediaType'
  | 'contentType.node.internal.owner'
  | 'contentType.node.internal.type'
  | 'contentType.node.isContentNode'
  | 'contentType.node.isFrontPage'
  | 'contentType.node.isPostsPage'
  | 'contentType.node.isTermNode'
  | 'contentType.node.label'
  | 'contentType.node.labels.addNew'
  | 'contentType.node.labels.addNewItem'
  | 'contentType.node.labels.allItems'
  | 'contentType.node.labels.archives'
  | 'contentType.node.labels.attributes'
  | 'contentType.node.labels.editItem'
  | 'contentType.node.labels.featuredImage'
  | 'contentType.node.labels.filterItemsList'
  | 'contentType.node.labels.insertIntoItem'
  | 'contentType.node.labels.itemsList'
  | 'contentType.node.labels.itemsListNavigation'
  | 'contentType.node.labels.menuName'
  | 'contentType.node.labels.name'
  | 'contentType.node.labels.newItem'
  | 'contentType.node.labels.notFound'
  | 'contentType.node.labels.notFoundInTrash'
  | 'contentType.node.labels.parentItemColon'
  | 'contentType.node.labels.removeFeaturedImage'
  | 'contentType.node.labels.searchItems'
  | 'contentType.node.labels.setFeaturedImage'
  | 'contentType.node.labels.singularName'
  | 'contentType.node.labels.uploadedToThisItem'
  | 'contentType.node.labels.useFeaturedImage'
  | 'contentType.node.labels.viewItem'
  | 'contentType.node.labels.viewItems'
  | 'contentType.node.menuIcon'
  | 'contentType.node.menuPosition'
  | 'contentType.node.name'
  | 'contentType.node.nodeType'
  | 'contentType.node.parent.children'
  | 'contentType.node.parent.id'
  | 'contentType.node.public'
  | 'contentType.node.publiclyQueryable'
  | 'contentType.node.restBase'
  | 'contentType.node.restControllerClass'
  | 'contentType.node.showInAdminBar'
  | 'contentType.node.showInGraphql'
  | 'contentType.node.showInMenu'
  | 'contentType.node.showInNavMenus'
  | 'contentType.node.showInRest'
  | 'contentType.node.showUi'
  | 'contentType.node.uri'
  | 'databaseId'
  | 'date'
  | 'dateGmt'
  | 'desiredSlug'
  | 'enclosure'
  | 'featuredImageDatabaseId'
  | 'featuredImageId'
  | 'featuredImage.node.altText'
  | 'featuredImage.node.ancestors.nodes'
  | 'featuredImage.node.authorDatabaseId'
  | 'featuredImage.node.authorId'
  | 'featuredImage.node.caption'
  | 'featuredImage.node.children'
  | 'featuredImage.node.children.children'
  | 'featuredImage.node.children.id'
  | 'featuredImage.node.commentCount'
  | 'featuredImage.node.commentStatus'
  | 'featuredImage.node.comments.nodes'
  | 'featuredImage.node.contentTypeName'
  | 'featuredImage.node.databaseId'
  | 'featuredImage.node.date'
  | 'featuredImage.node.dateGmt'
  | 'featuredImage.node.description'
  | 'featuredImage.node.desiredSlug'
  | 'featuredImage.node.enclosure'
  | 'featuredImage.node.fileSize'
  | 'featuredImage.node.filename'
  | 'featuredImage.node.filesize'
  | 'featuredImage.node.gatsbyImage'
  | 'featuredImage.node.guid'
  | 'featuredImage.node.height'
  | 'featuredImage.node.id'
  | 'featuredImage.node.internal.content'
  | 'featuredImage.node.internal.contentDigest'
  | 'featuredImage.node.internal.contentFilePath'
  | 'featuredImage.node.internal.description'
  | 'featuredImage.node.internal.fieldOwners'
  | 'featuredImage.node.internal.ignoreType'
  | 'featuredImage.node.internal.mediaType'
  | 'featuredImage.node.internal.owner'
  | 'featuredImage.node.internal.type'
  | 'featuredImage.node.isContentNode'
  | 'featuredImage.node.isTermNode'
  | 'featuredImage.node.link'
  | 'featuredImage.node.localFile.absolutePath'
  | 'featuredImage.node.localFile.accessTime'
  | 'featuredImage.node.localFile.atime'
  | 'featuredImage.node.localFile.atimeMs'
  | 'featuredImage.node.localFile.base'
  | 'featuredImage.node.localFile.birthTime'
  | 'featuredImage.node.localFile.birthtime'
  | 'featuredImage.node.localFile.birthtimeMs'
  | 'featuredImage.node.localFile.blksize'
  | 'featuredImage.node.localFile.blocks'
  | 'featuredImage.node.localFile.changeTime'
  | 'featuredImage.node.localFile.children'
  | 'featuredImage.node.localFile.childrenImageSharp'
  | 'featuredImage.node.localFile.ctime'
  | 'featuredImage.node.localFile.ctimeMs'
  | 'featuredImage.node.localFile.dev'
  | 'featuredImage.node.localFile.dir'
  | 'featuredImage.node.localFile.ext'
  | 'featuredImage.node.localFile.extension'
  | 'featuredImage.node.localFile.gid'
  | 'featuredImage.node.localFile.hash'
  | 'featuredImage.node.localFile.id'
  | 'featuredImage.node.localFile.ino'
  | 'featuredImage.node.localFile.mode'
  | 'featuredImage.node.localFile.modifiedTime'
  | 'featuredImage.node.localFile.mtime'
  | 'featuredImage.node.localFile.mtimeMs'
  | 'featuredImage.node.localFile.name'
  | 'featuredImage.node.localFile.nlink'
  | 'featuredImage.node.localFile.prettySize'
  | 'featuredImage.node.localFile.publicURL'
  | 'featuredImage.node.localFile.rdev'
  | 'featuredImage.node.localFile.relativeDirectory'
  | 'featuredImage.node.localFile.relativePath'
  | 'featuredImage.node.localFile.root'
  | 'featuredImage.node.localFile.size'
  | 'featuredImage.node.localFile.sourceInstanceName'
  | 'featuredImage.node.localFile.uid'
  | 'featuredImage.node.mediaDetails.file'
  | 'featuredImage.node.mediaDetails.height'
  | 'featuredImage.node.mediaDetails.sizes'
  | 'featuredImage.node.mediaDetails.width'
  | 'featuredImage.node.mediaItemUrl'
  | 'featuredImage.node.mediaType'
  | 'featuredImage.node.mimeType'
  | 'featuredImage.node.modified'
  | 'featuredImage.node.modifiedGmt'
  | 'featuredImage.node.nodeType'
  | 'featuredImage.node.parentDatabaseId'
  | 'featuredImage.node.parentId'
  | 'featuredImage.node.parent.children'
  | 'featuredImage.node.parent.id'
  | 'featuredImage.node.publicUrl'
  | 'featuredImage.node.remoteFile.absolutePath'
  | 'featuredImage.node.remoteFile.accessTime'
  | 'featuredImage.node.remoteFile.atime'
  | 'featuredImage.node.remoteFile.atimeMs'
  | 'featuredImage.node.remoteFile.base'
  | 'featuredImage.node.remoteFile.birthTime'
  | 'featuredImage.node.remoteFile.birthtime'
  | 'featuredImage.node.remoteFile.birthtimeMs'
  | 'featuredImage.node.remoteFile.blksize'
  | 'featuredImage.node.remoteFile.blocks'
  | 'featuredImage.node.remoteFile.changeTime'
  | 'featuredImage.node.remoteFile.children'
  | 'featuredImage.node.remoteFile.childrenImageSharp'
  | 'featuredImage.node.remoteFile.ctime'
  | 'featuredImage.node.remoteFile.ctimeMs'
  | 'featuredImage.node.remoteFile.dev'
  | 'featuredImage.node.remoteFile.dir'
  | 'featuredImage.node.remoteFile.ext'
  | 'featuredImage.node.remoteFile.extension'
  | 'featuredImage.node.remoteFile.gid'
  | 'featuredImage.node.remoteFile.hash'
  | 'featuredImage.node.remoteFile.id'
  | 'featuredImage.node.remoteFile.ino'
  | 'featuredImage.node.remoteFile.mode'
  | 'featuredImage.node.remoteFile.modifiedTime'
  | 'featuredImage.node.remoteFile.mtime'
  | 'featuredImage.node.remoteFile.mtimeMs'
  | 'featuredImage.node.remoteFile.name'
  | 'featuredImage.node.remoteFile.nlink'
  | 'featuredImage.node.remoteFile.prettySize'
  | 'featuredImage.node.remoteFile.publicURL'
  | 'featuredImage.node.remoteFile.rdev'
  | 'featuredImage.node.remoteFile.relativeDirectory'
  | 'featuredImage.node.remoteFile.relativePath'
  | 'featuredImage.node.remoteFile.root'
  | 'featuredImage.node.remoteFile.size'
  | 'featuredImage.node.remoteFile.sourceInstanceName'
  | 'featuredImage.node.remoteFile.uid'
  | 'featuredImage.node.resize.height'
  | 'featuredImage.node.resize.src'
  | 'featuredImage.node.resize.width'
  | 'featuredImage.node.seo.breadcrumbs'
  | 'featuredImage.node.seo.canonical'
  | 'featuredImage.node.seo.cornerstone'
  | 'featuredImage.node.seo.focuskw'
  | 'featuredImage.node.seo.fullHead'
  | 'featuredImage.node.seo.metaDesc'
  | 'featuredImage.node.seo.metaKeywords'
  | 'featuredImage.node.seo.metaRobotsNofollow'
  | 'featuredImage.node.seo.metaRobotsNoindex'
  | 'featuredImage.node.seo.opengraphAuthor'
  | 'featuredImage.node.seo.opengraphDescription'
  | 'featuredImage.node.seo.opengraphModifiedTime'
  | 'featuredImage.node.seo.opengraphPublishedTime'
  | 'featuredImage.node.seo.opengraphPublisher'
  | 'featuredImage.node.seo.opengraphSiteName'
  | 'featuredImage.node.seo.opengraphTitle'
  | 'featuredImage.node.seo.opengraphType'
  | 'featuredImage.node.seo.opengraphUrl'
  | 'featuredImage.node.seo.readingTime'
  | 'featuredImage.node.seo.title'
  | 'featuredImage.node.seo.twitterDescription'
  | 'featuredImage.node.seo.twitterTitle'
  | 'featuredImage.node.sizes'
  | 'featuredImage.node.slug'
  | 'featuredImage.node.sourceUrl'
  | 'featuredImage.node.srcSet'
  | 'featuredImage.node.status'
  | 'featuredImage.node.template.templateName'
  | 'featuredImage.node.title'
  | 'featuredImage.node.uri'
  | 'featuredImage.node.width'
  | 'featuredImage.node.wpChildren.nodes'
  | 'guid'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'lastEditedBy.node.authorProfile.fieldGroupName'
  | 'lastEditedBy.node.avatar.default'
  | 'lastEditedBy.node.avatar.extraAttr'
  | 'lastEditedBy.node.avatar.forceDefault'
  | 'lastEditedBy.node.avatar.foundAvatar'
  | 'lastEditedBy.node.avatar.height'
  | 'lastEditedBy.node.avatar.rating'
  | 'lastEditedBy.node.avatar.scheme'
  | 'lastEditedBy.node.avatar.size'
  | 'lastEditedBy.node.avatar.url'
  | 'lastEditedBy.node.avatar.width'
  | 'lastEditedBy.node.capKey'
  | 'lastEditedBy.node.capabilities'
  | 'lastEditedBy.node.children'
  | 'lastEditedBy.node.children.children'
  | 'lastEditedBy.node.children.id'
  | 'lastEditedBy.node.comments.nodes'
  | 'lastEditedBy.node.databaseId'
  | 'lastEditedBy.node.description'
  | 'lastEditedBy.node.email'
  | 'lastEditedBy.node.extraCapabilities'
  | 'lastEditedBy.node.firstName'
  | 'lastEditedBy.node.id'
  | 'lastEditedBy.node.internal.content'
  | 'lastEditedBy.node.internal.contentDigest'
  | 'lastEditedBy.node.internal.contentFilePath'
  | 'lastEditedBy.node.internal.description'
  | 'lastEditedBy.node.internal.fieldOwners'
  | 'lastEditedBy.node.internal.ignoreType'
  | 'lastEditedBy.node.internal.mediaType'
  | 'lastEditedBy.node.internal.owner'
  | 'lastEditedBy.node.internal.type'
  | 'lastEditedBy.node.isContentNode'
  | 'lastEditedBy.node.isTermNode'
  | 'lastEditedBy.node.lastName'
  | 'lastEditedBy.node.locale'
  | 'lastEditedBy.node.name'
  | 'lastEditedBy.node.nicename'
  | 'lastEditedBy.node.nickname'
  | 'lastEditedBy.node.nodeType'
  | 'lastEditedBy.node.pages.nodes'
  | 'lastEditedBy.node.parent.children'
  | 'lastEditedBy.node.parent.id'
  | 'lastEditedBy.node.posts.nodes'
  | 'lastEditedBy.node.registeredDate'
  | 'lastEditedBy.node.roles.nodes'
  | 'lastEditedBy.node.seo.breadcrumbTitle'
  | 'lastEditedBy.node.seo.canonical'
  | 'lastEditedBy.node.seo.fullHead'
  | 'lastEditedBy.node.seo.language'
  | 'lastEditedBy.node.seo.metaDesc'
  | 'lastEditedBy.node.seo.metaRobotsNofollow'
  | 'lastEditedBy.node.seo.metaRobotsNoindex'
  | 'lastEditedBy.node.seo.opengraphDescription'
  | 'lastEditedBy.node.seo.opengraphTitle'
  | 'lastEditedBy.node.seo.region'
  | 'lastEditedBy.node.seo.title'
  | 'lastEditedBy.node.seo.twitterDescription'
  | 'lastEditedBy.node.seo.twitterTitle'
  | 'lastEditedBy.node.slug'
  | 'lastEditedBy.node.uri'
  | 'lastEditedBy.node.url'
  | 'lastEditedBy.node.username'
  | 'link'
  | 'menuOrder'
  | 'modified'
  | 'modifiedGmt'
  | 'nodeType'
  | 'parentDatabaseId'
  | 'parentId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'seo.breadcrumbs'
  | 'seo.breadcrumbs.text'
  | 'seo.breadcrumbs.url'
  | 'seo.canonical'
  | 'seo.cornerstone'
  | 'seo.focuskw'
  | 'seo.fullHead'
  | 'seo.metaDesc'
  | 'seo.metaKeywords'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphAuthor'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphModifiedTime'
  | 'seo.opengraphPublishedTime'
  | 'seo.opengraphPublisher'
  | 'seo.opengraphSiteName'
  | 'seo.opengraphTitle'
  | 'seo.opengraphType'
  | 'seo.opengraphUrl'
  | 'seo.readingTime'
  | 'seo.schema.articleType'
  | 'seo.schema.pageType'
  | 'seo.schema.raw'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'status'
  | 'tags.nodes'
  | 'tags.nodes.children'
  | 'tags.nodes.children.children'
  | 'tags.nodes.children.id'
  | 'tags.nodes.contentNodes.nodes'
  | 'tags.nodes.count'
  | 'tags.nodes.databaseId'
  | 'tags.nodes.description'
  | 'tags.nodes.id'
  | 'tags.nodes.internal.content'
  | 'tags.nodes.internal.contentDigest'
  | 'tags.nodes.internal.contentFilePath'
  | 'tags.nodes.internal.description'
  | 'tags.nodes.internal.fieldOwners'
  | 'tags.nodes.internal.ignoreType'
  | 'tags.nodes.internal.mediaType'
  | 'tags.nodes.internal.owner'
  | 'tags.nodes.internal.type'
  | 'tags.nodes.isContentNode'
  | 'tags.nodes.isTermNode'
  | 'tags.nodes.link'
  | 'tags.nodes.name'
  | 'tags.nodes.nodeType'
  | 'tags.nodes.parent.children'
  | 'tags.nodes.parent.id'
  | 'tags.nodes.posts.nodes'
  | 'tags.nodes.seo.breadcrumbs'
  | 'tags.nodes.seo.canonical'
  | 'tags.nodes.seo.cornerstone'
  | 'tags.nodes.seo.focuskw'
  | 'tags.nodes.seo.fullHead'
  | 'tags.nodes.seo.metaDesc'
  | 'tags.nodes.seo.metaKeywords'
  | 'tags.nodes.seo.metaRobotsNofollow'
  | 'tags.nodes.seo.metaRobotsNoindex'
  | 'tags.nodes.seo.opengraphAuthor'
  | 'tags.nodes.seo.opengraphDescription'
  | 'tags.nodes.seo.opengraphModifiedTime'
  | 'tags.nodes.seo.opengraphPublishedTime'
  | 'tags.nodes.seo.opengraphPublisher'
  | 'tags.nodes.seo.opengraphSiteName'
  | 'tags.nodes.seo.opengraphTitle'
  | 'tags.nodes.seo.opengraphType'
  | 'tags.nodes.seo.opengraphUrl'
  | 'tags.nodes.seo.title'
  | 'tags.nodes.seo.twitterDescription'
  | 'tags.nodes.seo.twitterTitle'
  | 'tags.nodes.slug'
  | 'tags.nodes.taxonomyName'
  | 'tags.nodes.termGroupId'
  | 'tags.nodes.termTaxonomyId'
  | 'tags.nodes.testimonial.nodes'
  | 'tags.nodes.uri'
  | 'template.templateName'
  | 'terms.nodes'
  | 'terms.nodes.children'
  | 'terms.nodes.children.children'
  | 'terms.nodes.children.id'
  | 'terms.nodes.count'
  | 'terms.nodes.databaseId'
  | 'terms.nodes.description'
  | 'terms.nodes.id'
  | 'terms.nodes.internal.content'
  | 'terms.nodes.internal.contentDigest'
  | 'terms.nodes.internal.contentFilePath'
  | 'terms.nodes.internal.description'
  | 'terms.nodes.internal.fieldOwners'
  | 'terms.nodes.internal.ignoreType'
  | 'terms.nodes.internal.mediaType'
  | 'terms.nodes.internal.owner'
  | 'terms.nodes.internal.type'
  | 'terms.nodes.isContentNode'
  | 'terms.nodes.isTermNode'
  | 'terms.nodes.link'
  | 'terms.nodes.name'
  | 'terms.nodes.nodeType'
  | 'terms.nodes.parent.children'
  | 'terms.nodes.parent.id'
  | 'terms.nodes.slug'
  | 'terms.nodes.taxonomyName'
  | 'terms.nodes.termGroupId'
  | 'terms.nodes.termTaxonomyId'
  | 'terms.nodes.uri'
  | 'testimonialCategory.nodes'
  | 'testimonialCategory.nodes.ancestors.nodes'
  | 'testimonialCategory.nodes.children'
  | 'testimonialCategory.nodes.children.children'
  | 'testimonialCategory.nodes.children.id'
  | 'testimonialCategory.nodes.contentNodes.nodes'
  | 'testimonialCategory.nodes.count'
  | 'testimonialCategory.nodes.databaseId'
  | 'testimonialCategory.nodes.description'
  | 'testimonialCategory.nodes.id'
  | 'testimonialCategory.nodes.internal.content'
  | 'testimonialCategory.nodes.internal.contentDigest'
  | 'testimonialCategory.nodes.internal.contentFilePath'
  | 'testimonialCategory.nodes.internal.description'
  | 'testimonialCategory.nodes.internal.fieldOwners'
  | 'testimonialCategory.nodes.internal.ignoreType'
  | 'testimonialCategory.nodes.internal.mediaType'
  | 'testimonialCategory.nodes.internal.owner'
  | 'testimonialCategory.nodes.internal.type'
  | 'testimonialCategory.nodes.isContentNode'
  | 'testimonialCategory.nodes.isTermNode'
  | 'testimonialCategory.nodes.link'
  | 'testimonialCategory.nodes.name'
  | 'testimonialCategory.nodes.nodeType'
  | 'testimonialCategory.nodes.parentDatabaseId'
  | 'testimonialCategory.nodes.parentId'
  | 'testimonialCategory.nodes.parent.children'
  | 'testimonialCategory.nodes.parent.id'
  | 'testimonialCategory.nodes.seo.breadcrumbs'
  | 'testimonialCategory.nodes.seo.canonical'
  | 'testimonialCategory.nodes.seo.cornerstone'
  | 'testimonialCategory.nodes.seo.focuskw'
  | 'testimonialCategory.nodes.seo.fullHead'
  | 'testimonialCategory.nodes.seo.metaDesc'
  | 'testimonialCategory.nodes.seo.metaKeywords'
  | 'testimonialCategory.nodes.seo.metaRobotsNofollow'
  | 'testimonialCategory.nodes.seo.metaRobotsNoindex'
  | 'testimonialCategory.nodes.seo.opengraphAuthor'
  | 'testimonialCategory.nodes.seo.opengraphDescription'
  | 'testimonialCategory.nodes.seo.opengraphModifiedTime'
  | 'testimonialCategory.nodes.seo.opengraphPublishedTime'
  | 'testimonialCategory.nodes.seo.opengraphPublisher'
  | 'testimonialCategory.nodes.seo.opengraphSiteName'
  | 'testimonialCategory.nodes.seo.opengraphTitle'
  | 'testimonialCategory.nodes.seo.opengraphType'
  | 'testimonialCategory.nodes.seo.opengraphUrl'
  | 'testimonialCategory.nodes.seo.title'
  | 'testimonialCategory.nodes.seo.twitterDescription'
  | 'testimonialCategory.nodes.seo.twitterTitle'
  | 'testimonialCategory.nodes.slug'
  | 'testimonialCategory.nodes.taxonomyName'
  | 'testimonialCategory.nodes.termGroupId'
  | 'testimonialCategory.nodes.termTaxonomyId'
  | 'testimonialCategory.nodes.testimonial.nodes'
  | 'testimonialCategory.nodes.uri'
  | 'testimonialCategory.nodes.wpChildren.nodes'
  | 'title'
  | 'uri'
  | 'wpChildren.nodes'
  | 'wpChildren.nodes.children'
  | 'wpChildren.nodes.children.children'
  | 'wpChildren.nodes.children.id'
  | 'wpChildren.nodes.contentTypeName'
  | 'wpChildren.nodes.databaseId'
  | 'wpChildren.nodes.date'
  | 'wpChildren.nodes.dateGmt'
  | 'wpChildren.nodes.desiredSlug'
  | 'wpChildren.nodes.enclosure'
  | 'wpChildren.nodes.guid'
  | 'wpChildren.nodes.id'
  | 'wpChildren.nodes.internal.content'
  | 'wpChildren.nodes.internal.contentDigest'
  | 'wpChildren.nodes.internal.contentFilePath'
  | 'wpChildren.nodes.internal.description'
  | 'wpChildren.nodes.internal.fieldOwners'
  | 'wpChildren.nodes.internal.ignoreType'
  | 'wpChildren.nodes.internal.mediaType'
  | 'wpChildren.nodes.internal.owner'
  | 'wpChildren.nodes.internal.type'
  | 'wpChildren.nodes.isContentNode'
  | 'wpChildren.nodes.isTermNode'
  | 'wpChildren.nodes.link'
  | 'wpChildren.nodes.modified'
  | 'wpChildren.nodes.modifiedGmt'
  | 'wpChildren.nodes.nodeType'
  | 'wpChildren.nodes.parent.children'
  | 'wpChildren.nodes.parent.id'
  | 'wpChildren.nodes.seo.breadcrumbs'
  | 'wpChildren.nodes.seo.canonical'
  | 'wpChildren.nodes.seo.cornerstone'
  | 'wpChildren.nodes.seo.focuskw'
  | 'wpChildren.nodes.seo.fullHead'
  | 'wpChildren.nodes.seo.metaDesc'
  | 'wpChildren.nodes.seo.metaKeywords'
  | 'wpChildren.nodes.seo.metaRobotsNofollow'
  | 'wpChildren.nodes.seo.metaRobotsNoindex'
  | 'wpChildren.nodes.seo.opengraphAuthor'
  | 'wpChildren.nodes.seo.opengraphDescription'
  | 'wpChildren.nodes.seo.opengraphModifiedTime'
  | 'wpChildren.nodes.seo.opengraphPublishedTime'
  | 'wpChildren.nodes.seo.opengraphPublisher'
  | 'wpChildren.nodes.seo.opengraphSiteName'
  | 'wpChildren.nodes.seo.opengraphTitle'
  | 'wpChildren.nodes.seo.opengraphType'
  | 'wpChildren.nodes.seo.opengraphUrl'
  | 'wpChildren.nodes.seo.readingTime'
  | 'wpChildren.nodes.seo.title'
  | 'wpChildren.nodes.seo.twitterDescription'
  | 'wpChildren.nodes.seo.twitterTitle'
  | 'wpChildren.nodes.slug'
  | 'wpChildren.nodes.status'
  | 'wpChildren.nodes.template.templateName'
  | 'wpChildren.nodes.uri'
  | 'wpParent.node.children'
  | 'wpParent.node.children.children'
  | 'wpParent.node.children.id'
  | 'wpParent.node.contentTypeName'
  | 'wpParent.node.databaseId'
  | 'wpParent.node.date'
  | 'wpParent.node.dateGmt'
  | 'wpParent.node.desiredSlug'
  | 'wpParent.node.enclosure'
  | 'wpParent.node.guid'
  | 'wpParent.node.id'
  | 'wpParent.node.internal.content'
  | 'wpParent.node.internal.contentDigest'
  | 'wpParent.node.internal.contentFilePath'
  | 'wpParent.node.internal.description'
  | 'wpParent.node.internal.fieldOwners'
  | 'wpParent.node.internal.ignoreType'
  | 'wpParent.node.internal.mediaType'
  | 'wpParent.node.internal.owner'
  | 'wpParent.node.internal.type'
  | 'wpParent.node.isContentNode'
  | 'wpParent.node.isTermNode'
  | 'wpParent.node.link'
  | 'wpParent.node.modified'
  | 'wpParent.node.modifiedGmt'
  | 'wpParent.node.nodeType'
  | 'wpParent.node.parent.children'
  | 'wpParent.node.parent.id'
  | 'wpParent.node.seo.breadcrumbs'
  | 'wpParent.node.seo.canonical'
  | 'wpParent.node.seo.cornerstone'
  | 'wpParent.node.seo.focuskw'
  | 'wpParent.node.seo.fullHead'
  | 'wpParent.node.seo.metaDesc'
  | 'wpParent.node.seo.metaKeywords'
  | 'wpParent.node.seo.metaRobotsNofollow'
  | 'wpParent.node.seo.metaRobotsNoindex'
  | 'wpParent.node.seo.opengraphAuthor'
  | 'wpParent.node.seo.opengraphDescription'
  | 'wpParent.node.seo.opengraphModifiedTime'
  | 'wpParent.node.seo.opengraphPublishedTime'
  | 'wpParent.node.seo.opengraphPublisher'
  | 'wpParent.node.seo.opengraphSiteName'
  | 'wpParent.node.seo.opengraphTitle'
  | 'wpParent.node.seo.opengraphType'
  | 'wpParent.node.seo.opengraphUrl'
  | 'wpParent.node.seo.readingTime'
  | 'wpParent.node.seo.title'
  | 'wpParent.node.seo.twitterDescription'
  | 'wpParent.node.seo.twitterTitle'
  | 'wpParent.node.slug'
  | 'wpParent.node.status'
  | 'wpParent.node.template.templateName'
  | 'wpParent.node.uri';

type tsTestimonialFilterInput = {
  readonly TestimonialsForCaseStudies: InputMaybe<tsTestimonial_TestimonialsforcasestudiesFilterInput>;
  readonly ancestors: InputMaybe<tsHierarchicalContentNodeToContentNodeAncestorsConnectionFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentType: InputMaybe<tsContentNodeToContentTypeConnectionEdgeFilterInput>;
  readonly contentTypeName: InputMaybe<StringQueryOperatorInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly dateGmt: InputMaybe<DateQueryOperatorInput>;
  readonly desiredSlug: InputMaybe<StringQueryOperatorInput>;
  readonly enclosure: InputMaybe<StringQueryOperatorInput>;
  readonly featuredImage: InputMaybe<tsNodeWithFeaturedImageToMediaItemConnectionEdgeFilterInput>;
  readonly featuredImageDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly featuredImageId: InputMaybe<IDQueryOperatorInput>;
  readonly guid: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastEditedBy: InputMaybe<tsContentNodeToEditLastConnectionEdgeFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly menuOrder: InputMaybe<IntQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly modifiedGmt: InputMaybe<DateQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentDatabaseId: InputMaybe<IntQueryOperatorInput>;
  readonly parentId: InputMaybe<IDQueryOperatorInput>;
  readonly seo: InputMaybe<tsPostTypeSEOFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<tsTestimonialToTagConnectionFilterInput>;
  readonly template: InputMaybe<tsContentTemplateFilterInput>;
  readonly terms: InputMaybe<tsTestimonialToTermNodeConnectionFilterInput>;
  readonly testimonialCategory: InputMaybe<tsTestimonialToSingleTestimonialCategoryConnectionFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly wpChildren: InputMaybe<tsHierarchicalContentNodeToContentNodeChildrenConnectionFilterInput>;
  readonly wpParent: InputMaybe<tsHierarchicalContentNodeToParentContentNodeConnectionEdgeFilterInput>;
};

type tsTestimonialFilterListInput = {
  readonly elemMatch: InputMaybe<tsTestimonialFilterInput>;
};

type tsTestimonialGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsTestimonialEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsTestimonialGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsTestimonial>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsTestimonialGroupConnection_distinctArgs = {
  field: tsTestimonialFieldsEnum;
};


type tsTestimonialGroupConnection_groupArgs = {
  field: tsTestimonialFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsTestimonialGroupConnection_maxArgs = {
  field: tsTestimonialFieldsEnum;
};


type tsTestimonialGroupConnection_minArgs = {
  field: tsTestimonialFieldsEnum;
};


type tsTestimonialGroupConnection_sumArgs = {
  field: tsTestimonialFieldsEnum;
};

type tsTestimonialSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsTestimonialFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the Testimonial type and the SingleTestimonialCategory type */
type tsTestimonialToSingleTestimonialCategoryConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsSingleTestimonialCategory>>>;
};

type tsTestimonialToSingleTestimonialCategoryConnectionFilterInput = {
  readonly nodes: InputMaybe<tsSingleTestimonialCategoryFilterListInput>;
};

/** Connection between the Testimonial type and the tag type */
type tsTestimonialToTagConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsTag>>>;
};

type tsTestimonialToTagConnectionFilterInput = {
  readonly nodes: InputMaybe<tsTagFilterListInput>;
};

/** Connection between the Testimonial type and the TermNode type */
type tsTestimonialToTermNodeConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsTermNode>>>;
};

type tsTestimonialToTermNodeConnectionFilterInput = {
  readonly nodes: InputMaybe<tsTermNodeFilterListInput>;
};

/** Field Group */
type tsTestimonial_Testimonialsforcasestudies = tsAcfFieldGroup & {
  readonly author: Maybe<Scalars['String']>;
  readonly company: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly image: Maybe<tsMediaItem>;
  readonly jobTitle: Maybe<Scalars['String']>;
  readonly style: Maybe<Scalars['String']>;
  readonly workRelationship: Maybe<ReadonlyArray<Maybe<tsTestimonial_Testimonialsforcasestudies_WorkRelationship>>>;
};

type tsTestimonial_TestimonialsforcasestudiesFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly company: InputMaybe<StringQueryOperatorInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<tsMediaItemFilterInput>;
  readonly jobTitle: InputMaybe<StringQueryOperatorInput>;
  readonly style: InputMaybe<StringQueryOperatorInput>;
};

type tsTestimonial_Testimonialsforcasestudies_WorkRelationship = tsCaseStudy;

/** A Gravity Forms textarea field. */
type tsTextAreaField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMaxlen & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRichTextEditor & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Indicates whether the field uses the rich text editor interface. */
  readonly hasRichTextEditor: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Specifies the maximum number of characters allowed in a text or textarea (paragraph) field. */
  readonly maxLength: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms text field. */
type tsTextField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithAutocomplete & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithInputMask & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithMaxlen & tsGfFieldWithPasswordField & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Whether autocomplete should be enabled for this field. */
  readonly hasAutocomplete: Maybe<Scalars['Boolean']>;
  /** Whether the field has an input mask. */
  readonly hasInputMask: Maybe<Scalars['Boolean']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** The pattern used for the input mask. */
  readonly inputMaskValue: Maybe<Scalars['String']>;
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if a text field input tag should be created with a &quot;password&quot; type. */
  readonly isPasswordInput: Maybe<Scalars['Boolean']>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** Specifies the maximum number of characters allowed in a text or textarea (paragraph) field. */
  readonly maxLength: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** A Gravity Forms time field. */
type tsTimeField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSubLabelPlacement & tsGfFieldWithTimeFormat & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** The available inputs for the time field. */
  readonly inputs: Maybe<ReadonlyArray<Maybe<tsTimeInputProperty>>>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs. */
  readonly subLabelPlacement: Maybe<tsFormFieldSubLabelPlacementEnum>;
  /** Determines how the time is displayed. */
  readonly timeFormat: Maybe<tsTimeFieldFormatEnum>;
  /** Time field value. */
  readonly timeValues: Maybe<tsTimeFieldValue>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** How the time is displayed. */
type tsTimeFieldFormatEnum =
  | 'H12'
  | 'H24';

/** The individual properties for each element of the Time value field. */
type tsTimeFieldValue = {
  /** AM or PM. */
  readonly amPm: Maybe<tsAmPmEnum>;
  /** The full display value in 12-hour format. Example: &quot;08:25 am&quot;. */
  readonly displayValue: Maybe<Scalars['String']>;
  /** The hours, in this format: hh. */
  readonly hours: Maybe<Scalars['String']>;
  /** The minutes, in this format: mm. */
  readonly minutes: Maybe<Scalars['String']>;
};

/** TimeInputProperty input values. */
type tsTimeInputProperty = tsGfFieldInputProperty & tsGfFieldInputWithTimeFormat & {
  /** The autocomplete attribute for the field. */
  readonly autocompleteAttribute: Maybe<Scalars['String']>;
  /** The custom label for the input. When set, this is used in place of the label. */
  readonly customLabel: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field. */
  readonly id: Maybe<Scalars['Float']>;
  /** The label to be used for the input. */
  readonly label: Maybe<Scalars['String']>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
};

/** Theme Options options. */
type tsTsOptions = {
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Global Options&quot; was set to Show in GraphQL. */
  readonly generaloptions: Maybe<tsTsOptions_Generaloptions>;
  readonly pageSlug: Maybe<Scalars['String']>;
  readonly pageTitle: Maybe<Scalars['String']>;
};

type tsTsOptionsFilterInput = {
  readonly generaloptions: InputMaybe<tsTsOptions_GeneraloptionsFilterInput>;
  readonly pageSlug: InputMaybe<StringQueryOperatorInput>;
  readonly pageTitle: InputMaybe<StringQueryOperatorInput>;
};

/** Field Group */
type tsTsOptions_Generaloptions = tsAcfFieldGroup & {
  readonly enquireLists: Maybe<ReadonlyArray<Maybe<tsTsOptions_Generaloptions_enquireLists>>>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly officeAddresses: Maybe<ReadonlyArray<Maybe<tsTsOptions_Generaloptions_officeAddresses>>>;
  readonly recognition: Maybe<ReadonlyArray<Maybe<tsTsOptions_Generaloptions_recognition>>>;
  readonly trustedBy: Maybe<ReadonlyArray<Maybe<tsTsOptions_Generaloptions_trustedBy>>>;
};

type tsTsOptions_GeneraloptionsFilterInput = {
  readonly enquireLists: InputMaybe<tsTsOptions_Generaloptions_enquireListsFilterListInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly officeAddresses: InputMaybe<tsTsOptions_Generaloptions_officeAddressesFilterListInput>;
  readonly recognition: InputMaybe<tsTsOptions_Generaloptions_recognitionFilterListInput>;
  readonly trustedBy: InputMaybe<tsTsOptions_Generaloptions_trustedByFilterListInput>;
};

/** Field Group */
type tsTsOptions_Generaloptions_enquireLists = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type tsTsOptions_Generaloptions_enquireListsFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type tsTsOptions_Generaloptions_enquireListsFilterListInput = {
  readonly elemMatch: InputMaybe<tsTsOptions_Generaloptions_enquireListsFilterInput>;
};

/** Field Group */
type tsTsOptions_Generaloptions_officeAddresses = tsAcfFieldGroup & {
  readonly content: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type tsTsOptions_Generaloptions_officeAddressesFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type tsTsOptions_Generaloptions_officeAddressesFilterListInput = {
  readonly elemMatch: InputMaybe<tsTsOptions_Generaloptions_officeAddressesFilterInput>;
};

/** Field Group */
type tsTsOptions_Generaloptions_recognition = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly logo: Maybe<tsMediaItem>;
};

type tsTsOptions_Generaloptions_recognitionFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly logo: InputMaybe<tsMediaItemFilterInput>;
};

type tsTsOptions_Generaloptions_recognitionFilterListInput = {
  readonly elemMatch: InputMaybe<tsTsOptions_Generaloptions_recognitionFilterInput>;
};

/** Field Group */
type tsTsOptions_Generaloptions_trustedBy = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly logo: Maybe<tsMediaItem>;
};

type tsTsOptions_Generaloptions_trustedByFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly logo: InputMaybe<tsMediaItemFilterInput>;
};

type tsTsOptions_Generaloptions_trustedByFilterListInput = {
  readonly elemMatch: InputMaybe<tsTsOptions_Generaloptions_trustedByFilterInput>;
};

type tsUniformResourceIdentifiable = {
  /** The unique resource identifier path */
  readonly id: Scalars['ID'];
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
};

/** A User object */
type tsUser = Node & tsCommenter & tsDatabaseIdentifier & tsNode & tsUniformResourceIdentifiable & {
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Author&quot; was set to Show in GraphQL. */
  readonly authorProfile: Maybe<tsUser_Authorprofile>;
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  readonly avatar: Maybe<tsAvatar>;
  /** User metadata option name. Usually it will be &quot;wp_capabilities&quot;. */
  readonly capKey: Maybe<Scalars['String']>;
  /** A list of capabilities (permissions) granted to the user */
  readonly capabilities: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  /** Connection between the User type and the Comment type */
  readonly comments: Maybe<tsUserToCommentConnection>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Scalars['Int'];
  /** Description of the user. */
  readonly description: Maybe<Scalars['String']>;
  /** Email address of the user. This is equivalent to the WP_User-&gt;user_email property. */
  readonly email: Maybe<Scalars['String']>;
  /** A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps. */
  readonly extraCapabilities: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** First name of the user. This is equivalent to the WP_User-&gt;user_first_name property. */
  readonly firstName: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** Whether the node is a Content Node */
  readonly isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  readonly isTermNode: Scalars['Boolean'];
  /** Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property. */
  readonly lastName: Maybe<Scalars['String']>;
  /** The preferred language locale set for the user. Value derived from get_user_locale(). */
  readonly locale: Maybe<Scalars['String']>;
  /** Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property. */
  readonly name: Maybe<Scalars['String']>;
  /** The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename */
  readonly nicename: Maybe<Scalars['String']>;
  /** Nickname of the user. */
  readonly nickname: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  /** Connection between the User type and the page type */
  readonly pages: Maybe<tsUserToPageConnection>;
  readonly parent: Maybe<Node>;
  /** Connection between the User type and the post type */
  readonly posts: Maybe<tsUserToPostConnection>;
  /** The date the user registered or was created. The field follows a full ISO8601 date string format. */
  readonly registeredDate: Maybe<Scalars['String']>;
  /** Connection between the User type and the UserRole type */
  readonly roles: Maybe<tsUserToUserRoleConnection>;
  /** The Yoast SEO data of a user */
  readonly seo: Maybe<tsSEOUser>;
  /** The slug for the user. This field is equivalent to WP_User-&gt;user_nicename */
  readonly slug: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  readonly uri: Maybe<Scalars['String']>;
  /** A website url that is associated with the user. */
  readonly url: Maybe<Scalars['String']>;
  /** Username for the user. This field is equivalent to WP_User-&gt;user_login. */
  readonly username: Maybe<Scalars['String']>;
};

type tsUserConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsUserEdge>;
  readonly group: ReadonlyArray<tsUserGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsUser>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsUserConnection_distinctArgs = {
  field: tsUserFieldsEnum;
};


type tsUserConnection_groupArgs = {
  field: tsUserFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsUserConnection_maxArgs = {
  field: tsUserFieldsEnum;
};


type tsUserConnection_minArgs = {
  field: tsUserFieldsEnum;
};


type tsUserConnection_sumArgs = {
  field: tsUserFieldsEnum;
};

type tsUserEdge = {
  readonly next: Maybe<tsUser>;
  readonly node: tsUser;
  readonly previous: Maybe<tsUser>;
};

type tsUserFieldsEnum =
  | 'authorProfile.fieldGroupName'
  | 'authorProfile.profile.altText'
  | 'authorProfile.profile.ancestors.nodes'
  | 'authorProfile.profile.authorDatabaseId'
  | 'authorProfile.profile.authorId'
  | 'authorProfile.profile.caption'
  | 'authorProfile.profile.children'
  | 'authorProfile.profile.children.children'
  | 'authorProfile.profile.children.id'
  | 'authorProfile.profile.commentCount'
  | 'authorProfile.profile.commentStatus'
  | 'authorProfile.profile.comments.nodes'
  | 'authorProfile.profile.contentTypeName'
  | 'authorProfile.profile.databaseId'
  | 'authorProfile.profile.date'
  | 'authorProfile.profile.dateGmt'
  | 'authorProfile.profile.description'
  | 'authorProfile.profile.desiredSlug'
  | 'authorProfile.profile.enclosure'
  | 'authorProfile.profile.fileSize'
  | 'authorProfile.profile.filename'
  | 'authorProfile.profile.filesize'
  | 'authorProfile.profile.gatsbyImage'
  | 'authorProfile.profile.guid'
  | 'authorProfile.profile.height'
  | 'authorProfile.profile.id'
  | 'authorProfile.profile.internal.content'
  | 'authorProfile.profile.internal.contentDigest'
  | 'authorProfile.profile.internal.contentFilePath'
  | 'authorProfile.profile.internal.description'
  | 'authorProfile.profile.internal.fieldOwners'
  | 'authorProfile.profile.internal.ignoreType'
  | 'authorProfile.profile.internal.mediaType'
  | 'authorProfile.profile.internal.owner'
  | 'authorProfile.profile.internal.type'
  | 'authorProfile.profile.isContentNode'
  | 'authorProfile.profile.isTermNode'
  | 'authorProfile.profile.link'
  | 'authorProfile.profile.localFile.absolutePath'
  | 'authorProfile.profile.localFile.accessTime'
  | 'authorProfile.profile.localFile.atime'
  | 'authorProfile.profile.localFile.atimeMs'
  | 'authorProfile.profile.localFile.base'
  | 'authorProfile.profile.localFile.birthTime'
  | 'authorProfile.profile.localFile.birthtime'
  | 'authorProfile.profile.localFile.birthtimeMs'
  | 'authorProfile.profile.localFile.blksize'
  | 'authorProfile.profile.localFile.blocks'
  | 'authorProfile.profile.localFile.changeTime'
  | 'authorProfile.profile.localFile.children'
  | 'authorProfile.profile.localFile.childrenImageSharp'
  | 'authorProfile.profile.localFile.ctime'
  | 'authorProfile.profile.localFile.ctimeMs'
  | 'authorProfile.profile.localFile.dev'
  | 'authorProfile.profile.localFile.dir'
  | 'authorProfile.profile.localFile.ext'
  | 'authorProfile.profile.localFile.extension'
  | 'authorProfile.profile.localFile.gid'
  | 'authorProfile.profile.localFile.hash'
  | 'authorProfile.profile.localFile.id'
  | 'authorProfile.profile.localFile.ino'
  | 'authorProfile.profile.localFile.mode'
  | 'authorProfile.profile.localFile.modifiedTime'
  | 'authorProfile.profile.localFile.mtime'
  | 'authorProfile.profile.localFile.mtimeMs'
  | 'authorProfile.profile.localFile.name'
  | 'authorProfile.profile.localFile.nlink'
  | 'authorProfile.profile.localFile.prettySize'
  | 'authorProfile.profile.localFile.publicURL'
  | 'authorProfile.profile.localFile.rdev'
  | 'authorProfile.profile.localFile.relativeDirectory'
  | 'authorProfile.profile.localFile.relativePath'
  | 'authorProfile.profile.localFile.root'
  | 'authorProfile.profile.localFile.size'
  | 'authorProfile.profile.localFile.sourceInstanceName'
  | 'authorProfile.profile.localFile.uid'
  | 'authorProfile.profile.mediaDetails.file'
  | 'authorProfile.profile.mediaDetails.height'
  | 'authorProfile.profile.mediaDetails.sizes'
  | 'authorProfile.profile.mediaDetails.width'
  | 'authorProfile.profile.mediaItemUrl'
  | 'authorProfile.profile.mediaType'
  | 'authorProfile.profile.mimeType'
  | 'authorProfile.profile.modified'
  | 'authorProfile.profile.modifiedGmt'
  | 'authorProfile.profile.nodeType'
  | 'authorProfile.profile.parentDatabaseId'
  | 'authorProfile.profile.parentId'
  | 'authorProfile.profile.parent.children'
  | 'authorProfile.profile.parent.id'
  | 'authorProfile.profile.publicUrl'
  | 'authorProfile.profile.remoteFile.absolutePath'
  | 'authorProfile.profile.remoteFile.accessTime'
  | 'authorProfile.profile.remoteFile.atime'
  | 'authorProfile.profile.remoteFile.atimeMs'
  | 'authorProfile.profile.remoteFile.base'
  | 'authorProfile.profile.remoteFile.birthTime'
  | 'authorProfile.profile.remoteFile.birthtime'
  | 'authorProfile.profile.remoteFile.birthtimeMs'
  | 'authorProfile.profile.remoteFile.blksize'
  | 'authorProfile.profile.remoteFile.blocks'
  | 'authorProfile.profile.remoteFile.changeTime'
  | 'authorProfile.profile.remoteFile.children'
  | 'authorProfile.profile.remoteFile.childrenImageSharp'
  | 'authorProfile.profile.remoteFile.ctime'
  | 'authorProfile.profile.remoteFile.ctimeMs'
  | 'authorProfile.profile.remoteFile.dev'
  | 'authorProfile.profile.remoteFile.dir'
  | 'authorProfile.profile.remoteFile.ext'
  | 'authorProfile.profile.remoteFile.extension'
  | 'authorProfile.profile.remoteFile.gid'
  | 'authorProfile.profile.remoteFile.hash'
  | 'authorProfile.profile.remoteFile.id'
  | 'authorProfile.profile.remoteFile.ino'
  | 'authorProfile.profile.remoteFile.mode'
  | 'authorProfile.profile.remoteFile.modifiedTime'
  | 'authorProfile.profile.remoteFile.mtime'
  | 'authorProfile.profile.remoteFile.mtimeMs'
  | 'authorProfile.profile.remoteFile.name'
  | 'authorProfile.profile.remoteFile.nlink'
  | 'authorProfile.profile.remoteFile.prettySize'
  | 'authorProfile.profile.remoteFile.publicURL'
  | 'authorProfile.profile.remoteFile.rdev'
  | 'authorProfile.profile.remoteFile.relativeDirectory'
  | 'authorProfile.profile.remoteFile.relativePath'
  | 'authorProfile.profile.remoteFile.root'
  | 'authorProfile.profile.remoteFile.size'
  | 'authorProfile.profile.remoteFile.sourceInstanceName'
  | 'authorProfile.profile.remoteFile.uid'
  | 'authorProfile.profile.resize.height'
  | 'authorProfile.profile.resize.src'
  | 'authorProfile.profile.resize.width'
  | 'authorProfile.profile.seo.breadcrumbs'
  | 'authorProfile.profile.seo.canonical'
  | 'authorProfile.profile.seo.cornerstone'
  | 'authorProfile.profile.seo.focuskw'
  | 'authorProfile.profile.seo.fullHead'
  | 'authorProfile.profile.seo.metaDesc'
  | 'authorProfile.profile.seo.metaKeywords'
  | 'authorProfile.profile.seo.metaRobotsNofollow'
  | 'authorProfile.profile.seo.metaRobotsNoindex'
  | 'authorProfile.profile.seo.opengraphAuthor'
  | 'authorProfile.profile.seo.opengraphDescription'
  | 'authorProfile.profile.seo.opengraphModifiedTime'
  | 'authorProfile.profile.seo.opengraphPublishedTime'
  | 'authorProfile.profile.seo.opengraphPublisher'
  | 'authorProfile.profile.seo.opengraphSiteName'
  | 'authorProfile.profile.seo.opengraphTitle'
  | 'authorProfile.profile.seo.opengraphType'
  | 'authorProfile.profile.seo.opengraphUrl'
  | 'authorProfile.profile.seo.readingTime'
  | 'authorProfile.profile.seo.title'
  | 'authorProfile.profile.seo.twitterDescription'
  | 'authorProfile.profile.seo.twitterTitle'
  | 'authorProfile.profile.sizes'
  | 'authorProfile.profile.slug'
  | 'authorProfile.profile.sourceUrl'
  | 'authorProfile.profile.srcSet'
  | 'authorProfile.profile.status'
  | 'authorProfile.profile.template.templateName'
  | 'authorProfile.profile.title'
  | 'authorProfile.profile.uri'
  | 'authorProfile.profile.width'
  | 'authorProfile.profile.wpChildren.nodes'
  | 'avatar.default'
  | 'avatar.extraAttr'
  | 'avatar.forceDefault'
  | 'avatar.foundAvatar'
  | 'avatar.height'
  | 'avatar.rating'
  | 'avatar.scheme'
  | 'avatar.size'
  | 'avatar.url'
  | 'avatar.width'
  | 'capKey'
  | 'capabilities'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'comments.nodes'
  | 'comments.nodes.agent'
  | 'comments.nodes.approved'
  | 'comments.nodes.authorIp'
  | 'comments.nodes.children'
  | 'comments.nodes.children.children'
  | 'comments.nodes.children.id'
  | 'comments.nodes.content'
  | 'comments.nodes.databaseId'
  | 'comments.nodes.date'
  | 'comments.nodes.dateGmt'
  | 'comments.nodes.id'
  | 'comments.nodes.internal.content'
  | 'comments.nodes.internal.contentDigest'
  | 'comments.nodes.internal.contentFilePath'
  | 'comments.nodes.internal.description'
  | 'comments.nodes.internal.fieldOwners'
  | 'comments.nodes.internal.ignoreType'
  | 'comments.nodes.internal.mediaType'
  | 'comments.nodes.internal.owner'
  | 'comments.nodes.internal.type'
  | 'comments.nodes.karma'
  | 'comments.nodes.nodeType'
  | 'comments.nodes.parentDatabaseId'
  | 'comments.nodes.parentId'
  | 'comments.nodes.parent.children'
  | 'comments.nodes.parent.id'
  | 'comments.nodes.replies.nodes'
  | 'comments.nodes.type'
  | 'databaseId'
  | 'description'
  | 'email'
  | 'extraCapabilities'
  | 'firstName'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isContentNode'
  | 'isTermNode'
  | 'lastName'
  | 'locale'
  | 'name'
  | 'nicename'
  | 'nickname'
  | 'nodeType'
  | 'pages.nodes'
  | 'pages.nodes.ancestors.nodes'
  | 'pages.nodes.authorDatabaseId'
  | 'pages.nodes.authorId'
  | 'pages.nodes.children'
  | 'pages.nodes.children.children'
  | 'pages.nodes.children.id'
  | 'pages.nodes.commentCount'
  | 'pages.nodes.commentStatus'
  | 'pages.nodes.comments.nodes'
  | 'pages.nodes.content'
  | 'pages.nodes.contentTypeName'
  | 'pages.nodes.databaseId'
  | 'pages.nodes.date'
  | 'pages.nodes.dateGmt'
  | 'pages.nodes.desiredSlug'
  | 'pages.nodes.enclosure'
  | 'pages.nodes.featuredImageDatabaseId'
  | 'pages.nodes.featuredImageId'
  | 'pages.nodes.flexibleContent.fieldGroupName'
  | 'pages.nodes.guid'
  | 'pages.nodes.id'
  | 'pages.nodes.internal.content'
  | 'pages.nodes.internal.contentDigest'
  | 'pages.nodes.internal.contentFilePath'
  | 'pages.nodes.internal.description'
  | 'pages.nodes.internal.fieldOwners'
  | 'pages.nodes.internal.ignoreType'
  | 'pages.nodes.internal.mediaType'
  | 'pages.nodes.internal.owner'
  | 'pages.nodes.internal.type'
  | 'pages.nodes.isContentNode'
  | 'pages.nodes.isFrontPage'
  | 'pages.nodes.isPostsPage'
  | 'pages.nodes.isPrivacyPage'
  | 'pages.nodes.isRevision'
  | 'pages.nodes.isTermNode'
  | 'pages.nodes.link'
  | 'pages.nodes.menuOrder'
  | 'pages.nodes.modified'
  | 'pages.nodes.modifiedGmt'
  | 'pages.nodes.nodeType'
  | 'pages.nodes.parentDatabaseId'
  | 'pages.nodes.parentId'
  | 'pages.nodes.parent.children'
  | 'pages.nodes.parent.id'
  | 'pages.nodes.seo.breadcrumbs'
  | 'pages.nodes.seo.canonical'
  | 'pages.nodes.seo.cornerstone'
  | 'pages.nodes.seo.focuskw'
  | 'pages.nodes.seo.fullHead'
  | 'pages.nodes.seo.metaDesc'
  | 'pages.nodes.seo.metaKeywords'
  | 'pages.nodes.seo.metaRobotsNofollow'
  | 'pages.nodes.seo.metaRobotsNoindex'
  | 'pages.nodes.seo.opengraphAuthor'
  | 'pages.nodes.seo.opengraphDescription'
  | 'pages.nodes.seo.opengraphModifiedTime'
  | 'pages.nodes.seo.opengraphPublishedTime'
  | 'pages.nodes.seo.opengraphPublisher'
  | 'pages.nodes.seo.opengraphSiteName'
  | 'pages.nodes.seo.opengraphTitle'
  | 'pages.nodes.seo.opengraphType'
  | 'pages.nodes.seo.opengraphUrl'
  | 'pages.nodes.seo.readingTime'
  | 'pages.nodes.seo.title'
  | 'pages.nodes.seo.twitterDescription'
  | 'pages.nodes.seo.twitterTitle'
  | 'pages.nodes.slug'
  | 'pages.nodes.status'
  | 'pages.nodes.template.templateName'
  | 'pages.nodes.title'
  | 'pages.nodes.uri'
  | 'pages.nodes.wpChildren.nodes'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'posts.nodes'
  | 'posts.nodes.authorDatabaseId'
  | 'posts.nodes.authorId'
  | 'posts.nodes.caseStudy.appGallery'
  | 'posts.nodes.caseStudy.fieldGroupName'
  | 'posts.nodes.caseStudy.gallery'
  | 'posts.nodes.caseStudy.ourRole'
  | 'posts.nodes.caseStudy.problem'
  | 'posts.nodes.caseStudy.problemStrategyResultLayout'
  | 'posts.nodes.caseStudy.result'
  | 'posts.nodes.caseStudy.strategy'
  | 'posts.nodes.caseStudy.technology'
  | 'posts.nodes.caseStudy.type'
  | 'posts.nodes.categories.nodes'
  | 'posts.nodes.children'
  | 'posts.nodes.children.children'
  | 'posts.nodes.children.id'
  | 'posts.nodes.commentCount'
  | 'posts.nodes.commentStatus'
  | 'posts.nodes.comments.nodes'
  | 'posts.nodes.content'
  | 'posts.nodes.contentTypeName'
  | 'posts.nodes.databaseId'
  | 'posts.nodes.date'
  | 'posts.nodes.dateGmt'
  | 'posts.nodes.desiredSlug'
  | 'posts.nodes.enclosure'
  | 'posts.nodes.excerpt'
  | 'posts.nodes.featuredImageDatabaseId'
  | 'posts.nodes.featuredImageId'
  | 'posts.nodes.guid'
  | 'posts.nodes.id'
  | 'posts.nodes.internal.content'
  | 'posts.nodes.internal.contentDigest'
  | 'posts.nodes.internal.contentFilePath'
  | 'posts.nodes.internal.description'
  | 'posts.nodes.internal.fieldOwners'
  | 'posts.nodes.internal.ignoreType'
  | 'posts.nodes.internal.mediaType'
  | 'posts.nodes.internal.owner'
  | 'posts.nodes.internal.type'
  | 'posts.nodes.isContentNode'
  | 'posts.nodes.isRevision'
  | 'posts.nodes.isSticky'
  | 'posts.nodes.isTermNode'
  | 'posts.nodes.link'
  | 'posts.nodes.modified'
  | 'posts.nodes.modifiedGmt'
  | 'posts.nodes.next.authorDatabaseId'
  | 'posts.nodes.next.authorId'
  | 'posts.nodes.next.children'
  | 'posts.nodes.next.commentCount'
  | 'posts.nodes.next.commentStatus'
  | 'posts.nodes.next.content'
  | 'posts.nodes.next.contentTypeName'
  | 'posts.nodes.next.databaseId'
  | 'posts.nodes.next.date'
  | 'posts.nodes.next.dateGmt'
  | 'posts.nodes.next.desiredSlug'
  | 'posts.nodes.next.enclosure'
  | 'posts.nodes.next.excerpt'
  | 'posts.nodes.next.featuredImageDatabaseId'
  | 'posts.nodes.next.featuredImageId'
  | 'posts.nodes.next.guid'
  | 'posts.nodes.next.id'
  | 'posts.nodes.next.isContentNode'
  | 'posts.nodes.next.isRevision'
  | 'posts.nodes.next.isSticky'
  | 'posts.nodes.next.isTermNode'
  | 'posts.nodes.next.link'
  | 'posts.nodes.next.modified'
  | 'posts.nodes.next.modifiedGmt'
  | 'posts.nodes.next.nodeType'
  | 'posts.nodes.next.pingStatus'
  | 'posts.nodes.next.pinged'
  | 'posts.nodes.next.slug'
  | 'posts.nodes.next.status'
  | 'posts.nodes.next.title'
  | 'posts.nodes.next.toPing'
  | 'posts.nodes.next.uri'
  | 'posts.nodes.nodeType'
  | 'posts.nodes.parent.children'
  | 'posts.nodes.parent.id'
  | 'posts.nodes.pingStatus'
  | 'posts.nodes.pinged'
  | 'posts.nodes.postFormats.nodes'
  | 'posts.nodes.previous.authorDatabaseId'
  | 'posts.nodes.previous.authorId'
  | 'posts.nodes.previous.children'
  | 'posts.nodes.previous.commentCount'
  | 'posts.nodes.previous.commentStatus'
  | 'posts.nodes.previous.content'
  | 'posts.nodes.previous.contentTypeName'
  | 'posts.nodes.previous.databaseId'
  | 'posts.nodes.previous.date'
  | 'posts.nodes.previous.dateGmt'
  | 'posts.nodes.previous.desiredSlug'
  | 'posts.nodes.previous.enclosure'
  | 'posts.nodes.previous.excerpt'
  | 'posts.nodes.previous.featuredImageDatabaseId'
  | 'posts.nodes.previous.featuredImageId'
  | 'posts.nodes.previous.guid'
  | 'posts.nodes.previous.id'
  | 'posts.nodes.previous.isContentNode'
  | 'posts.nodes.previous.isRevision'
  | 'posts.nodes.previous.isSticky'
  | 'posts.nodes.previous.isTermNode'
  | 'posts.nodes.previous.link'
  | 'posts.nodes.previous.modified'
  | 'posts.nodes.previous.modifiedGmt'
  | 'posts.nodes.previous.nodeType'
  | 'posts.nodes.previous.pingStatus'
  | 'posts.nodes.previous.pinged'
  | 'posts.nodes.previous.slug'
  | 'posts.nodes.previous.status'
  | 'posts.nodes.previous.title'
  | 'posts.nodes.previous.toPing'
  | 'posts.nodes.previous.uri'
  | 'posts.nodes.selectCaseStudy.fieldGroupName'
  | 'posts.nodes.seo.breadcrumbs'
  | 'posts.nodes.seo.canonical'
  | 'posts.nodes.seo.cornerstone'
  | 'posts.nodes.seo.focuskw'
  | 'posts.nodes.seo.fullHead'
  | 'posts.nodes.seo.metaDesc'
  | 'posts.nodes.seo.metaKeywords'
  | 'posts.nodes.seo.metaRobotsNofollow'
  | 'posts.nodes.seo.metaRobotsNoindex'
  | 'posts.nodes.seo.opengraphAuthor'
  | 'posts.nodes.seo.opengraphDescription'
  | 'posts.nodes.seo.opengraphModifiedTime'
  | 'posts.nodes.seo.opengraphPublishedTime'
  | 'posts.nodes.seo.opengraphPublisher'
  | 'posts.nodes.seo.opengraphSiteName'
  | 'posts.nodes.seo.opengraphTitle'
  | 'posts.nodes.seo.opengraphType'
  | 'posts.nodes.seo.opengraphUrl'
  | 'posts.nodes.seo.readingTime'
  | 'posts.nodes.seo.title'
  | 'posts.nodes.seo.twitterDescription'
  | 'posts.nodes.seo.twitterTitle'
  | 'posts.nodes.slug'
  | 'posts.nodes.status'
  | 'posts.nodes.tags.nodes'
  | 'posts.nodes.template.templateName'
  | 'posts.nodes.terms.nodes'
  | 'posts.nodes.title'
  | 'posts.nodes.toPing'
  | 'posts.nodes.uri'
  | 'registeredDate'
  | 'roles.nodes'
  | 'roles.nodes.capabilities'
  | 'roles.nodes.children'
  | 'roles.nodes.children.children'
  | 'roles.nodes.children.id'
  | 'roles.nodes.displayName'
  | 'roles.nodes.id'
  | 'roles.nodes.internal.content'
  | 'roles.nodes.internal.contentDigest'
  | 'roles.nodes.internal.contentFilePath'
  | 'roles.nodes.internal.description'
  | 'roles.nodes.internal.fieldOwners'
  | 'roles.nodes.internal.ignoreType'
  | 'roles.nodes.internal.mediaType'
  | 'roles.nodes.internal.owner'
  | 'roles.nodes.internal.type'
  | 'roles.nodes.name'
  | 'roles.nodes.nodeType'
  | 'roles.nodes.parent.children'
  | 'roles.nodes.parent.id'
  | 'seo.breadcrumbTitle'
  | 'seo.canonical'
  | 'seo.fullHead'
  | 'seo.language'
  | 'seo.metaDesc'
  | 'seo.metaRobotsNofollow'
  | 'seo.metaRobotsNoindex'
  | 'seo.opengraphDescription'
  | 'seo.opengraphImage.altText'
  | 'seo.opengraphImage.ancestors.nodes'
  | 'seo.opengraphImage.authorDatabaseId'
  | 'seo.opengraphImage.authorId'
  | 'seo.opengraphImage.caption'
  | 'seo.opengraphImage.children'
  | 'seo.opengraphImage.children.children'
  | 'seo.opengraphImage.children.id'
  | 'seo.opengraphImage.commentCount'
  | 'seo.opengraphImage.commentStatus'
  | 'seo.opengraphImage.comments.nodes'
  | 'seo.opengraphImage.contentTypeName'
  | 'seo.opengraphImage.databaseId'
  | 'seo.opengraphImage.date'
  | 'seo.opengraphImage.dateGmt'
  | 'seo.opengraphImage.description'
  | 'seo.opengraphImage.desiredSlug'
  | 'seo.opengraphImage.enclosure'
  | 'seo.opengraphImage.fileSize'
  | 'seo.opengraphImage.filename'
  | 'seo.opengraphImage.filesize'
  | 'seo.opengraphImage.gatsbyImage'
  | 'seo.opengraphImage.guid'
  | 'seo.opengraphImage.height'
  | 'seo.opengraphImage.id'
  | 'seo.opengraphImage.internal.content'
  | 'seo.opengraphImage.internal.contentDigest'
  | 'seo.opengraphImage.internal.contentFilePath'
  | 'seo.opengraphImage.internal.description'
  | 'seo.opengraphImage.internal.fieldOwners'
  | 'seo.opengraphImage.internal.ignoreType'
  | 'seo.opengraphImage.internal.mediaType'
  | 'seo.opengraphImage.internal.owner'
  | 'seo.opengraphImage.internal.type'
  | 'seo.opengraphImage.isContentNode'
  | 'seo.opengraphImage.isTermNode'
  | 'seo.opengraphImage.link'
  | 'seo.opengraphImage.localFile.absolutePath'
  | 'seo.opengraphImage.localFile.accessTime'
  | 'seo.opengraphImage.localFile.atime'
  | 'seo.opengraphImage.localFile.atimeMs'
  | 'seo.opengraphImage.localFile.base'
  | 'seo.opengraphImage.localFile.birthTime'
  | 'seo.opengraphImage.localFile.birthtime'
  | 'seo.opengraphImage.localFile.birthtimeMs'
  | 'seo.opengraphImage.localFile.blksize'
  | 'seo.opengraphImage.localFile.blocks'
  | 'seo.opengraphImage.localFile.changeTime'
  | 'seo.opengraphImage.localFile.children'
  | 'seo.opengraphImage.localFile.childrenImageSharp'
  | 'seo.opengraphImage.localFile.ctime'
  | 'seo.opengraphImage.localFile.ctimeMs'
  | 'seo.opengraphImage.localFile.dev'
  | 'seo.opengraphImage.localFile.dir'
  | 'seo.opengraphImage.localFile.ext'
  | 'seo.opengraphImage.localFile.extension'
  | 'seo.opengraphImage.localFile.gid'
  | 'seo.opengraphImage.localFile.hash'
  | 'seo.opengraphImage.localFile.id'
  | 'seo.opengraphImage.localFile.ino'
  | 'seo.opengraphImage.localFile.mode'
  | 'seo.opengraphImage.localFile.modifiedTime'
  | 'seo.opengraphImage.localFile.mtime'
  | 'seo.opengraphImage.localFile.mtimeMs'
  | 'seo.opengraphImage.localFile.name'
  | 'seo.opengraphImage.localFile.nlink'
  | 'seo.opengraphImage.localFile.prettySize'
  | 'seo.opengraphImage.localFile.publicURL'
  | 'seo.opengraphImage.localFile.rdev'
  | 'seo.opengraphImage.localFile.relativeDirectory'
  | 'seo.opengraphImage.localFile.relativePath'
  | 'seo.opengraphImage.localFile.root'
  | 'seo.opengraphImage.localFile.size'
  | 'seo.opengraphImage.localFile.sourceInstanceName'
  | 'seo.opengraphImage.localFile.uid'
  | 'seo.opengraphImage.mediaDetails.file'
  | 'seo.opengraphImage.mediaDetails.height'
  | 'seo.opengraphImage.mediaDetails.sizes'
  | 'seo.opengraphImage.mediaDetails.width'
  | 'seo.opengraphImage.mediaItemUrl'
  | 'seo.opengraphImage.mediaType'
  | 'seo.opengraphImage.mimeType'
  | 'seo.opengraphImage.modified'
  | 'seo.opengraphImage.modifiedGmt'
  | 'seo.opengraphImage.nodeType'
  | 'seo.opengraphImage.parentDatabaseId'
  | 'seo.opengraphImage.parentId'
  | 'seo.opengraphImage.parent.children'
  | 'seo.opengraphImage.parent.id'
  | 'seo.opengraphImage.publicUrl'
  | 'seo.opengraphImage.remoteFile.absolutePath'
  | 'seo.opengraphImage.remoteFile.accessTime'
  | 'seo.opengraphImage.remoteFile.atime'
  | 'seo.opengraphImage.remoteFile.atimeMs'
  | 'seo.opengraphImage.remoteFile.base'
  | 'seo.opengraphImage.remoteFile.birthTime'
  | 'seo.opengraphImage.remoteFile.birthtime'
  | 'seo.opengraphImage.remoteFile.birthtimeMs'
  | 'seo.opengraphImage.remoteFile.blksize'
  | 'seo.opengraphImage.remoteFile.blocks'
  | 'seo.opengraphImage.remoteFile.changeTime'
  | 'seo.opengraphImage.remoteFile.children'
  | 'seo.opengraphImage.remoteFile.childrenImageSharp'
  | 'seo.opengraphImage.remoteFile.ctime'
  | 'seo.opengraphImage.remoteFile.ctimeMs'
  | 'seo.opengraphImage.remoteFile.dev'
  | 'seo.opengraphImage.remoteFile.dir'
  | 'seo.opengraphImage.remoteFile.ext'
  | 'seo.opengraphImage.remoteFile.extension'
  | 'seo.opengraphImage.remoteFile.gid'
  | 'seo.opengraphImage.remoteFile.hash'
  | 'seo.opengraphImage.remoteFile.id'
  | 'seo.opengraphImage.remoteFile.ino'
  | 'seo.opengraphImage.remoteFile.mode'
  | 'seo.opengraphImage.remoteFile.modifiedTime'
  | 'seo.opengraphImage.remoteFile.mtime'
  | 'seo.opengraphImage.remoteFile.mtimeMs'
  | 'seo.opengraphImage.remoteFile.name'
  | 'seo.opengraphImage.remoteFile.nlink'
  | 'seo.opengraphImage.remoteFile.prettySize'
  | 'seo.opengraphImage.remoteFile.publicURL'
  | 'seo.opengraphImage.remoteFile.rdev'
  | 'seo.opengraphImage.remoteFile.relativeDirectory'
  | 'seo.opengraphImage.remoteFile.relativePath'
  | 'seo.opengraphImage.remoteFile.root'
  | 'seo.opengraphImage.remoteFile.size'
  | 'seo.opengraphImage.remoteFile.sourceInstanceName'
  | 'seo.opengraphImage.remoteFile.uid'
  | 'seo.opengraphImage.resize.height'
  | 'seo.opengraphImage.resize.src'
  | 'seo.opengraphImage.resize.width'
  | 'seo.opengraphImage.seo.breadcrumbs'
  | 'seo.opengraphImage.seo.canonical'
  | 'seo.opengraphImage.seo.cornerstone'
  | 'seo.opengraphImage.seo.focuskw'
  | 'seo.opengraphImage.seo.fullHead'
  | 'seo.opengraphImage.seo.metaDesc'
  | 'seo.opengraphImage.seo.metaKeywords'
  | 'seo.opengraphImage.seo.metaRobotsNofollow'
  | 'seo.opengraphImage.seo.metaRobotsNoindex'
  | 'seo.opengraphImage.seo.opengraphAuthor'
  | 'seo.opengraphImage.seo.opengraphDescription'
  | 'seo.opengraphImage.seo.opengraphModifiedTime'
  | 'seo.opengraphImage.seo.opengraphPublishedTime'
  | 'seo.opengraphImage.seo.opengraphPublisher'
  | 'seo.opengraphImage.seo.opengraphSiteName'
  | 'seo.opengraphImage.seo.opengraphTitle'
  | 'seo.opengraphImage.seo.opengraphType'
  | 'seo.opengraphImage.seo.opengraphUrl'
  | 'seo.opengraphImage.seo.readingTime'
  | 'seo.opengraphImage.seo.title'
  | 'seo.opengraphImage.seo.twitterDescription'
  | 'seo.opengraphImage.seo.twitterTitle'
  | 'seo.opengraphImage.sizes'
  | 'seo.opengraphImage.slug'
  | 'seo.opengraphImage.sourceUrl'
  | 'seo.opengraphImage.srcSet'
  | 'seo.opengraphImage.status'
  | 'seo.opengraphImage.template.templateName'
  | 'seo.opengraphImage.title'
  | 'seo.opengraphImage.uri'
  | 'seo.opengraphImage.width'
  | 'seo.opengraphImage.wpChildren.nodes'
  | 'seo.opengraphTitle'
  | 'seo.region'
  | 'seo.schema.articleType'
  | 'seo.schema.pageType'
  | 'seo.schema.raw'
  | 'seo.social.facebook'
  | 'seo.social.instagram'
  | 'seo.social.linkedIn'
  | 'seo.social.mySpace'
  | 'seo.social.pinterest'
  | 'seo.social.soundCloud'
  | 'seo.social.twitter'
  | 'seo.social.wikipedia'
  | 'seo.social.youTube'
  | 'seo.title'
  | 'seo.twitterDescription'
  | 'seo.twitterImage.altText'
  | 'seo.twitterImage.ancestors.nodes'
  | 'seo.twitterImage.authorDatabaseId'
  | 'seo.twitterImage.authorId'
  | 'seo.twitterImage.caption'
  | 'seo.twitterImage.children'
  | 'seo.twitterImage.children.children'
  | 'seo.twitterImage.children.id'
  | 'seo.twitterImage.commentCount'
  | 'seo.twitterImage.commentStatus'
  | 'seo.twitterImage.comments.nodes'
  | 'seo.twitterImage.contentTypeName'
  | 'seo.twitterImage.databaseId'
  | 'seo.twitterImage.date'
  | 'seo.twitterImage.dateGmt'
  | 'seo.twitterImage.description'
  | 'seo.twitterImage.desiredSlug'
  | 'seo.twitterImage.enclosure'
  | 'seo.twitterImage.fileSize'
  | 'seo.twitterImage.filename'
  | 'seo.twitterImage.filesize'
  | 'seo.twitterImage.gatsbyImage'
  | 'seo.twitterImage.guid'
  | 'seo.twitterImage.height'
  | 'seo.twitterImage.id'
  | 'seo.twitterImage.internal.content'
  | 'seo.twitterImage.internal.contentDigest'
  | 'seo.twitterImage.internal.contentFilePath'
  | 'seo.twitterImage.internal.description'
  | 'seo.twitterImage.internal.fieldOwners'
  | 'seo.twitterImage.internal.ignoreType'
  | 'seo.twitterImage.internal.mediaType'
  | 'seo.twitterImage.internal.owner'
  | 'seo.twitterImage.internal.type'
  | 'seo.twitterImage.isContentNode'
  | 'seo.twitterImage.isTermNode'
  | 'seo.twitterImage.link'
  | 'seo.twitterImage.localFile.absolutePath'
  | 'seo.twitterImage.localFile.accessTime'
  | 'seo.twitterImage.localFile.atime'
  | 'seo.twitterImage.localFile.atimeMs'
  | 'seo.twitterImage.localFile.base'
  | 'seo.twitterImage.localFile.birthTime'
  | 'seo.twitterImage.localFile.birthtime'
  | 'seo.twitterImage.localFile.birthtimeMs'
  | 'seo.twitterImage.localFile.blksize'
  | 'seo.twitterImage.localFile.blocks'
  | 'seo.twitterImage.localFile.changeTime'
  | 'seo.twitterImage.localFile.children'
  | 'seo.twitterImage.localFile.childrenImageSharp'
  | 'seo.twitterImage.localFile.ctime'
  | 'seo.twitterImage.localFile.ctimeMs'
  | 'seo.twitterImage.localFile.dev'
  | 'seo.twitterImage.localFile.dir'
  | 'seo.twitterImage.localFile.ext'
  | 'seo.twitterImage.localFile.extension'
  | 'seo.twitterImage.localFile.gid'
  | 'seo.twitterImage.localFile.hash'
  | 'seo.twitterImage.localFile.id'
  | 'seo.twitterImage.localFile.ino'
  | 'seo.twitterImage.localFile.mode'
  | 'seo.twitterImage.localFile.modifiedTime'
  | 'seo.twitterImage.localFile.mtime'
  | 'seo.twitterImage.localFile.mtimeMs'
  | 'seo.twitterImage.localFile.name'
  | 'seo.twitterImage.localFile.nlink'
  | 'seo.twitterImage.localFile.prettySize'
  | 'seo.twitterImage.localFile.publicURL'
  | 'seo.twitterImage.localFile.rdev'
  | 'seo.twitterImage.localFile.relativeDirectory'
  | 'seo.twitterImage.localFile.relativePath'
  | 'seo.twitterImage.localFile.root'
  | 'seo.twitterImage.localFile.size'
  | 'seo.twitterImage.localFile.sourceInstanceName'
  | 'seo.twitterImage.localFile.uid'
  | 'seo.twitterImage.mediaDetails.file'
  | 'seo.twitterImage.mediaDetails.height'
  | 'seo.twitterImage.mediaDetails.sizes'
  | 'seo.twitterImage.mediaDetails.width'
  | 'seo.twitterImage.mediaItemUrl'
  | 'seo.twitterImage.mediaType'
  | 'seo.twitterImage.mimeType'
  | 'seo.twitterImage.modified'
  | 'seo.twitterImage.modifiedGmt'
  | 'seo.twitterImage.nodeType'
  | 'seo.twitterImage.parentDatabaseId'
  | 'seo.twitterImage.parentId'
  | 'seo.twitterImage.parent.children'
  | 'seo.twitterImage.parent.id'
  | 'seo.twitterImage.publicUrl'
  | 'seo.twitterImage.remoteFile.absolutePath'
  | 'seo.twitterImage.remoteFile.accessTime'
  | 'seo.twitterImage.remoteFile.atime'
  | 'seo.twitterImage.remoteFile.atimeMs'
  | 'seo.twitterImage.remoteFile.base'
  | 'seo.twitterImage.remoteFile.birthTime'
  | 'seo.twitterImage.remoteFile.birthtime'
  | 'seo.twitterImage.remoteFile.birthtimeMs'
  | 'seo.twitterImage.remoteFile.blksize'
  | 'seo.twitterImage.remoteFile.blocks'
  | 'seo.twitterImage.remoteFile.changeTime'
  | 'seo.twitterImage.remoteFile.children'
  | 'seo.twitterImage.remoteFile.childrenImageSharp'
  | 'seo.twitterImage.remoteFile.ctime'
  | 'seo.twitterImage.remoteFile.ctimeMs'
  | 'seo.twitterImage.remoteFile.dev'
  | 'seo.twitterImage.remoteFile.dir'
  | 'seo.twitterImage.remoteFile.ext'
  | 'seo.twitterImage.remoteFile.extension'
  | 'seo.twitterImage.remoteFile.gid'
  | 'seo.twitterImage.remoteFile.hash'
  | 'seo.twitterImage.remoteFile.id'
  | 'seo.twitterImage.remoteFile.ino'
  | 'seo.twitterImage.remoteFile.mode'
  | 'seo.twitterImage.remoteFile.modifiedTime'
  | 'seo.twitterImage.remoteFile.mtime'
  | 'seo.twitterImage.remoteFile.mtimeMs'
  | 'seo.twitterImage.remoteFile.name'
  | 'seo.twitterImage.remoteFile.nlink'
  | 'seo.twitterImage.remoteFile.prettySize'
  | 'seo.twitterImage.remoteFile.publicURL'
  | 'seo.twitterImage.remoteFile.rdev'
  | 'seo.twitterImage.remoteFile.relativeDirectory'
  | 'seo.twitterImage.remoteFile.relativePath'
  | 'seo.twitterImage.remoteFile.root'
  | 'seo.twitterImage.remoteFile.size'
  | 'seo.twitterImage.remoteFile.sourceInstanceName'
  | 'seo.twitterImage.remoteFile.uid'
  | 'seo.twitterImage.resize.height'
  | 'seo.twitterImage.resize.src'
  | 'seo.twitterImage.resize.width'
  | 'seo.twitterImage.seo.breadcrumbs'
  | 'seo.twitterImage.seo.canonical'
  | 'seo.twitterImage.seo.cornerstone'
  | 'seo.twitterImage.seo.focuskw'
  | 'seo.twitterImage.seo.fullHead'
  | 'seo.twitterImage.seo.metaDesc'
  | 'seo.twitterImage.seo.metaKeywords'
  | 'seo.twitterImage.seo.metaRobotsNofollow'
  | 'seo.twitterImage.seo.metaRobotsNoindex'
  | 'seo.twitterImage.seo.opengraphAuthor'
  | 'seo.twitterImage.seo.opengraphDescription'
  | 'seo.twitterImage.seo.opengraphModifiedTime'
  | 'seo.twitterImage.seo.opengraphPublishedTime'
  | 'seo.twitterImage.seo.opengraphPublisher'
  | 'seo.twitterImage.seo.opengraphSiteName'
  | 'seo.twitterImage.seo.opengraphTitle'
  | 'seo.twitterImage.seo.opengraphType'
  | 'seo.twitterImage.seo.opengraphUrl'
  | 'seo.twitterImage.seo.readingTime'
  | 'seo.twitterImage.seo.title'
  | 'seo.twitterImage.seo.twitterDescription'
  | 'seo.twitterImage.seo.twitterTitle'
  | 'seo.twitterImage.sizes'
  | 'seo.twitterImage.slug'
  | 'seo.twitterImage.sourceUrl'
  | 'seo.twitterImage.srcSet'
  | 'seo.twitterImage.status'
  | 'seo.twitterImage.template.templateName'
  | 'seo.twitterImage.title'
  | 'seo.twitterImage.uri'
  | 'seo.twitterImage.width'
  | 'seo.twitterImage.wpChildren.nodes'
  | 'seo.twitterTitle'
  | 'slug'
  | 'uri'
  | 'url'
  | 'username';

type tsUserFilterInput = {
  readonly authorProfile: InputMaybe<tsUser_AuthorprofileFilterInput>;
  readonly avatar: InputMaybe<tsAvatarFilterInput>;
  readonly capKey: InputMaybe<StringQueryOperatorInput>;
  readonly capabilities: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly comments: InputMaybe<tsUserToCommentConnectionFilterInput>;
  readonly databaseId: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly extraCapabilities: InputMaybe<StringQueryOperatorInput>;
  readonly firstName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isContentNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTermNode: InputMaybe<BooleanQueryOperatorInput>;
  readonly lastName: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nicename: InputMaybe<StringQueryOperatorInput>;
  readonly nickname: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly pages: InputMaybe<tsUserToPageConnectionFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly posts: InputMaybe<tsUserToPostConnectionFilterInput>;
  readonly registeredDate: InputMaybe<StringQueryOperatorInput>;
  readonly roles: InputMaybe<tsUserToUserRoleConnectionFilterInput>;
  readonly seo: InputMaybe<tsSEOUserFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly username: InputMaybe<StringQueryOperatorInput>;
};

type tsUserGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsUserEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsUserGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsUser>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsUserGroupConnection_distinctArgs = {
  field: tsUserFieldsEnum;
};


type tsUserGroupConnection_groupArgs = {
  field: tsUserFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsUserGroupConnection_maxArgs = {
  field: tsUserFieldsEnum;
};


type tsUserGroupConnection_minArgs = {
  field: tsUserFieldsEnum;
};


type tsUserGroupConnection_sumArgs = {
  field: tsUserFieldsEnum;
};

/** A user role object */
type tsUserRole = Node & tsNode & {
  /** The capabilities that belong to this role */
  readonly capabilities: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  /** The display name of the role */
  readonly displayName: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** The registered name of the role */
  readonly name: Maybe<Scalars['String']>;
  readonly nodeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type tsUserRoleConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsUserRoleEdge>;
  readonly group: ReadonlyArray<tsUserRoleGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsUserRole>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsUserRoleConnection_distinctArgs = {
  field: tsUserRoleFieldsEnum;
};


type tsUserRoleConnection_groupArgs = {
  field: tsUserRoleFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsUserRoleConnection_maxArgs = {
  field: tsUserRoleFieldsEnum;
};


type tsUserRoleConnection_minArgs = {
  field: tsUserRoleFieldsEnum;
};


type tsUserRoleConnection_sumArgs = {
  field: tsUserRoleFieldsEnum;
};

type tsUserRoleEdge = {
  readonly next: Maybe<tsUserRole>;
  readonly node: tsUserRole;
  readonly previous: Maybe<tsUserRole>;
};

type tsUserRoleFieldsEnum =
  | 'capabilities'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'displayName'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeType'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type tsUserRoleFilterInput = {
  readonly capabilities: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly displayName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type tsUserRoleFilterListInput = {
  readonly elemMatch: InputMaybe<tsUserRoleFilterInput>;
};

type tsUserRoleGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<tsUserRoleEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<tsUserRoleGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<tsUserRole>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type tsUserRoleGroupConnection_distinctArgs = {
  field: tsUserRoleFieldsEnum;
};


type tsUserRoleGroupConnection_groupArgs = {
  field: tsUserRoleFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type tsUserRoleGroupConnection_maxArgs = {
  field: tsUserRoleFieldsEnum;
};


type tsUserRoleGroupConnection_minArgs = {
  field: tsUserRoleFieldsEnum;
};


type tsUserRoleGroupConnection_sumArgs = {
  field: tsUserRoleFieldsEnum;
};

type tsUserRoleSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsUserRoleFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type tsUserSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<tsUserFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Connection between the User type and the Comment type */
type tsUserToCommentConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsComment>>>;
};

type tsUserToCommentConnectionFilterInput = {
  readonly nodes: InputMaybe<tsCommentFilterListInput>;
};

/** Connection between the User type and the page type */
type tsUserToPageConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsPage>>>;
};

type tsUserToPageConnectionFilterInput = {
  readonly nodes: InputMaybe<tsPageFilterListInput>;
};

/** Connection between the User type and the post type */
type tsUserToPostConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsPost>>>;
};

type tsUserToPostConnectionFilterInput = {
  readonly nodes: InputMaybe<tsPostFilterListInput>;
};

/** Connection between the User type and the UserRole type */
type tsUserToUserRoleConnection = {
  /** The nodes of the connection, without the edges */
  readonly nodes: Maybe<ReadonlyArray<Maybe<tsUserRole>>>;
};

type tsUserToUserRoleConnectionFilterInput = {
  readonly nodes: InputMaybe<tsUserRoleFilterListInput>;
};

/** Field Group */
type tsUser_Authorprofile = tsAcfFieldGroup & {
  /** The name of the ACF Field Group */
  readonly fieldGroupName: Maybe<Scalars['String']>;
  readonly profile: Maybe<tsMediaItem>;
};

type tsUser_AuthorprofileFilterInput = {
  readonly fieldGroupName: InputMaybe<StringQueryOperatorInput>;
  readonly profile: InputMaybe<tsMediaItemFilterInput>;
};

/** Information needed by gatsby-source-wordpress. */
type tsWPGatsby = {
  /** Returns wether or not pretty permalinks are enabled. */
  readonly arePrettyPermalinksEnabled: Maybe<Scalars['Boolean']>;
  /** Wether or not the Preview frontend URL is online. */
  readonly isPreviewFrontendOnline: Maybe<Scalars['Boolean']>;
};

type tsWPGatsbyFilterInput = {
  readonly arePrettyPermalinksEnabled: InputMaybe<BooleanQueryOperatorInput>;
  readonly isPreviewFrontendOnline: InputMaybe<BooleanQueryOperatorInput>;
};

/** A Gravity Forms website field. */
type tsWebsiteField = tsFormField & tsGfFieldWithAdminLabel & tsGfFieldWithConditionalLogic & tsGfFieldWithCssClass & tsGfFieldWithDefaultValue & tsGfFieldWithDescription & tsGfFieldWithDuplicate & tsGfFieldWithErrorMessage & tsGfFieldWithLabel & tsGfFieldWithLabelPlacement & tsGfFieldWithPersonalData & tsGfFieldWithPlaceholder & tsGfFieldWithPrepopulateField & tsGfFieldWithRules & tsGfFieldWithSize & {
  /** When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels. */
  readonly adminLabel: Maybe<Scalars['String']>;
  /** Determines if the field’s value can be pre-populated dynamically. */
  readonly canPrepopulate: Maybe<Scalars['Boolean']>;
  /** Controls the visibility of the field based on values selected by the user. */
  readonly conditionalLogic: Maybe<tsConditionalLogic>;
  /** String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields. */
  readonly cssClass: Maybe<Scalars['String']>;
  /** Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed. */
  readonly defaultValue: Maybe<Scalars['String']>;
  /** Field description. */
  readonly description: Maybe<Scalars['String']>;
  /** The placement of the field description. */
  readonly descriptionPlacement: Maybe<tsFormFieldDescriptionPlacementEnum>;
  /** Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true. */
  readonly displayOnly: Maybe<Scalars['Boolean']>;
  /** Contains the message that is displayed for fields that fail validation. */
  readonly errorMessage: Maybe<Scalars['String']>;
  /** Field ID. */
  readonly id: Scalars['Int'];
  /** Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`. */
  readonly inputName: Maybe<Scalars['String']>;
  /** The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields. */
  readonly inputType: Maybe<tsFormFieldTypeEnum>;
  /** Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it. */
  readonly isRequired: Maybe<Scalars['Boolean']>;
  /** Field label that will be displayed on the form and on the admin pages. */
  readonly label: Maybe<Scalars['String']>;
  /** The field label position. */
  readonly labelPlacement: Maybe<tsFormFieldLabelPlacementEnum>;
  /** The number of CSS grid columns the field should span. */
  readonly layoutGridColumnSpan: Maybe<Scalars['Int']>;
  /** The number of CSS grid columns the spacer field following this one should span. */
  readonly layoutSpacerGridColumnSpan: Maybe<Scalars['Int']>;
  /** The form page this field is located on. Default is 1. */
  readonly pageNumber: Maybe<Scalars['Int']>;
  /** The form field-specifc policies for exporting and erasing personal data. */
  readonly personalData: Maybe<tsFormFieldDataPolicy>;
  /** Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form. */
  readonly placeholder: Maybe<Scalars['String']>;
  /** Determines if the field allows duplicate submissions. */
  readonly shouldAllowDuplicates: Maybe<Scalars['Boolean']>;
  /** Determines the size of the field when displayed on the page. */
  readonly size: Maybe<tsFormFieldSizeEnum>;
  /** The type of field to be displayed. */
  readonly type: Maybe<tsFormFieldTypeEnum>;
  /** The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array. */
  readonly value: Maybe<Scalars['String']>;
  /** Field visibility. */
  readonly visibility: Maybe<tsFormFieldVisibilityEnum>;
};

/** The writing setting type */
type tsWritingSettings = {
  /** Default post category. */
  readonly defaultCategory: Maybe<Scalars['Int']>;
  /** Default post format. */
  readonly defaultPostFormat: Maybe<Scalars['String']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  readonly useSmilies: Maybe<Scalars['Boolean']>;
};

type tsWritingSettingsFilterInput = {
  readonly defaultCategory: InputMaybe<IntQueryOperatorInput>;
  readonly defaultPostFormat: InputMaybe<StringQueryOperatorInput>;
  readonly useSmilies: InputMaybe<BooleanQueryOperatorInput>;
};

type AboutCareersSectionQueryVariables = Exact<{ [key: string]: never; }>;


type AboutCareersSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type AboutMyQueryBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type AboutMyQueryBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type AboutOurValuesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type AboutOurValuesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly ourValueContents: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type AboutTeamSectionQueryVariables = Exact<{ [key: string]: never; }>;


type AboutTeamSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly teamMembers: ReadonlyArray<{ readonly title: string | null, readonly content: string | null, readonly link: string | null, readonly team: { readonly designation: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type DigitalCommerceCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type DigitalCommerceCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null } | null> | null } | {} | null> | null } | null } | null };

type DigitalProductsCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type DigitalProductsCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null } | null> | null } | {} | null> | null } | null } | null };

type FooterTitleandCTAQueryVariables = Exact<{ [key: string]: never; }>;


type FooterTitleandCTAQuery = { readonly ts: { readonly acfOptionsFooterOptions: { readonly footerOption: { readonly content: string | null, readonly letSTalkCta: { readonly url: string | null, readonly title: string | null, readonly target: string | null } | null } | null } | null } | null };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type LogoQueryQueryVariables = Exact<{ [key: string]: never; }>;


type LogoQueryQuery = { readonly ts: { readonly acfOptionsHeaderOptions: { readonly headerOption: { readonly logo: { readonly altText: string | null, readonly sourceUrl: string | null } | null, readonly letSTalkCta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | null } | null } | null };

type MenuQueryQueryVariables = Exact<{ [key: string]: never; }>;


type MenuQueryQuery = { readonly tsMenu: { readonly menuItems: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly url: string | null, readonly path: string | null, readonly label: string | null, readonly parentId: string | null } | null> | null } | null } | null };

type MyQueryAboutSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAboutSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly pointsLists: ReadonlyArray<{ readonly pointContent: string | null } | null> | null, readonly gallery: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryAccomplishmentsQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAccomplishmentsQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly companySnapshotHeading: string | null, readonly informationCounts: ReadonlyArray<{ readonly heading: string | null, readonly counts: number | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryallCaseStudyPageQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryallCaseStudyPageQuery = { readonly allTsCaseStudy: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null, readonly detailPageImage: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly portfolio: { readonly listingPage: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null, readonly wpParent: { readonly node: { readonly name: string | null } | null } | null } | null> | null } | null } }> } };

type MyQueryAllPostQueryQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAllPostQueryQuery = { readonly allTsPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly title: string | null, readonly link: string | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } }> } };

type MyQueryAndroidBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAndroidBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryAndroidBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAndroidBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAndroidCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAndroidCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAndroidFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAndroidFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAndroidFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAndroidFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAndroidFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAndroidFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAndroidPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAndroidPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAndroidWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAndroidWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryAngulaPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAngulaPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAngularBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAngularBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryAngularBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAngularBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAngularCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAngularCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAngularFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAngularFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAngularFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAngularFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAngularFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAngularFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryAngularWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryAngularWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryB2BB2CFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryB2BB2CFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryB2BB2cWebsitesBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryB2BB2cWebsitesBannerSectionQuery = { readonly tsMenu: { readonly menuItems: { readonly nodes: ReadonlyArray<{ readonly label: string | null, readonly id: string, readonly url: string | null } | null> | null } | null } | null, readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryB2BB2CWebsitesCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryB2BB2CWebsitesCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryB2BB2CWebsitesEBookSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryB2BB2CWebsitesEBookSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryB2BB2CWebsitesFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryB2BB2CWebsitesFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryB2BB2CWebsitesPlanaProjectSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryB2BB2CWebsitesPlanaProjectSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryB2BB2CWebsitesTechSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryB2BB2CWebsitesTechSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null, readonly cta: { readonly target: string | null, readonly title: string | null, readonly url: string | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryB2BB2CWebsitesWhoitsforSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryB2BB2CWebsitesWhoitsforSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly pointsLists: ReadonlyArray<{ readonly pointContent: string | null } | null> | null, readonly gallery: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly target: string | null, readonly title: string | null, readonly url: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryBannerSectionQuery = { readonly tsMenu: { readonly menuItems: { readonly nodes: ReadonlyArray<{ readonly label: string | null, readonly id: string, readonly url: string | null } | null> | null } | null } | null, readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryBigCommerceBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryBigCommerceBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryBigCommerceBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryBigCommerceBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryBigCommerceCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryBigCommerceCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryBigCommerceFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryBigCommerceFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryBigCommerceFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryBigCommerceFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryBigCommerceFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryBigCommerceFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryBigCommercePlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryBigCommercePlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryBigCommerceWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryBigCommerceWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryBlogsDetailsPageQueryVariables = Exact<{
  slug: InputMaybe<Scalars['String']>;
}>;


type MyQueryBlogsDetailsPageQuery = { readonly allTsPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly title: string | null, readonly slug: string | null, readonly dateGmt: string | null, readonly content: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly selectCaseStudy: { readonly caseStudy: { readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly content: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly portfolio: { readonly backgroundGradient: string | null } | null } | null, readonly listingPageImage: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly next: { readonly link: string | null, readonly title: string | null, readonly slug: string | null } | null, readonly previous: { readonly link: string | null, readonly slug: string | null, readonly title: string | null } | null, readonly author: { readonly node: { readonly firstName: string | null, readonly lastName: string | null, readonly description: string | null, readonly authorProfile: { readonly profile: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly posts: { readonly nodes: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null, readonly link: string | null } | null> | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | null } | null> | null } | null } }> } };

type MyQueryCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCareerBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCareerBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly pointsLists: ReadonlyArray<{ readonly pointContent: string | null } | null> | null, readonly gallery: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryCareersBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCareersBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly benefitsContents: ReadonlyArray<{ readonly heading: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCareersOpenRolesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCareersOpenRolesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly fieldGroupName: string | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly openRolesContents: ReadonlyArray<{ readonly heading: string | null, readonly positionsListing: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly content: string | null, readonly careers: { readonly jobLocation: string | null, readonly experience: string | null, readonly applyNowForThisPosition: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null } | null } | null> | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCaseStudiesChildCategoeryQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCaseStudiesChildCategoeryQuery = { readonly allTsCaseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly parentDatabaseId: number | null, readonly wpParent: { readonly node: { readonly name: string | null, readonly slug: string | null, readonly databaseId: number } | null } | null }> } };

type MyQueryCaseStudyDetailsPageQueryVariables = Exact<{
  slug: InputMaybe<Scalars['String']>;
}>;


type MyQueryCaseStudyDetailsPageQuery = { readonly tsCaseStudy: { readonly caseStudyDetailsPage: { readonly heading: string | null, readonly content: string | null, readonly featureHeading: string | null, readonly specialFeaturesHeading: string | null, readonly specialFeaturesContent: string | null, readonly clientSaysHeading: string | null, readonly tools: { readonly heading: string | null, readonly content: string | null } | null, readonly services: { readonly heading: string | null, readonly content: string | null } | null, readonly portfolioLinks: { readonly heading: string | null, readonly androidLink: string | null, readonly iosLink: string | null, readonly webLink: string | null } | null, readonly ourRoleSection: { readonly roleHeading: string | null, readonly roleContent: string | null } | null, readonly detailsPageImage: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly ourProcess: { readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | null, readonly featuresListsForApps: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null, readonly featuresListsForWeb: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null, readonly problemChallengesResultLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null, readonly weFollowAgile: { readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly name: string | null } | null> | null } | null } | null, readonly allTsTestimonial: { readonly edges: ReadonlyArray<{ readonly node: { readonly content: string | null, readonly title: string | null, readonly TestimonialsForCaseStudies: { readonly author: string | null, readonly company: string | null, readonly jobTitle: string | null, readonly content: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } }> } };

type MyQueryCategoryPostQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCategoryPostQuery = { readonly tsCategory: { readonly posts: { readonly nodes: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly featuredImage: { readonly node: { readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null, readonly count: number | null } | null> | null } | null } | null> | null } | null } | null };

type MyQueryCommerceToolsBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCommerceToolsBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryCommerceToolsBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCommerceToolsBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCommerceToolsCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCommerceToolsCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCommerceToolsFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCommerceToolsFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCommerceToolsFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCommerceToolsFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCommerceToolsFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCommerceToolsFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCommerceToolsPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCommerceToolsPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCommerceToolsWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCommerceToolsWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryContactPageQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryContactPageQuery = { readonly ts: { readonly tsOptions: { readonly generaloptions: { readonly officeAddresses: ReadonlyArray<{ readonly title: string | null, readonly content: string | null } | null> | null, readonly enquireLists: ReadonlyArray<{ readonly title: string | null, readonly content: string | null } | null> | null } | null } | null } | null };

type MyQueryCrossPlatformAppBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCrossPlatformAppBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryCrossPlatformAppBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCrossPlatformAppBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCrossPlatformAppBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCrossPlatformAppBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCrossPlatformAppCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCrossPlatformAppCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCrossPlatformAppFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCrossPlatformAppFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCrossPlatformAppFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCrossPlatformAppFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCrossPlatformAppFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCrossPlatformAppFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryCrossPlatformAppWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryCrossPlatformAppWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryDigitalCommercceFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalCommercceFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalCommerceCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalCommerceCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalCommerceFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalCommerceFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalCommercePlanaProjectSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalCommercePlanaProjectSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly image: { readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalCommerceTechSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalCommerceTechSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null, readonly cta: { readonly target: string | null, readonly title: string | null, readonly url: string | null } | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalCommerceWhoitsforSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalCommerceWhoitsforSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly pointsLists: ReadonlyArray<{ readonly pointContent: string | null } | null> | null, readonly gallery: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryDigitalProductBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalProductBannerSectionQuery = { readonly tsMenu: { readonly menuItems: { readonly nodes: ReadonlyArray<{ readonly label: string | null, readonly id: string, readonly url: string | null } | null> | null } | null } | null, readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryDigitalProductCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalProductCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalProductFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalProductFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalProductFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalProductFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalProductPlanaProjectSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalProductPlanaProjectSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly image: { readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalProductTechSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalProductTechSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDigitalProductWebsiteAuditSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalProductWebsiteAuditSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryDigitalProductWhoitsforSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDigitalProductWhoitsforSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly pointsLists: ReadonlyArray<{ readonly pointContent: string | null } | null> | null, readonly gallery: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryDosAndDontsCaseStudySectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDosAndDontsCaseStudySectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly needBackgroundColor: boolean | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryDosAndDontsMVPTemplateBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDosAndDontsMVPTemplateBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly heading: string | null, readonly subHeading: string | null, readonly content: string | null, readonly contentsLists: string | null, readonly formSection: { readonly formTitle: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryDosAndDontsMVPTemplateDevelopmentSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryDosAndDontsMVPTemplateDevelopmentSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly technologyIcons: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryEcommerceBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryEcommerceBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryEcommerceBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryEcommerceBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryEcommerceBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryEcommerceBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryEcommerceCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryEcommerceCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryEcommerceFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryEcommerceFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryEcommerceFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryEcommerceFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryEcommerceFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryEcommerceFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryEcommerceWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryEcommerceWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryEngagementmodelSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryEngagementmodelSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryExpressjsBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryExpressjsBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryExpressjsBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryExpressjsBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryExpressjsBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryExpressjsBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryExpressjsCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryExpressjsCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryExpressjsFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryExpressjsFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryExpressjsFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryExpressjsFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryExpressjsFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryExpressjsFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryExpressjsWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryExpressjsWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryFintechBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFintechBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryFintechBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFintechBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFintechCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFintechCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFintechFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFintechFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFintechFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFintechFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFintechFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFintechFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFintechPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFintechPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFintechWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFintechWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryFlutterBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFlutterBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryFlutterBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFlutterBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFlutterCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFlutterCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFlutterFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFlutterFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFlutterFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFlutterFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFlutterFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFlutterFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFlutterPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFlutterPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryFlutterWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryFlutterWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryfooter1QueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryfooter1Query = { readonly ts: { readonly acfOptionsFooterOptions: { readonly footerOption: { readonly socialHeading: string | null, readonly getOurNewsletter: { readonly heading: string | null, readonly content: string | null, readonly newsletterForm: string | null } | null, readonly connectWithUs: { readonly content: string | null, readonly heading: string | null, readonly email: string | null } | null, readonly explore: { readonly heading: string | null, readonly pageLists: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly uri: string | null } | {} | null> | null } | null, readonly socialMediaLists: ReadonlyArray<{ readonly socialMediaName: string | null, readonly socialMediaLinks: string | null } | null> | null } | null } | null } | null };

type MyQueryGrowthstagesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryGrowthstagesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly growthStagesCta: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null, readonly image: string | null, readonly cta: { readonly target: string | null, readonly title: string | null, readonly url: string | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryHealthcareBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHealthcareBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryHealthcareBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHealthcareBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryHealthcareCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHealthcareCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryHealthcareFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHealthcareFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryHealthcareFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHealthcareFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryHealthcareFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHealthcareFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryHealthcarePlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHealthcarePlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryHealthcareWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHealthcareWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryHeroBannerQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHeroBannerQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly bannerContent: string | null, readonly bannerVideoLink: string | null, readonly bannerImage: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryHireDeveloperQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryHireDeveloperQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly formHeading: string | null, readonly testimonialsHeading: string | null, readonly recognitionsHeading: string | null, readonly getInTouchHeading: string | null, readonly trustedByHeading: string | null } | {} | null> | null } | null } | null, readonly ts: { readonly tsOptions: { readonly generaloptions: { readonly trustedBy: ReadonlyArray<{ readonly logo: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null, readonly recognition: ReadonlyArray<{ readonly logo: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | null } | null } | null, readonly allTsTestimonial: { readonly edges: ReadonlyArray<{ readonly node: { readonly content: string | null, readonly title: string | null, readonly TestimonialsForCaseStudies: { readonly author: string | null, readonly company: string | null, readonly jobTitle: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } }> } };

type MyQueryIonicBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIonicBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryIonicBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIonicBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIonicCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIonicCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIonicFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIonicFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIonicFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIonicFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIonicFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIonicFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIonicPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIonicPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIonicWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIonicWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryIosBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIosBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryIosBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIosBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIosCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIosCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIosFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIosFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIosFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIosFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIosFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIosFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIosPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIosPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIosWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIosWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryIotBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIotBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryIotBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIotBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIotCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIotCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIotFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIotFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIotFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIotFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIotFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIotFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIotPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIotPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryIotWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryIotWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryKotlinBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryKotlinBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryKotlinBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryKotlinBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryKotlinCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryKotlinCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryKotlinFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryKotlinFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryKotlinFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryKotlinFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryKotlinFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryKotlinFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryKotlinPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryKotlinPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryKotlinWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryKotlinWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryLaravelBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryLaravelBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryLaravelBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryLaravelBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryLaravelBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryLaravelBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryLaravelCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryLaravelCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryLaravelFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryLaravelFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryLaravelFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryLaravelFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryLaravelFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryLaravelFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryLaravelWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryLaravelWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryLocationSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryLocationSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly locationContents: ReadonlyArray<{ readonly location: string | null, readonly address: string | null } | null> | null, readonly locationImages: ReadonlyArray<{ readonly images: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMagentoBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMagentoBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryMagentoBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMagentoBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMagentoCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMagentoCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMagentoFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMagentoFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMagentoFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMagentoFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMagentoFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMagentoFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMagentoPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMagentoPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMagentoWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMagentoWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryMobileAppBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMobileAppBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryMobileAppBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMobileAppBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMobileAppCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMobileAppCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMobileAppFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMobileAppFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMobileAppFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMobileAppFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMobileAppFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMobileAppFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMobileAppPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMobileAppPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMobileAppWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMobileAppWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryMOSBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMOSBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly heading: string | null, readonly subHeading: string | null, readonly content: string | null, readonly contentsLists: string | null, readonly formSection: { readonly formTitle: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryMoscowCaseStudySectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMoscowCaseStudySectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly needBackgroundColor: boolean | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMoscowMVPDevelopmentSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMoscowMVPDevelopmentSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly technologyIcons: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMOSMoscowPSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMOSMoscowPSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryMOSMoscowWhyDoYouNeedSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMOSMoscowWhyDoYouNeedSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryMOSMVariedSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMOSMVariedSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly heading: string | null, readonly subHeading: string | null, readonly content: string | null, readonly moscowPrioritizationCtas: ReadonlyArray<{ readonly initial: string | null, readonly title: string | null, readonly description: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMvpBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMvpBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryMvpBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMvpBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMvpCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMvpCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMVPDevelopmentSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMVPDevelopmentSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly technologyIcons: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMvpFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMvpFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMvpFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMvpFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMvpFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMvpFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMvpIndustriesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMvpIndustriesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly heading: string | null, readonly industriesLists: ReadonlyArray<{ readonly title: string | null, readonly logo: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMVPMVPTemplateBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMVPMVPTemplateBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly heading: string | null, readonly subHeading: string | null, readonly content: string | null, readonly contentsLists: string | null, readonly formSection: { readonly formTitle: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryMvpPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMvpPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMVPSliderSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMVPSliderSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly needBackgroundColor: boolean | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryMvpWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryMvpWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryNestjsBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNestjsBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryNestjsBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNestjsBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNestjsCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNestjsCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNestjsFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNestjsFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNestjsFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNestjsFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNestjsFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNestjsFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNestjsPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNestjsPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNestjsWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNestjsWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryNodejsBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNodejsBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryNodejsBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNodejsBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNodejsCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNodejsCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNodejsFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNodejsFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNodejsFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNodejsFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNodejsFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNodejsFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNodejsPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNodejsPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryNodejsWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryNodejsWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryOffshoreBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOffshoreBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryOffshoreBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOffshoreBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOffshoreCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOffshoreCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOffshoreFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOffshoreFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOffshoreFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOffshoreFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOffshoreFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOffshoreFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOffshorePlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOffshorePlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOffshoreWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOffshoreWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryOnDemandBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOnDemandBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryOnDemandBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOnDemandBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOnDemandCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOnDemandCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOnDemandFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOnDemandFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOnDemandFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOnDemandFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOnDemandFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOnDemandFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOnDemandPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOnDemandPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryOnDemandWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryOnDemandWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryParentCategoryQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryParentCategoryQuery = { readonly tsMenu: { readonly menuItems: { readonly nodes: ReadonlyArray<{ readonly label: string | null, readonly id: string, readonly url: string | null } | null> | null } | null } | null };

type MyQueryPhpBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryPhpBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryPhpBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryPhpBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryPhpCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryPhpCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryPhpFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryPhpFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryPhpFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryPhpFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryPhpFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryPhpFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryPhpPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryPhpPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryPhpWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryPhpWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryProcessPageQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryProcessPageQuery = { readonly tsPage: { readonly content: string | null, readonly title: string | null, readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly countTitle: string | null, readonly count: string | null, readonly backgroundColor: string | null, readonly textColor: string | null, readonly heading: string | null, readonly subHeading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryProjectStartupQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryProjectStartupQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly formHeading: string | null, readonly testimonialsHeading: string | null, readonly recognitionsHeading: string | null, readonly getInTouchHeading: string | null, readonly trustedByHeading: string | null } | {} | null> | null } | null } | null, readonly ts: { readonly tsOptions: { readonly generaloptions: { readonly trustedBy: ReadonlyArray<{ readonly logo: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null, readonly recognition: ReadonlyArray<{ readonly logo: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | null } | null } | null, readonly allTsTestimonial: { readonly edges: ReadonlyArray<{ readonly node: { readonly content: string | null, readonly title: string | null, readonly TestimonialsForCaseStudies: { readonly author: string | null, readonly company: string | null, readonly jobTitle: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } }> } };

type MyQueryReactjsBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactjsBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryReactjsBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactjsBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactjsCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactjsCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactjsFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactjsFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactjsFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactjsFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactjsFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactjsFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactjsPlatformCapabilitiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactjsPlatformCapabilitiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactjsWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactjsWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryReactNativeBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactNativeBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryReactNativeBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactNativeBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactNativeCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactNativeCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactNativeFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactNativeFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactNativeFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactNativeFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactNativeFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactNativeFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactNativePlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactNativePlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryReactNativeWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryReactNativeWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryScaleBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScaleBannerSectionQuery = { readonly tsMenu: { readonly menuItems: { readonly nodes: ReadonlyArray<{ readonly label: string | null, readonly id: string, readonly url: string | null } | null> | null } | null } | null, readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryScaleCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScaleCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryScaleEBookSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScaleEBookSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryScaleFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScaleFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryScaleFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScaleFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryScalePartnersSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScalePartnersSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly partnersLogo: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryScaleTrialSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScaleTrialSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryScaleWhatWeOffersectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScaleWhatWeOffersectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly needBackgroundColor: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly imageOne: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly imageSecond: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly technologyLogo: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryScaleWhoitsforSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScaleWhoitsforSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null } | null> | null, readonly imageGallery: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryScaleWhyItWorksSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryScaleWhyItWorksSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly pointsLists: ReadonlyArray<{ readonly pointContent: string | null } | null> | null, readonly gallery: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly target: string | null, readonly title: string | null, readonly url: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryServicePageQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryServicePageQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly content: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly servicesCta: ReadonlyArray<{ readonly heading: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly serviceRedirectLinks: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryServicesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryServicesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly servicesCta: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopifyBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopifyBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryShopifyBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopifyBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopifyBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopifyBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopifyCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopifyCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopifyFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopifyFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopifyFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopifyFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopifyFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopifyFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopifyWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopifyWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryShopwareBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopwareBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryShopwareBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopwareBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopwareCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopwareCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopwareFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopwareFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopwareFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopwareFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopwareFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopwareFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopwarePlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopwarePlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryShopwareWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryShopwareWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryStaffAugmentationCaseStudySectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryStaffAugmentationCaseStudySectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly needBackgroundColor: boolean | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryStaffAugmentationMVPTemplateBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryStaffAugmentationMVPTemplateBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly heading: string | null, readonly subHeading: string | null, readonly content: string | null, readonly contentsLists: string | null, readonly formSection: { readonly formTitle: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryStaffAugmentationMVPTemplateDevelopmentSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryStaffAugmentationMVPTemplateDevelopmentSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly technologyIcons: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null } | {} | null> | null } | null } | null };

type MyQuerySwiftBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQuerySwiftBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQuerySwiftBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQuerySwiftBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQuerySwiftCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQuerySwiftCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQuerySwiftFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQuerySwiftFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQuerySwiftFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQuerySwiftFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQuerySwiftFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQuerySwiftFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQuerySwiftPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQuerySwiftPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQuerySwiftWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQuerySwiftWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQuerytestimonialQueryVariables = Exact<{ [key: string]: never; }>;


type MyQuerytestimonialQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly heading: string | null } | {} | null> | null } | null } | null, readonly allTsTestimonial: { readonly edges: ReadonlyArray<{ readonly node: { readonly title: string | null, readonly content: string | null, readonly TestimonialsForCaseStudies: { readonly author: string | null, readonly company: string | null, readonly jobTitle: string | null, readonly workRelationship: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null } | null> | null } | null, readonly newCaseStudy: { readonly shortContent: string | null } | null } | null> | null } | null } }> } };

type MyQueryThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryTitleAndMenuThoughtspaceQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTitleAndMenuThoughtspaceQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly heading: string | null } | {} | null> | null } | null } | null, readonly allTsCategory: { readonly edges: ReadonlyArray<{ readonly node: { readonly name: string | null, readonly link: string | null, readonly id: string, readonly slug: string | null, readonly databaseId: number } }> } };

type MyQueryTravelBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTravelBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryTravelBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTravelBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryTravelBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTravelBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryTravelCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTravelCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryTravelFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTravelFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryTravelFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTravelFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryTravelFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTravelFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryTravelWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTravelWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryTypesofCommerceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryTypesofCommerceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly showCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly needHeading: boolean | null, readonly heading: string | null, readonly content: string | null, readonly needImage: boolean | null, readonly needCta: boolean | null, readonly image: { readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryUIUXBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryUIUXBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryUIUXBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryUIUXBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryUIUXBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryUIUXBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryUIUXCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryUIUXCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryUIUXFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryUIUXFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryUIUXFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryUIUXFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryUIUXFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryUIUXFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryUIUXWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryUIUXWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryWebAppBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWebAppBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryWebAppBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWebAppBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWebAppCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWebAppCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWebAppFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWebAppFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWebAppFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWebAppFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWebAppFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWebAppFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWebAppPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWebAppPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWebAppWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWebAppWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryWebsiteAuditSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWebsiteAuditSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryWoocommerceBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWoocommerceBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryWoocommerceBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWoocommerceBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWoocommerceBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWoocommerceBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWoocommerceCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWoocommerceCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWoocommerceFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWoocommerceFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWoocommerceFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWoocommerceFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWoocommerceFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWoocommerceFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWoocommerceWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWoocommerceWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryWordPressBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWordPressBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryWordPressBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWordPressBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWordPressBenefitsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWordPressBenefitsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWordPressCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWordPressCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWordPressFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWordPressFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWordPressFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWordPressFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWordPressFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWordPressFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryWordPressWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWordPressWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type MyQueryWorksSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryWorksSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly caseStudy: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null } | null> | null } | null, readonly newCaseStudy: { readonly shortContent: string | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryXamarinBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryXamarinBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly image: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | {} | null> | null } | null } | null };

type MyQueryXamarinBenefitSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryXamarinBenefitSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryXamarinCoreSpecialtiesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryXamarinCoreSpecialtiesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly content: string | null, readonly coreSpecialtiesPages: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryXamarinFAQSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryXamarinFAQSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryXamarinFeaturedThoughtspaceSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryXamarinFeaturedThoughtspaceSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly cta: { readonly title: string | null, readonly target: string | null, readonly url: string | null } | null, readonly relatedPosts: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly categories: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly link: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryXamarinFeaturedWorkSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryXamarinFeaturedWorkSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly featuredWorks: ReadonlyArray<{ readonly title: string | null, readonly link: string | null, readonly slug: string | null, readonly newCaseStudy: { readonly shortContent: string | null } | null, readonly featuredImage: { readonly node: { readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null, readonly caseStudyCategory: { readonly nodes: ReadonlyArray<{ readonly link: string | null, readonly name: string | null, readonly slug: string | null } | null> | null } | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryXamarinPlatformCapabilitesSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryXamarinPlatformCapabilitesSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly backgroundColor: string | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null, readonly contentLists: ReadonlyArray<{ readonly heading: string | null, readonly content: string | null } | null> | null } | {} | null> | null } | null } | null };

type MyQueryXamarinWhyUsSectionQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryXamarinWhyUsSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly images: ReadonlyArray<{ readonly altText: string | null, readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null> | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };

type WorkMyQueryBannerSectionQueryVariables = Exact<{ [key: string]: never; }>;


type WorkMyQueryBannerSectionQuery = { readonly tsPage: { readonly flexibleContent: { readonly flexibleContent: ReadonlyArray<{ readonly needBackgroundColor: boolean | null, readonly backgroundColor: string | null, readonly needLine: boolean | null, readonly lineHeading: string | null, readonly lineNumber: string | null, readonly heading: string | null, readonly content: string | null, readonly needCta: boolean | null, readonly image: { readonly gatsbyImage: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly cta: { readonly title: string | null, readonly url: string | null, readonly target: string | null } | null } | {} | null> | null } | null } | null };


}
